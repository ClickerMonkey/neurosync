{"version":3,"sources":["rekord.min.js"],"names":["root","factory","define","amd","module","exports","global","Rekord","this","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","create","collectArray","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","isDefined","isFunction","constructor","apply","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","func","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","addPlugin","callback","beforeCreation","on","Events","Options","Plugins","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","target","functionName","events","secret","off","eventFunction","listener","result","subject","unlistener","unlistened","$methods","Class","method","EventNode","before","type","group","next","prev","addEventful","onListeners","$this","eventsInput","callbackContext","listeners","$$on","nodes","eventName","eventListeners","push","triggerId","remove","Types","Persistent","once","Once","after","After","offListeners","event","node","deleteProperty","obj","triggerListeners","args","triggerGroup","trigger","ex","Error","methods","$on","$once","$after","$off","$trigger","props","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","copyValues","grabbed","p","pull","pulledValue","pulled","transfer","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","splice","saveWhere","where","createWhere","Wheres","value","tester","exprEqualsTester","expression","exprEquals","isExpr","not","oneOf","input","AP","promise","get","isComplete","results","database","dynamic","className","classes","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","query","url","batchRun","clear","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","modelsCached","models","ModelCollection","allCached","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","contextIndex","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","discriminator","init","save","projectionName","projections","Projection","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","addProjection","Context","databases","alls","add","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","nexts","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","property","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","win","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","converter","fileProcessors","FilesNotSupported","reader","onload","e","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","window","construct","build","extend","parent","override","parentCopy","copyConstructor","instanceFactory","nativeArray","Settings","parentInstance","code","DynamicClass","Function","propThis","methodThis","replaceThis","methodName","writable","propertyName","methodFactory","existingMethod","F","now","hasType","isAfter","RekordSettings","document","currentScript","script","getAttribute","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","removeListeners","failOnPendingChanges","hasPending","singularity","Initialized","Online","Offline","Cache","None","All","NoLive","Live","NoRest","Remote","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","Save","Key","Keys","Store","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setLive","liveSet","isOnline","navigator","onLine","online","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","body","ononline","onoffline","checkNetworkStatus","setRest","restSet","put","record","records","setStore","storeSet","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","saveAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","noReferences","allOptions","fetchOptions","getOptions","updateOptions","createOptions","saveOptions","removeOptions","queryOptions","prune","active","max","keepAlive","removeLocal","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","clearAll","contains","$isPending","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","addReference","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","saveReference","createModel","$status","$invalid","destroyModel","modelKey","pruneModel","RemoteAndRemove","removeReference","hasPruning","pruneModels","youngestAllowed","$remove","isTooYoung","$touched","youngest","minModel","eachWhere","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","delaySort","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$sync","removeUnrelated","sync","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","$touch","$exists","$autoRefresh","callRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$remote","$isSynced","$isSaving","$isSavedLocally","$isNew","$project","projectionInput","projection","project","$getChanges","alreadyDecoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","$resumeOptions","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","alias","aliasIndex","ALIAS_DELIMITER","word","words","tokens","types","resolvers","processWord","token","TOKEN_HANDLER","unshift","post","processToken","pre","TOKENS",".","?","|","#","(",")","[","]","{",":","}","@","=","sourceType","fieldIndex","filterName","Filters","resolveName","whereName","whereFrom","aggregateProperty","aggregateFunction","aggregateFrom","subEnd","pluckValueEnd","pluck","pluckObjectEnd","originalInput","start","getApplied","applied","each","applyDatabase","discard","discardDatabase","destroy","destroyDatabase","iterator","dbs","buildKey","join","otherFields","akey","bkey","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","insertAt","removed","shift","removing","element","removeAll","removeWhere","deleteCount","adding","startingValue","min","maxModel","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","valuesResolver","keysResolver","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","addNext","unsuccessful","clearListeners","listenFor","immediate","handleEvents","isSuccess","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","grabAlways","publish","always","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","autoCascade","autoOptions","preserve","clearKey","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","initial","grabInitial","grabModels","pending","setProperty","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","ignoreLoaded","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","saveParentCascade","saveParentOptions","belongsTo","cascadeRemoveOptions","postRemove","onKeyUpdate","relatedValue","modelFields","relatedFields","hasOne","saveCascade","child","preSave","populateInitial","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","cascadeSaveOptions","onChange","postSave","preRemove","handleModelAdded","handleLazyLoad","onRelated","existingModel","relatedClones","hasManyThrough","through","cascadeSaveRelated","cascadeSaveRelatedOptions","cascadeRemoveThroughOptions","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","existingThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","fileToValue","find","findOrCreate","created","grabAll","persist","searchAt","paging","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","extendArray","addMethod","addMethods","replaceMethod"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.5.1 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define('rekord', [], function() { // jshint ignore:line\n      return factory(root);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global);  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root);\n  }\n}(this, function(global, undefined)\n{\n\n  var win = typeof window !== 'undefined' ? window : global;   // jshint ignore:line\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.create( values );\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collectArray(1, 2, 3, 4);\n * Rekord.collectArray([1, 2, 3, 4]); // same as above\n * Rekord.collectArray();\n * Rekord.collectArray([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collectArray(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.native( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\n// Class.create( construct, methods )\n// Class.extend( parent, construct, override )\n// Class.prop( target, name, value )\n// Class.props( target, properties )\n// Class.method( construct, methodName, method )\n// Class.method( construct, methods )\n// Class.replace( construct, methodName, methodFactory(super) )\n\n// constructor.create( ... )\n// constructor.native( ... ) // for arrays\n// constructor.$constuctor\n// constructor.prototype.$super\n// constructor.$methods\n// constructor.$prop( name, value ) // add to prototype\n// constructor.$method( methodName, method ) // add to prototype\n// constructor.$replace( methodName, methodFactory(super) )\n\nvar Class =\n{\n\n  create: function( construct, methods )\n  {\n    Class.prop( construct, 'create', Class.factory( construct ) );\n    Class.build( construct, methods, noop );\n  },\n\n  extend: function( parent, construct, override )\n  {\n    var methods = collapse( override, parent.$methods );\n    var parentCopy = Class.copyConstructor( parent );\n\n    construct.prototype = new parentCopy();\n\n    var instanceFactory = Class.factory( construct );\n\n    if ( Class.isArray( parent ) )\n    {\n      var nativeArray = function()\n      {\n        var arr = [];\n        Class.props( arr, methods );\n        construct.apply( arr, arguments );\n        return arr;\n      };\n\n      Class.prop( construct, 'native', nativeArray );\n      Class.prop( construct, 'create', Settings.nativeArray ? nativeArray : instanceFactory );\n    }\n    else\n    {\n      Class.prop( construct, 'create', instanceFactory );\n    }\n\n    Class.build( construct, methods, parent );\n  },\n\n  dynamic: function(parent, parentInstance, className, code)\n  {\n    var DynamicClass = new Function('return function ' + className + code)(); // jshint ignore:line\n\n    DynamicClass.prototype = parentInstance;\n\n    Class.build( DynamicClass, {}, parent );\n\n    return DynamicClass;\n  },\n\n  build: function(construct, methods, parent)\n  {\n    Class.prop( construct, '$methods', methods );\n    Class.prop( construct, '$prop', Class.propThis );\n    Class.prop( construct, '$method', Class.methodThis );\n    Class.prop( construct, '$replace', Class.replaceThis );\n    Class.prop( construct.prototype, '$super', parent );\n    Class.prop( construct.prototype, 'constructor', construct );\n    Class.props( construct.prototype, methods );\n  },\n\n  isArray: function( construct )\n  {\n    return Array === construct || construct.prototype instanceof Array;\n  },\n\n  method: function( construct, methodName, method )\n  {\n    if (construct.$methods)\n    {\n      construct.$methods[ methodName ] = method;\n    }\n\n    Class.prop( construct.prototype, methodName, method );\n  },\n\n  methodThis: function( methodName, method )\n  {\n    Class.method( this, methodName, method );\n  },\n\n  methods: function( construct, methods )\n  {\n    for (var methodName in methods)\n    {\n      Class.method( construct, methodName, methods[ methodName ] );\n    }\n  },\n\n  prop: (function()\n  {\n    if (Object.defineProperty)\n    {\n      return function( target, property, value )\n      {\n        Object.defineProperty( target, property, {\n          configurable: true,\n          enumerable: false,\n          writable: true,\n          value: value\n        });\n      };\n    }\n    else\n    {\n      return function( target, property, value )\n      {\n        target[ property ] = value;\n      };\n    }\n  })(),\n\n  propThis: function( property, value )\n  {\n    Class.prop( this.prototype, property, value );\n  },\n\n  props: function( target, properties )\n  {\n    for (var propertyName in properties)\n    {\n      Class.prop( target, propertyName, properties[ propertyName ] );\n    }\n  },\n\n  replace: function( target, methodName, methodFactory )\n  {\n    var existingMethod = target.prototype[ methodName ] || target[ methodName ] || noop;\n\n    Class.method( target, methodName, methodFactory( existingMethod ) );\n  },\n\n  replaceThis: function( methodName, methodFactory )\n  {\n    Class.replace( this, methodName, methodFactory );\n  },\n\n  copyConstructor: function(construct)\n  {\n    function F()\n    {\n\n    }\n\n    F.prototype = construct.prototype;\n\n    return F;\n  },\n\n  factory: function(construct)\n  {\n    function F(args)\n    {\n      construct.apply( this, args );\n    }\n\n    F.prototype = construct.prototype;\n\n    return function()\n    {\n      return new F( arguments );\n    };\n  }\n\n};\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nvar now = Date.now || function()\n{\n  return new Date().getTime();\n};\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\nfunction addPlugin( callback, beforeCreation )\n{\n  if ( beforeCreation )\n  {\n    return Rekord.on( Rekord.Events.Options, callback ); // (options)\n  }\n  else\n  {\n    return Rekord.on( Rekord.Events.Plugins, callback ); // (model, db, options)\n  }\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  var eventFunction = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n\n  if (target.$methods)\n  {\n    Class.method( target, functionName, eventFunction );\n  }\n  else\n  {\n    Class.prop( target, functionName, eventFunction );\n  }\n}\n\nfunction EventNode(before, callback, context, type, group)\n{\n  this.next = before ? before : this;\n  this.prev = before ? before.prev : this;\n\n  if ( before )\n  {\n    before.prev.next = this;\n    before.prev = this;\n  }\n\n  this.callback = callback;\n  this.context = context;\n  this.type = type;\n  this.group = group || 0;\n}\n\nEventNode.Types =\n{\n  Persistent: 1,\n  Once: 2,\n  After: 4\n};\n\nClass.create( EventNode,\n{\n  remove: function()\n  {\n    var next = this.next;\n    var prev = this.prev;\n\n    if ( next !== this )\n    {\n      prev.next = next;\n      next.prev = prev;\n      this.next = this.prev = this;\n    }\n  },\n\n  hasType: function(type)\n  {\n    return (this.type & type) !== 0;\n  },\n\n  trigger: function(group, args, after)\n  {\n    var type = this.type;\n    var isAfter = this.hasType( EventNode.Types.After );\n\n    if ( this.group !== group )\n    {\n      if ( (after && isAfter) || !isAfter )\n      {\n        this.group = group;\n        this.callback.apply( this.context, args );\n      }\n\n      if ( this.hasType( EventNode.Types.Once ) )\n      {\n        this.remove();\n      }\n    }\n  }\n});\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, eventsInput, callback, context, type)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var callbackContext = context || $this;\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this.$$on;\n\n    if ( !listeners )\n    {\n      Class.prop( $this, '$$on', listeners = {} );\n    }\n\n    var nodes = [];\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = new EventNode();\n      }\n\n      nodes.push( new EventNode( eventListeners, callback, callbackContext, type, triggerId ) );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < nodes.length; i++)\n      {\n        nodes[ i ].remove();\n      }\n\n      nodes.length = 0;\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, events, callback, context, EventNode.Types.Persistent );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, events, callback, context, EventNode.Types.Once );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, events, callback, context, EventNode.Types.After );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var next, node = eventListeners.next;\n\n      while (node !== eventListeners)\n      {\n        next = node.next;\n\n        if (node.callback === callback)\n        {\n          node.remove();\n        }\n\n        node = next;\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n      var next, node = eventListeners.next;\n\n      while (node !== eventListeners)\n      {\n        next = node.next;\n        node.trigger( triggerGroup, args, false );\n        node = next;\n      }\n\n      node = eventListeners.next;\n\n      while (node !== eventListeners)\n      {\n        next = node.next;\n        node.trigger( triggerGroup, args, true );\n        node = next;\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        triggerListeners( this.$$on, events[ i ], args );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  var methods = null;\n\n  if ( secret )\n  {\n    methods = {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    };\n  }\n  else\n  {\n    methods = {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    };\n  }\n\n  if ( target.$methods )\n  {\n    Class.methods( target, methods );\n  }\n  else\n  {\n    Class.props( target, methods );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nvar Settings = global.RekordSettings || win.RekordSettings || {};\n\nif ( win.document && win.document.currentScript )\n{\n  var script = win.document.currentScript;\n\n  if (script.getAttribute('native-array') !== null)\n  {\n    Settings.nativeArray = true;\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var props = [];\n\n    for (var prop in properties)\n    {\n      props.push({\n        tester:   exprEqualsTester( properties[ prop ], equality ),\n        resolver: createPropertyResolver( prop )\n      });\n    }\n\n    return function whereEqualsObject(model)\n    {\n      for (var i = 0; i < props.length; i++)\n      {\n        var prop = props[ i ];\n\n        if ( !prop.tester( prop.resolver( model ) ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      var tester = exprEqualsTester( value, equality );\n\n      return function whereEqualsValue(model)\n      {\n        return tester( resolver( model ) );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nfunction expr(func)\n{\n  func.expression = true;\n\n  return func;\n}\n\nfunction exprEquals(value, test, equals)\n{\n  return isExpr( value ) ? value( test, equals ) : equals( value, test );\n}\n\nfunction exprEqualsTester(value, equals)\n{\n  if ( isExpr( value ) )\n  {\n    return function tester(test)\n    {\n      return value( test, equals );\n    };\n  }\n\n  return function tester(test)\n  {\n    return equals( value, test );\n  };\n}\n\nfunction isExpr(x)\n{\n  return isFunction( x ) && x.expression;\n}\n\nfunction not(x)\n{\n  if ( isExpr( x ) )\n  {\n    return expr(function notExpr(value, equals)\n    {\n      return !x( value, equals );\n    });\n  }\n\n  if ( isFunction( x ) )\n  {\n    return function notWhere(value)\n    {\n      return !x( value );\n    };\n  }\n\n  return expr(function notValue(value, equals)\n  {\n    return !equals( value, x );\n  });\n}\n\nfunction oneOf(input)\n{\n  var values = isArray( input ) ? input : AP.slice.call( arguments );\n\n  return expr(function oneOfValue(value, equals)\n  {\n    for (var i = 0; i < values.length; i++)\n    {\n      if (exprEquals( values[ i ], value, equals ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = Class.dynamic(\n    Model,\n    new Model( database ),\n    database.className,\n    '(props, remoteData) { this.$init( props, remoteData ) }'\n  );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\nRekord.export = function()\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    win[ className ] = classes[ className ];\n  }\n};\n\nRekord.clear = function(removeListeners)\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    classes[ className ].clear( removeListeners );\n  }\n};\n\nRekord.reset = function(failOnPendingChanges, removeListeners)\n{\n  var classes = Rekord.classes;\n\n  if ( failOnPendingChanges )\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      if ( db.hasPending() )\n      {\n        return Promise.reject( db );\n      }\n    }\n  }\n\n  return Promise.singularity(this, function()\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      db.reset( false, removeListeners );\n    }\n  });\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\n\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              options: options,\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              options: options,\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\n\nRekord.isOnline = function()\n{\n  return !win.navigator || win.navigator.onLine !== false;\n};\n\nRekord.online = Rekord.isOnline();\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (win.addEventListener)\n  {\n    win.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    win.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    win.document.body.ononline = Rekord.setOnline;\n    win.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = Rekord.isOnline();\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( options, success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, options, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, options, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, options, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model,options,  success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, options, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.modelsCached = this.models = ModelCollection.create( this );\n  this.allCached = this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n  this.context = null;\n  this.contextIndex = -1;\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      if ( isString( relationOptions ) )\n      {\n        relationOptions = {\n          model: relationOptions\n        };\n      }\n      else if ( !isObject( relationOptions ) )\n      {\n        relationOptions = {};\n      }\n\n      if ( !relationOptions.model && !relationOptions.discriminator )\n      {\n        relationOptions.model = name;\n      }\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n\n  // Projections\n  for (var projectionName in this.projections)\n  {\n    this.projections[ projectionName ] = Projection.parse( this, projectionName );\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData, data)\n{\n  var decodings = this.decodings;\n  var target = data || rawData;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      target[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n    else\n    {\n      target[ prop ] = rawData[ prop ];\n    }\n  }\n\n  return target;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  saveAlways:           [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  noReferences:         false,\n  encodings:            {},\n  decodings:            {},\n  projections:          {},\n  allOptions:           null,\n  fetchOptions:         null,\n  getOptions:           null,\n  updateOptions:        null,\n  createOptions:        null,\n  saveOptions:          null,\n  removeOptions:        null,\n  queryOptions:         null,\n  prune:                {active: false, max: 0, keepAlive: 0, removeLocal: false},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nClass.create( Database,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  clearAll: function()\n  {\n    var db = this;\n\n    if (db.context)\n    {\n      db.context.clear( this );\n    }\n    else\n    {\n      db.allCached = db.all = {};\n    }\n  },\n\n  clear: function(removeListeners)\n  {\n    var db = this;\n\n    db.clearAll();\n    db.models.clear();\n\n    if ( removeListeners )\n    {\n      db.off();\n    }\n\n    return db;\n  },\n\n  hasPending: function()\n  {\n    return this.models.contains(function(model)\n    {\n      return model.$isPending();\n    });\n  },\n\n  reset: function(failOnPendingChanges, removeListeners)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    if ( failOnPendingChanges && db.hasPending() )\n    {\n      promise.reject( db );\n    }\n    else\n    {\n      db.clear( removeListeners );\n\n      db.store.reset( [], [],\n        function()\n        {\n          promise.resolve( db );\n        },\n        function()\n        {\n          promise.reject( db );\n        }\n      );\n    }\n\n    return promise;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh( Cascade.All, db.fetchOptions );\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.clearAll();\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.addReference( models[ i ], keys[ i ] );\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.addReference( model, key );\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.saveReference( model, key );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    this.pruneModel( model, modelKey );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, this, model );\n  },\n\n  pruneModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    db.removeReference( key );\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n  },\n\n  removeReference: function(key)\n  {\n    delete this.all[ key ];\n  },\n\n  hasPruning: function()\n  {\n    return this.prune.max || this.prune.keepAlive;\n  },\n\n  pruneModels: function()\n  {\n    var db = this;\n    var prune = db.prune;\n    var models = db.models;\n\n    if (prune.max || prune.keepAlive)\n    {\n      if (prune.active)\n      {\n        var youngestAllowed = now() - prune.keepAlive;\n\n        var pruneModel = function(model)\n        {\n          if (prune.removeLocal)\n          {\n            model.$remove( Cascade.Local );\n          }\n          else\n          {\n            db.pruneModel( model );\n          }\n        };\n\n        var isTooYoung = function(model)\n        {\n          return model.$touched <= youngestAllowed;\n        };\n\n        while ( prune.max && models.length > prune.max )\n        {\n          var youngest = models.minModel('$touched');\n\n          if (youngest)\n          {\n            pruneModel( youngest );\n          }\n        }\n\n        if ( prune.keepAlive )\n        {\n          models.eachWhere( pruneModel, isTooYoung );\n        }\n      }\n    }\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.saveReference( model, key, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.addReference( model, key );\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( this.allOptions, success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model, key)\n  {\n    if (!this.noReferences)\n    {\n      this.all[ key || model.$key() ] = model;\n    }\n  },\n\n  saveReference: function(model, key, delaySort)\n  {\n    if ( !this.noReferences )\n    {\n      this.models.put( key || model.$key(), model, delaySort );\n    }\n  },\n\n  // Save the model\n  save: function(model, cascade, options)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade, options );\n  },\n\n  // Remove the model\n  remove: function(model, cascade, options)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade, options );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database );\n\naddEventFunction( Database, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  Class.prop( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nClass.create( Model,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    Class.props(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false,\n      $touched: now()\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        Class.prop( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.addReference( this, key );\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.addReference( this, key );\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $sync: function(prop, removeUnrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.sync( this, removeUnrelated );\n    }\n  },\n\n  $relate: function(prop, relate, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate, remoteData );\n    }\n  },\n\n  $unrelate: function(prop, unrelated, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated, remoteData );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade, options)\n  {\n    if ( isObject( setProperties ) )\n    {\n      options = cascade;\n      cascade = setValue;\n      setValue = undefined;\n    }\n    else if ( isNumber( setProperties ) )\n    {\n      options = setValue;\n      cascade = setProperties;\n      setValue = undefined;\n      setProperties = undefined;\n    }\n\n    if ( !isNumber( cascade ) )\n    {\n      cascade = this.$db.cascade;\n    }\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$touch();\n\n        this.$db.addReference( this );\n\n        if ( setProperties !== undefined )\n        {\n          this.$set( setProperties, setValue );\n        }\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade, options );\n\n        this.$db.pruneModels();\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade, options)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade, options );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade, options)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade, options );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade, options );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function(cascade, options)\n  {\n    var callRefresh = function()\n    {\n      this.$refresh( cascade, options );\n    };\n\n    Rekord.on( Rekord.Events.Online, callRefresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset, options)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved, this.$db.cascade, options );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade, options)\n  {\n    var operation = new OperationType( this, cascade, options );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      db.removeReference( oldKey );\n      db.addReference( this, newKey );\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $remote: function(encoded, overwrite)\n  {\n    this.$db.putRemoteData( encoded, this.$key(), this, overwrite );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $touch: function()\n  {\n    if ( this.$db.hasPruning() )\n    {\n      this.$touched = now();\n    }\n  },\n\n  $project: function(projectionInput)\n  {\n    var projection = Projection.parse( this.$db, projectionInput );\n\n    return projection.project( this );\n  },\n\n  $getChanges: function(alreadyDecoded)\n  {\n    var db = this.$db;\n    var saved = db.decode( this.$saved, {} );\n    var encoded = alreadyDecoded || this;\n    var fields = db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var db = this.$db;\n    var ignore = db.ignoredFields;\n    var saved = db.decode( this.$saved, {} );\n    var fields = db.saveFields;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var prop = fields[ i ];\n      var currentValue = this[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade, options)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    Class.props(this,\n    {\n      $resumeCascade: cascade,\n      $resumeOptions: options\n    });\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade, this.$resumeOptions );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade, this.$resumeOptions );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model, true );\n\naddEventFunction( Model, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nClass.create( Map,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nClass.create( Dependents,\n{\n\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n});\n\n\n// field\n// relation.field\n// relations[pluckValue]\n// relations?savedWhere[pluckValue]\n// relations{pluckKey: pluckValue}\n// relation(subprojection)\n// relations(subprojection)\n// relations?savedWhere(subprojection)\n// expression|filter\n// expression?savedWhere\n// alias:expression\n// expression#resolve\n// relations@sum=field\n\nfunction Projection(database, input)\n{\n  this.database = database;\n  this.input = input;\n  this.projections = {};\n\n  for (var i = 0; i < input.length; i++)\n  {\n    this.addProjection( input[ i ] );\n  }\n}\n\nClass.create( Projection,\n{\n\n  addProjection: function(input)\n  {\n    var projection = this;\n    var alias = input;\n    var aliasIndex = input.indexOf( Projection.ALIAS_DELIMITER );\n\n    if (aliasIndex > 0)\n    {\n      alias = input.substring( 0, aliasIndex );\n      input = input.substring( aliasIndex + 1 );\n    }\n\n    var word = '';\n    var words = [];\n    var tokens = ['property'];\n    var types = [this.database];\n    var i = 0;\n    var resolvers = [];\n\n    var processWord = function(word)\n    {\n      if (!word)\n      {\n        return;\n      }\n\n      var token = tokens[0];\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      words.unshift( word );\n\n      if (handler && handler.post)\n      {\n        resolvers.push( handler.post( words, tokens, types, projection ) );\n      }\n    };\n\n    var processToken = function(token)\n    {\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      tokens.unshift( token );\n\n      if (handler && handler.pre)\n      {\n        resolvers.push( handler.pre( words, tokens, types, projection ) );\n      }\n    };\n\n    for (var i = 0; i < input.length; i++)\n    {\n      var c = input.charAt( i );\n      var token = Projection.TOKENS[ c ];\n\n      if (token)\n      {\n        processWord( word );\n        processToken( token );\n\n        word = '';\n      }\n      else\n      {\n        word += c;\n      }\n    }\n\n    processWord( word );\n\n    var resolver = function(value) {\n      return value;\n    };\n\n    for (var i = resolvers.length - 1; i >= 0; i--) {\n      resolver = resolvers[ i ]( resolver );\n    }\n\n    this.projections[ alias ] = resolver;\n  },\n\n  project: function(model)\n  {\n    var out = {};\n\n    for (var alias in this.projections)\n    {\n      out[ alias ] = this.projections[ alias ]( model );\n    }\n\n    return out;\n  }\n\n});\n\nProjection.TOKENS =\n{\n  '.': 'property',\n  '?': 'where',\n  '|': 'filter',\n  '#': 'resolve',\n  '(': 'subStart',\n  ')': 'subEnd',\n  '[': 'pluckValueStart',\n  ']': 'pluckValueEnd',\n  '{': 'pluckObjectStart',\n  ':': 'pluckObjectDelimiter',\n  '}': 'pluckObjectEnd',\n  '@': 'aggregateStart',\n  '=': 'aggregateProperty'\n};\n\nProjection.TOKEN_HANDLER =\n{\n\n  property:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var propertyName = words[0];\n      var sourceType = types[0];\n\n      if (!(sourceType instanceof Database))\n      {\n        throw ('The property ' + propertyName + ' can only be taken from a Model');\n      }\n\n      var relation = sourceType.relations[ propertyName ];\n\n      if (relation)\n      {\n        if (relation instanceof RelationSingle)\n        {\n          types.unshift( relation.model.Database );\n        }\n        else\n        {\n          types.unshift( relation );\n        }\n      }\n\n      var fieldIndex = indexOf( sourceType.fields, propertyName );\n\n      if (fieldIndex === false && !relation)\n      {\n        throw ('The property ' + propertyName + ' does not exist as a field or relation on the Model ' + sourceType.name );\n      }\n\n      return function(resolver)\n      {\n        return function(model)\n        {\n          if ( !isValue( model ) )\n          {\n            return null;\n          }\n\n          return resolver( model.$get( propertyName ) );\n        };\n      };\n    }\n  },\n\n  filter:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var filterName = words[0];\n      var filter = Rekord.Filters[ filterName ];\n\n      if (!filter)\n      {\n        throw (filterName + ' is not a valid filter function');\n      }\n\n      return function(resolver)\n      {\n        return function(value)\n        {\n          if ( !isValue( value ) )\n          {\n            return null;\n          }\n\n          return resolver( filter( value ) );\n        };\n      };\n    }\n  },\n\n  resolve:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var resolveName = words[0];\n\n      return function(resolver)\n      {\n        return function(source)\n        {\n          if ( !isValue( source ) )\n          {\n            return null;\n          }\n\n          var value = source[ resolveName ];\n\n          if ( isFunction( value ) )\n          {\n            value = value.apply( source );\n          }\n\n          return resolver( value );\n        };\n      };\n    }\n  },\n\n  where:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var whereName = words[0];\n      var whereFrom = types[0];\n      var where = Rekord.Wheres[ whereName ];\n\n      if (!where)\n      {\n        throw (whereName + ' is not a valid where expression');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw (whereName + ' where expressions can only be used on relations');\n      }\n\n      return function(resolver)\n      {\n        return function(relation)\n        {\n          if ( !isValue( relation ) )\n          {\n            return null;\n          }\n\n          return resolver( relation.where( where ) );\n        };\n      };\n    }\n  },\n\n  aggregateProperty:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var property = words[0];\n      var aggregateFunction = words[1];\n      var aggregateFrom = types[0];\n\n      if (tokens[1] !== 'aggregateStart')\n      {\n        throw ('Aggregate function syntax error, a = must follow a @');\n      }\n\n      if (!(aggregateFrom instanceof Relation))\n      {\n        throw ('Aggregate functions like ' + aggregateFunction + ' from ' + aggregateFrom + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relation)\n        {\n          if ( !isValue( relation ) )\n          {\n            return null;\n          }\n\n          return resolver( relation[ aggregateFunction ]( property ) );\n        };\n      };\n    }\n  },\n\n  subEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var projectionName = words[0];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'subStart')\n      {\n        throw ('Sub projection syntax error, an ending ) requires a starting (');\n      }\n\n      if (!(whereFrom instanceof Relation))\n      {\n        throw ('Sub projections like ' + projectionName + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      if (!whereFrom.model.Database.projections[ projectionName ])\n      {\n        throw ('The projection ' + projectionName + ' does not exist on ' + whereFrom.model.Database.name);\n      }\n\n      if (whereFrom instanceof RelationSingle)\n      {\n        return function(resolver)\n        {\n          return function (relation)\n          {\n            if ( !isValue( relation ) )\n            {\n              return null;\n            }\n\n            return resolver( relation.$project( projectionName ) );\n          };\n        };\n      }\n      else\n      {\n        return function(resolver)\n        {\n          return function(relations)\n          {\n            if ( !isValue( relations ) )\n            {\n              return null;\n            }\n\n            return resolver( relations.project( projectionName ) );\n          };\n        };\n      }\n    }\n  },\n\n  pluckValueEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var properties = words[0];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'pluckValueStart')\n      {\n        throw ('Pluck value syntax error, an ending ] requires a starting [');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relations)\n        {\n          if ( !isValue( relations ) )\n          {\n            return null;\n          }\n\n          return resolver( relations.pluck( properties ) );\n        };\n      };\n    }\n  },\n\n  pluckObjectEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var properties = words[0];\n      var keys = words[1];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'pluckObjectDelimiter' || tokens[2] !== 'pluckObjectStart')\n      {\n        throw ('Pluck object syntax error, must be {key: value}');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relations)\n        {\n          if ( !isValue( relations ) )\n          {\n            return null;\n          }\n\n          return resolver( relations.pluck( properties, keys ) );\n        };\n      };\n    }\n  }\n};\n\nProjection.ALIAS_DELIMITER = ':';\n\nProjection.parse = function(database, input)\n{\n  var originalInput = input;\n\n  if ( isString( input ) )\n  {\n    input = database.projections[ input ];\n  }\n\n  if ( isArray( input ) )\n  {\n    input = new Projection( database, input );\n  }\n\n  if (!(input instanceof Projection))\n  {\n    throw (originalInput + ' is not a valid projection');\n  }\n\n  return input;\n};\n\n\nfunction Context(models)\n{\n  this.databases = [];\n  this.alls = [];\n  this.models = [];\n\n  if ( isEmpty( models ) )\n  {\n    for (var name in Rekord.classes)\n    {\n      this.add( name );\n    }\n  }\n  else if ( isArray( models ) )\n  {\n    for (var i = 0; i < models.length; i++)\n    {\n      this.add( models[ i ] );\n    }\n  }\n}\n\nContext.start = function(models)\n{\n  var context = new Context( models );\n\n  context.apply();\n\n  return context;\n};\n\nClass.create( Context,\n{\n\n  add: function(type)\n  {\n    if ( isString( type ) )\n    {\n      type = Rekord.classes[ type ];\n    }\n\n    if ( isRekord( type ) )\n    {\n      type = type.Database;\n    }\n\n    if ( type instanceof Database )\n    {\n      this.databases.push( type );\n      this.alls.push( {} );\n      this.models.push( new ModelCollection( type ) );\n    }\n  },\n\n  getApplied: function()\n  {\n    var applied = 0;\n\n    this.each(function(db)\n    {\n      if (db.context === this)\n      {\n        applied++;\n      }\n    });\n\n    return applied / this.databases.length;\n  },\n\n  apply: function()\n  {\n    this.each( this.applyDatabase );\n  },\n\n  applyDatabase: function(db, all, models, i)\n  {\n    db.all = all;\n    db.models = models;\n    db.context = this;\n    db.contextIndex = i;\n  },\n\n  discard: function()\n  {\n    this.each( this.discardDatabase );\n  },\n\n  discardDatabase: function(db)\n  {\n    if (db.context === this)\n    {\n      db.all = db.allCached;\n      db.models = db.modelsCached;\n      db.context = null;\n      db.contextIndex = -1;\n    }\n  },\n\n  destroy: function()\n  {\n    this.each( this.destroyDatabase );\n\n    this.databases.length = 0;\n    this.alls.length = 0;\n    this.models.length = 0;\n  },\n\n  destroyDatabase: function(db, alls, models, i)\n  {\n    this.discardDatabase( db );\n\n    this.databases[ i ] = null;\n    this.alls[ i ] = null;\n    this.models[ i ].clear();\n    this.models[ i ] = null;\n  },\n\n  clear: function(db)\n  {\n    this.alls[ db.contextIndex ] = {};\n  },\n\n  each: function(iterator)\n  {\n    var dbs = this.databases;\n    var alls = this.alls;\n    var models = this.models;\n\n    for (var i = 0; i < dbs.length; i++)\n    {\n      iterator.call( this, dbs[ i ], alls[ i ], models[ i ], i );\n    }\n  }\n\n});\n\n\nfunction KeyHandler()\n{\n\n}\n\nClass.create( KeyHandler,\n{\n\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n\n});\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nClass.extend( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredCollection.create( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return this.constructor.create( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return this.constructor.create();\n  }\n\n});\n\naddEventful( Collection );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    Class.props(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      Class.prop( this, 'base', base );\n\n      this.connect();\n    }\n\n    Class.prop( this, 'filter', filter );\n\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nClass.extend( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page );\n\naddEventFunction( Page, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nClass.extend( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    Class.props(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredModelCollection.create( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort, cascade, options)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove( cascade, options );\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade, options)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save( cascade, options );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade, options)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade, options );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals, cascade, options)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh( cascade, options );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade, options)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade, options );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  // TODO\n  project: function(projectionInput, out)\n  {\n    var target = out || [];\n    var projection = Projection.parse( this.database, projectionInput );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      target.push( projection.project( this[ i ] ) );\n    }\n\n    return target;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return ModelCollection.create( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return ModelCollection.create( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    Class.props(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  Class.props(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nClass.extend( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input, remoteData)\n  {\n    this.relator.set( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input, remoteData)\n  {\n    this.relator.relate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input, remoteData)\n  {\n    this.relator.unrelate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Syncrhonizes the related models in this collection by re-evaluating all\n   * models for a relationship.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {boolean} [removeUnrelated=false] -\n   *    Whether to remove models that are no longer related. The $remove\n   *    function is not called on these models.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  sync: function(removeUnrelated)\n  {\n    this.relator.sync( this.model, removeUnrelated );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  Class.props( collection,\n  {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  Class.props( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nClass.create( Search,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    Class.prop( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = ModelCollection.create( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n    var options = this.$options || this.$db.queryOptions;\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, options, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nClass.extend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n  this.nexts = [];\n\n  Class.prop( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.bind( race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.then = function()\n{\n  var p = new Promise();\n  p.resolve();\n  return p.then.apply( p, arguments );\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nClass.create( Promise,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  bind: function(promise)\n  {\n    this.success( promise.resolve, promise );\n    this.failure( promise.reject, promise );\n    this.offline( promise.noline, promise );\n    this.canceled( promise.cancel, promise );\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    // The promise which can be resolved if any of the callbacks return\n    // a Promise which is resolved.\n    var next = new Promise();\n\n    this.success( success, context, persistent, next );\n    this.failure( failure, context, persistent, next );\n    this.offline( offline, context, persistent, next );\n    this.canceled( canceled, context, persistent, next );\n    this.addNext( next );\n    \n    return next;\n  },\n\n  addNext: function(next)\n  {\n    var nexts = this.nexts;\n\n    if (nexts.length === 0)\n    {\n      // If this promise is not successful, let all chained promises know.\n      this.unsuccessful(function()\n      {\n        for (var i = 0; i < nexts.length; i++)\n        {\n          nexts[ i ].finish( this.status, this.status, arguments );\n        }\n      });\n    }\n\n    nexts.push( next );\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent, next)\n  {\n    if ( isFunction( callback ) )\n    {\n      var handleEvents = function()\n      {\n        var result = callback.apply( context || this, this.results );\n\n        if ( result instanceof Promise &&\n             next instanceof Promise &&\n             next.isPending() )\n        {\n          result.bind( next );\n        }\n      };\n\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, handleEvents, this );\n        }\n        else\n        {\n          this.once( events, handleEvents, this );\n        }\n      }\n      else if ( immediate )\n      {\n        handleEvents.apply( this );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent, next)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent, next );\n  },\n\n  unsuccessful: function(callback, context, persistent, next)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent, next );\n  },\n\n  failure: function(callback, context, persistent, next)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent, next );\n  },\n\n  catch: function(callback, context, persistent, next)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent, next );\n  },\n\n  offline: function(callback, context, persistent, next)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent, next );\n  },\n\n  canceled: function(callback, context, persistent, next)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent, next );\n  },\n\n  complete: function(callback, context, persistent, next)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent, next );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise );\n\n\nfunction Operation()\n{\n}\n\nClass.create( Operation,\n{\n\n  reset: function(model, cascade, options)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.options = options;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade, this.options );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade, this.options );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.options || db.getOptions, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade, this.options );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade, this.options );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.options || this.removeOptions, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    db.removeReference( key );\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : this.grabAlways( db.saveAlways, changes, remote );\n    var publish = db.fullPublish ? remote : this.grabAlways( db.publishAlways, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  grabAlways: function(always, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( always.length )\n    {\n      for (var i = 0; i < always.length; i++)\n      {\n        var prop = always[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.options || db.updateOptions || db.saveOptions, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.options || db.createOptions || db.saveOptions, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade, this.options );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.create( Relation,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      Class.props( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return RelationCollection.create( this.model.Database, model, this );\n  },\n\n  createCollection: function(initial)\n  {\n    return ModelCollection.create( this.model.Database, initial );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade || this.autoCascade, this.autoOptions );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save( this.autoCascade, this.autoOptions );\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\nClass.extend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear && !remoteData )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false || ignoreLoaded )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\nClass.extend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save( this.saveParentCascade, this.saveParentOptions );\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending || ignoreLoaded )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  cascadeRemoveOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade, this.cascadeRemoveOptions );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  saveCascade:          Cascade.All,\n  saveOptions:          null,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  cascadeRemoveOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.populateInitial( initialValue, relation, model );\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  populateInitial: function(initialValue, relation, model)\n  {\n    if ( isObject( initialValue ) && relation.child )\n    {\n      var src = toArray( this.local );\n      var dst = toArray( this.model.Database.key );\n\n      for (var k = 0; k < src.length; k++)\n      {\n        initialValue[ dst[ k ] ] = model[ src[ k ] ];\n      }\n    }\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.populateInitial( relatedValue, relation, model );\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save( this.saveCascade, this.saveOptions );\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade, this.cascadeRemoveOptions );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  saveParentCascade:    Cascade.All,\n  saveParentOptions:    null,\n  cascadeRemove:        Cascade.Local,\n  cascadeRemoveOptions: null,\n  cascadeSave:          Cascade.None,\n  cascadeSaveOptions:   null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.related;\n      var remoteData = true;\n      var dontClear = true;\n      var relator = this;\n\n      var onRelated = function(related)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( related );\n\n          existing.each(function(existingModel)\n          {\n            if ( !given.has( existingModel.$key() ) )\n            {\n              relator.removeModel( relation, existingModel, remoteData, dontClear );\n            }\n          });\n        }\n      };\n\n      this.ready( this.handleLazyLoad( relation, onRelated ) );\n    }\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave, this.cascadeSaveOptions );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove, this.cascadeRemoveOptions );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, related );\n      }\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove, this.cascadeRemoveOptions );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveOptions:   null,\n  cascadeSaveRelated:   Cascade.None,\n  cascadeSaveRelatedOptions: null,\n  saveParentCascade:    Cascade.All,\n  saveParentOptions:    null,\n  cascadeRemoveThroughOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, relator, model, this, relation );\n\n        relator.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var throughDatabase = this.through.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.throughs.values;\n      var remoteData = true;\n      var relator = this;\n\n      var onRelated = function(throughs)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( throughs );\n\n          for (var i = 0; i < existing.length; i++)\n          {\n            var existingThrough = existing[ i ];\n\n            if ( !given.has( existingThrough.$key() ) )\n            {\n              relator.removeModelFromThrough( relation, existingThrough, remoteData );\n            }\n          }\n        }\n      };\n\n      throughDatabase.ready( this.handleLazyLoad( relation, onRelated ), this );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave, this.cascadeSaveOptions );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated, this.cascadeSaveRelatedOptions );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove, this.cascadeRemoveThroughOptions );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, throughs );\n      }\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related && ( !this.where || this.where( related ) ) )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave, this.cascadeSaveOptions );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through, undefined, undefined, remoteData ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey, remoteData );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All, this.cascadeRemoveThroughOptions );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey, remoteData)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  where:                false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nClass.extend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, true );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nClass.extend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nClass.extend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( RelationCollection.create( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( ModelCollection.create(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( this.autoCascade, this.autoOptions );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save( this.autoCascade, this.autoOptions );\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    Class.props( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nClass.create( Shard,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(options, success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, options, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, options, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n  \n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.array = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.native( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model at the given index.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.at( 0 ); // t0\n   * ```\n   *\n   * @method at\n   * @memberof Rekord.Model\n   * @param {Number} index -\n   *    The index of the model to return.\n   * @return {Rekord.Model} -\n   *    The reference to the model at the given index.\n   */\n  model.at = function(index)\n  {\n    return db.models[ index ];\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return ModelCollection.create( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  \n  model.clear = function(removeListeners)\n  {\n    return db.clear( removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.create( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade, options )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade, options );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      Class.replace( model, '$init', function($init)\n      {\n        return function()\n        {\n          $init.apply( this, arguments );\n\n          applyEventListeners( this, modelEvents );\n        };\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, options, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh( Cascade.Rest, options );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return win.File && win.FileReader && win.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof win.File )\n  {\n    return input;\n  }\n  else if ( input instanceof win.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof win.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in win.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new win.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\naddPlugin(function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, options, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade, options );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade, options );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, options, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, options, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\naddPlugin( function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  Class.method( Map, 'put', mapKeyChangePut );\n  Class.method( Map, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  Class.method( Map, 'put', Map_put );\n  Class.method( Map, 'remove', Map_remove );\n}\n\naddPlugin(function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    Class.methods( model, methods );\n  }\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, options, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, options, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade, options );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.projection = function(projectionInput)\n  {\n    return Projection.parse( db, projectionInput );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.reset = function(failOnPendingChanges, removeListeners)\n  {\n    return db.reset( failOnPendingChanges, removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.searchAt = function(index, url, paging, options, props, success, failure)\n  {\n    var page = {page_index: index, page_size: 1};\n\n    var search = paging ?\n      new SearchPaged( db, url, collapse( options, page ), props ) :\n      new Search( db, url, options, props );\n\n    var promise = new Promise();\n\n    promise.success( success );\n    promise.failure( failure );\n\n    search.$run().then(\n      function onSuccess(search, response, results) {\n        promise.resolve( results[ paging ? 0 : index ] );\n      },\n      function onFailure() {\n        promise.reject();\n      },\n      function onOffline() {\n        promise.noline();\n      }\n    );\n\n    return promise;\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n  \n}, true );\n\naddPlugin(function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    Class.replace( model, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\naddPlugin(function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n  Rekord.Context = Context;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Projections */\n  Rekord.Filters = {};\n  Rekord.Projection = Projection;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n  Rekord.addPlugin = addPlugin;\n  Rekord.now = now;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.array = collectArray;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.Settings = Settings;\n  Rekord.Class = Class;\n  Rekord.extend = Class.extend;\n  Rekord.extendArray = Class.extend;\n  Rekord.addMethod = Rekord.setProperty = Class.prop;\n  Rekord.addMethods = Rekord.setProperties = Class.props;\n  Rekord.replaceMethod = Class.replace;\n  Rekord.copyConstructor = Class.copyConstructor;\n  Rekord.factory = Class.factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n  Rekord.expr = expr;\n  Rekord.not = not;\n  Rekord.oneOf = oneOf;\n  Rekord.isExpr = isExpr;\n  Rekord.exprEqualsTester = exprEqualsTester;\n  Rekord.exprEquals = exprEquals;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}