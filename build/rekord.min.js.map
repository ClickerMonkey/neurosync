{"version":3,"sources":["rekord.min.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","setProperties","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","setProperty","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Rekord","Events","Error","$on","$once","$after","$off","$trigger","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","value","promise","get","isComplete","results","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","writable","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","$invalid","destroyModel","modelKey","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setValue","$hasKey","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","add","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","buildKey","join","otherFields","akey","bkey","unshift","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","callbackContext","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","clearKey","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","relatedClones","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","addMethod","addMethods"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.6 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n(function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  setProperties( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar setProperty = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction setProperties(target, methods)\n{\n  for (var methodName in methods)\n  {\n    setProperty( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  setProperty( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  setProperty( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      setProperty( $this, property, listeners = {} );\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    setProperties(target, {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    });\n  }\n  else\n  {\n    setProperties(target, {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    });\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nsetProperties( Database.prototype,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  setProperty( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nsetProperties( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    setProperties(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        setProperty( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.all[ key ] = this;\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      delete db.all[ oldKey ];\n      db.all[ newKey ] = this;\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nsetProperties( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nDependents.prototype =\n{\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n};\n\n\nfunction KeyHandler()\n{\n\n}\n\nKeyHandler.prototype =\n{\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n};\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    setProperties(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      setProperty( this, 'base', base );\n\n      this.connect();\n    }\n\n    setProperty( this, 'filter', filter );\n    \n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    setProperties(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    setProperties(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  setProperties(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  setProperties(collection, {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  setProperties( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nsetProperties( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    setProperty( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n\n  setProperty( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nsetProperties( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\nsetProperties( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nsetProperties( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      setProperties( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nextend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nextend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    setProperties( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nsetProperties( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      setProperty( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  setProperty( Map.prototype, 'put', mapKeyChangePut );\n  setProperty( Map.prototype, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  setProperty( Map.prototype, 'put', Map_put );\n  setProperty( Map.prototype, 'remove', Map_remove );\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    setProperties( model.prototype, methods );\n  }\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = Rekord.setProperty = setProperty;\n  Rekord.addMethods = Rekord.setProperties = setProperties;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}