{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","batch.js","Gate.js","Database.js","Model.js","Map.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Promise.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","dynamic.js","events.js","files.js","timestamps.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","findOrCreate.js","get.js","grab.js","grabAll.js","methods.js","persist.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","ar","br","test","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","parseDate","utc","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","splits","ae","joined","saveWhere","Wheres","createWhere","where","promise","get","isComplete","results","Events","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict",409,"NotFound",404,410,0,"source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","setRest","restSet","put","record","records","succcess","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","removeKey","buildKey","buildKeys","relationName","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","$getDefaults","$append","$url","$results","$promise","$run","$encode","$handleSuccess","$handleFailure","isPending","offline","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","isDependent","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br) return b.test(a);\n  if (bt === 'string' && ar) return a.test(b);\n\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar) {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc ) x += ' UTC';\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var splits = x.split( delimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  return Rekord.promises[ name ] = Rekord.promises[ name ] || new Promise( null, false );\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n};\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n","\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        (function(name, modelHandler)\n        {\n          Rekord.on( Rekord.Events.Plugins, function(model, database)\n          {\n            if ( database.name === name )\n            {\n              modelHandler( model );\n            }\n          });\n\n        })( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (e)\n  {\n    throw e;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  load:                 Load.None,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        this.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      this.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      for (var relationName in this.relations)\n      {\n        if ( relationName in input )\n        {\n          this.relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    this.buildKeyFromRelations( model );\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save();\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props)\n  {\n    function saveIt(model)\n    {\n      model.$save( props );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( isObject( props ) )\n    {\n      this.$set( props );\n    }\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents[ related.$uid() ] = related;\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var foreign = this.model.Database.key;\n\n      if ( isArray( key ) )\n      {\n        for (var i = 0; i < key.length; i++)\n        {\n          var field = key[ i ];\n\n          if ( !isValue( input[ field ] ) && isValue( related[ foreign[ i ] ] ) )\n          {\n            input[ field ] = related[ foreign[ i ] ];\n          }\n        }\n      }\n      else\n      {\n        if ( !isValue( input[ key ] ) && isValue( related[ foreign ] ) )\n        {\n          input[ key ] = related[ foreign ];\n        }\n      }\n    }\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeFormat = options.timestampFormat || Database.Defaults.timestampFormat;\n  var timeType = options.timestampType || Database.Defaults.timestampType;\n  var timeUTC = options.timestampUTC || Database.Defaults.timestampUTC;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTimestamp()\n  {\n    return convertDate( new Date(), timeType );\n  }\n\n  function encode(x)\n  {\n    var encoded = convertDate( x, timeFormat );\n\n    return encoded || x;\n  }\n\n  function decode(x)\n  {\n    var decoded = convertDate( x, timeType, timeUTC );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDatabase.Defaults.timestampFormat = Timestamp.Millis;\nDatabase.Defaults.timestampType = Timestamp.Date;\nDatabase.Defaults.timestampUTC = false;\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, succcess, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save();\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save();\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}