{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","Gate.js","Database.js","Model.js","Map.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Promise.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","dynamic.js","events.js","files.js","util.js","rules/between.js","rules/collection.js","rules/dates.js","rules/field_list.js","rules/fields.js","rules/foreign.js","rules/if.js","rules/list.js","rules/regex.js","rules/sizes.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","validation.js","expressions/date.js","expressions/field.js","expressions/relative.js","expressions/today.js","expressions/tomorrow.js","expressions/yesterday.js","rules/accepted.js","rules/required.js","rules/types.js","transforms/ceil.js","transforms/floor.js","transforms/trim.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","split","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isValue","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","splits","ae","joined","saveWhere","Wheres","createWhere","where","promise","get","isComplete","results","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","rest","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","url","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","tryParseFloat","tryParseInt","tryParseDate","startOfDay","setHours","endOfDay","ruleGenerator","ruleName","defaultMessage","isInvalid","Validation","Rules","params","getAlias","message","checkNoParams","messageTemplate","determineMessage","setMessage","setValue","newValue","generateMessage","joinFriendly","lastSeparator","itemSeparator","last","pop","mapFromArray","alias","extra","$field","$alias","$value","rangeRuleGenerator","defaultMessages","range","start","end","string","number","object","$start","$end","size","typeMessage","$size","collectionRuleGenerator","comma","matchField","matchValue","otherField","$matchField","$matchAlias","$matchValue","dateRuleGenerator","dateExpression","parseExpression","$date","date","fieldListRuleGenerator","parts","shift","matchValues","list","$params","$list","fieldsRuleGenerator","fieldNames","fieldAliases","$fields","$fieldAliases","foreignRuleGenerator","modelName","fieldName","modelClass","$class","subRuleGenerator","colon","otherRules","validators","parseRules","invalids","setInvalid","Stop","listRuleGenerator","regexRuleGenerator","regex","sizeRuleGenerator","$number","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","query","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","loadRelations","loadRemote","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","ready","persistent","hasData","saving","grabModel","checkModel","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","putRemoteData","instantiate","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","records","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","lastKey","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","add","intersect","complement","delaySort","insertAt","removed","removing","element","removeAll","removeWhere","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","$getDefaults","$append","$url","$results","$promise","$run","$encode","$handleSuccess","$handleFailure","isPending","offline","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","notLive","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","grabAll","searchPaged","currentTime","currentDate","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","aliases","validation","rules","messages","required","validations","PreValidate","$valid","$validations","$validationMessages","chain","fieldValid","ValidatePass","ValidateFail","$validate","Expression","Expressions","Delimiter","Escape","RuleSeparator","rule","parseRule","ruleMessage","customValidator","ruleParams","validatorFactory","parsers","parser","expressionFunction","RELATIVE_REGEX","RELATIVE_UNITS","ms","millisecond","milliseconds","s","seconds","mins","minute","minutes","hr","hour","hours","day","days","wk","week","weeks","month","months","yr","year","years","relative","exec","amount","unit","unitScale","setTime","getter","today","tomorrow","setDate","getDate","yesterday","accepted","acceptable","valueString","toLowerCase","1","yes","y","true","m","validate","messageOption","invalid","confirmed","different","invalidCount","totalCount","numeric","yesno","false","no","0","trim","String"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var splits = x.split( delimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  return Rekord.promises[ name ] = Rekord.promises[ name ] || new Promise( null, false );\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n};\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.complete( callback, context || db );\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    }\n\n    db.rest.all( onModels, onLoadError );\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n        i--;\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    return this.eachWhere( cancelIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    return this.eachWhere( refreshIt, properties, value, equals );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( isObject( props ) )\n    {\n      this.$set( props );\n    }\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    this.$cancel();\n    this.$promise = new Promise();\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = status === 0;\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 410 || status === 404 )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","function tryParseFloat(x)\n{\n  var parsed = parseFloat( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction tryParseInt(x)\n{\n  var parsed = parseInt( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction tryParseDate(x)\n{\n  if ( isDate( x ) )\n  {\n    x = x.getTime();\n  }\n  else if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      var parsed = Date.parse( x );\n\n      if ( !isNaN( parsed ) )\n      {\n        x = parsed;\n      }\n    }\n    else\n    {\n      var parsed = new Date( x );\n\n      if ( !isNaN( parsed.getTime() ) )\n      {\n        x = parsed;\n      }\n    }\n  }\n\n  return x;\n}\n\nfunction startOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 0, 0, 0, 0 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000);\n  }\n\n  return d;\n}\n\nfunction endOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 23, 59, 59, 999 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000) + 86400000 - 1;\n  }\n\n  return d;\n}\n\nfunction ruleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nfunction determineMessage(ruleName, message)\n{\n  return message || Validation.Rules[ ruleName ].message;\n}\n\nfunction joinFriendly(arr, lastSeparator, itemSeparator, getAlias)\n{\n  var copy = arr.slice();\n\n  if ( getAlias )\n  {\n    for (var i = 0; i < copy.length; i++)\n    {\n      copy[ i ] = getAlias( copy[ i ] );\n    }\n  }\n\n  var last = copy.pop();\n  var lastSeparator = lastSeparator || 'and';\n  var itemSeparator = itemSeparator || ', ';\n\n  switch (copy.length) {\n    case 0:\n      return last;\n    case 1:\n      return copy[ 0 ] + ' ' + lastSeparator + ' ' + last;\n    default:\n      return copy.join( itemSeparator ) + itemSeparator + lastSeparator + ' ' + last;\n  }\n}\n\nfunction mapFromArray(arr, value)\n{\n  var map = {};\n\n  for (var i = 0; i < arr.length; i++)\n  {\n    map[ arr[ i ] ] = value;\n  }\n\n  return map;\n}\n\nfunction checkNoParams(ruleName, field, params)\n{\n  if ( params )\n  {\n    throw 'the rule ' + ruleName + ' for field ' + field + ' has no arguments';\n  }\n}\n\nfunction generateMessage(field, alias, value, model, message, extra)\n{\n  if ( isFunction( message ) )\n  {\n    message = message( field, alias, value, model, extra );\n  }\n\n  var base = {};\n  base.$field = field;\n  base.$alias = alias;\n  base.$value = value;\n\n  transfer( model, base );\n\n  if ( isObject( extra ) )\n  {\n    transfer( extra, base );\n  }\n\n  return format( message, base );\n}\n","// between:3,10\nrangeRuleGenerator('between', {\n    'string': '{$alias} must have between {$start} to {$end} characters.',\n    'number': '{$alias} must be between {$start} and {$end}.',\n    'object': '{$alias} must have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value < start || value > end;\n  }\n);\n\n// not_between\nrangeRuleGenerator('not_between', {\n    'string': '{$alias} must not have between {$start} to {$end} characters.',\n    'number': '{$alias} must not be between {$start} and {$end}.',\n    'object': '{$alias} must not have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value >= start && value <= end;\n  }\n);\n\nfunction rangeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a range argument';\n    }\n\n    var range = split( params, /(\\s*,\\s*)/, '\\\\' );\n    var start = parseFloat( range[0] );\n    var end = parseFloat( range[1] );\n\n    if ( isNaN( start ) || isNaN( end ) )\n    {\n      throw params + ' is not a valid range of numbers for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $start: start,\n      $end: end\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, start, end ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","// contains:field,value\ncollectionRuleGenerator('contains',\n  '{$alias} does not contain an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue)\n  {\n    return !value.contains(function isMatch(m)\n    {\n      return m !== model && equalsCompare( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\n// not_contains:field,value\ncollectionRuleGenerator('not_contains',\n  '{$alias} contains an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue)\n  {\n    return value.contains(function isMatch(m)\n    {\n      return m !== model && equalsCompare( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\nfunction collectionRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var comma = params.indexOf(',');\n\n    if ( comma === -1 )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var matchField = params.substring( 0, comma );\n    var matchValue = params.substring( comma + 1 );\n\n    if ( indexOf( database.fields, matchField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $matchValue: matchValue\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.validate = function(field, params, database, getAlias, message)\n{\n  // message, models, validations\n  var messageOption = params || 'message';\n  var messageTemplate = determineMessage( 'validate', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      var invalid = new Collection();\n\n      for (var i = 0; i < value.length; i++)\n      {\n        var model = value[ i ];\n\n        if ( model && model.$validate && !model.$validate() )\n        {\n          invalid.push( model );\n        }\n      }\n\n      if ( invalid.length )\n      {\n        switch (messageOption)\n        {\n          case 'models':\n            setMessage( invalid );\n            break;\n          case 'validations':\n            setMessage( invalid.pluck( '$validations', '$$key' ) );\n            break;\n          default: // message\n            setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n            break;\n        }\n      }\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.validate.message = '{$alias} is not valid.';\n","// after:today\ndateRuleGenerator('after',\n  '{$alias} must be after {$date}.',\n  function isInvalid(value, date) {\n    return value < endOfDay( date );\n  }\n);\n\n// after_on:tomorrow\ndateRuleGenerator('after_on',\n  '{$alias} must be after or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value < date;\n  }\n);\n\n// before:yesterday\ndateRuleGenerator('before',\n  '{$alias} must be before {$date}.',\n  function isInvalid(value, date) {\n    return value > date;\n  }\n);\n\n// before_on:+2days\ndateRuleGenerator('before_on',\n  '{$alias} must be before or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value > endOfDay( date );\n  }\n);\n\n// date\nruleGenerator('date_like',\n  '{$alias} must be a valid date.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseDate( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      setValue( parsed );\n    }\n    return invalid;\n  }\n);\n\nfunction dateRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a date expression argument';\n    }\n\n    var dateExpression = Validation.parseExpression( params, database );\n\n    if ( dateExpression === noop )\n    {\n      throw params + ' is not a valid date expression for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $date: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      value = tryParseDate( value );\n\n      if ( isNumber( value ) )\n      {\n        var date = dateExpression( value, model );\n\n        if ( isNumber( date ) && isInvalid( value, date ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","\n// required_if:X,Y,...\nfieldListRuleGenerator('required_if',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\n// required_unless:X,Y,...\nfieldListRuleGenerator('required_unless',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = !map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldListRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a field and list arguments';\n    }\n\n    var parts = split( params, /(,)/, '\\\\' );\n    var matchField = parts.shift();\n    var matchValues = parts;\n\n    if ( indexOf( database.fields, matchField ) === false )\n    {\n      throw matchField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( matchValues );\n    var extra = {\n      $params: params,\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $list: list\n    };\n    var map = mapFromArray( matchValues, true );\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValues, map ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// confirmed:X\nfieldsRuleGenerator('confirmed',\n  '{$alias} must match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var confirmed = true;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        confirmed = false;\n      }\n    }\n\n    return !confirmed;\n  }\n);\n\n// different:X\nfieldsRuleGenerator('different',\n  '{$alias} must not match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var different = false;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        different = true;\n      }\n    }\n\n    return !different;\n  }\n);\n\n// if_valid:X\nfieldsRuleGenerator('if_valid',\n  '',\n  function isInvalid(value, model, fields, setValue) {\n    var valid = true;\n\n    for (var i = 0; i < fields.length && valid; i++)\n    {\n      if ( model.$validations[ fields[ i ] ] )\n      {\n        valid = false;\n      }\n    }\n\n    if ( !valid )\n    {\n      setValue( Validation.Stop );\n    }\n\n    return false;\n  }\n);\n\n// The field under validation must be present only if any of the other specified fields are present.\n// required_with:X,Y,...\nfieldsRuleGenerator('required_with',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only if all of the other specified fields are present.\n// required_with_all:X,Y,...\nfieldsRuleGenerator('required_with_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when any of the other specified fields are not present.\n// required_without:X,Y,...\nfieldsRuleGenerator('required_without',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when all of the other specified fields are not present.\n// required_without_all:X,Y,...\nfieldsRuleGenerator('required_without_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldsRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires an array of fields argument';\n    }\n\n    var fields = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( indexOf( database.fields, fields[ i ] ) === -1 )\n      {\n        throw fields[ i ] + ' is not a valid field for the ' + ruleName + ' rule';\n      }\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var fieldNames = joinFriendly( fields );\n    var fieldAliases = joinFriendly( fields, false, false, getAlias );\n    var extra = {\n      $fields: fieldNames,\n      $fieldAliases: fieldAliases\n    };\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, fields, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n};\n","// exists:X,Y\nforeignRuleGenerator('exists',\n  '{$alias} must match an existing {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return !models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// unique:X,Y\nforeignRuleGenerator('unique',\n  '{$alias} must be a unique {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\nfunction foreignRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var parts = split( params || '', /(\\s*,\\s*)/, '\\\\' );\n    var modelName = parts[0] || database.name;\n    var fieldName = parts[1] || field;\n    var models = null;\n\n    if ( indexOf( database.fields, fieldName ) === false )\n    {\n      throw fieldName + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    Rekord.get( modelName ).success(function(modelClass)\n    {\n      models = modelClass.all();\n    });\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $class: modelName,\n      $matchField: fieldName,\n      $matchAlias: getAlias( fieldName )\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( models && isValue( value ) )\n      {\n        if ( isInvalid( value, model, models, fieldName ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// if:due_date:before:today|required\n\n// if all rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount > 0;\n  }\n);\n\n// if any rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_any',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount >= totalCount;\n  }\n);\n\n// if no rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_not',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount < totalCount;\n  }\n);\n\n\n\nfunction subRuleGenerator(ruleName, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a validation rule argument';\n    }\n\n    var colon = params.indexOf( ':' );\n\n    if ( colon === -1 )\n    {\n      throw params + ' is not a valid argument for the ' + ruleName + ' rule';\n    }\n\n    var otherField = params.substring( 0, colon );\n    var otherRules = params.substring( colon + 1 );\n\n    if ( indexOf( database.fields, otherField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var validators = Validation.parseRules( otherRules, otherField, database, getAlias );\n\n    return function(value, model, setMessage)\n    {\n      var invalids = 0;\n\n      var setInvalid = function(message)\n      {\n        if ( message )\n        {\n          invalids++;\n        }\n      };\n\n      for (var i = 0; i < validators.length; i++)\n      {\n        validators[ i ]( value, model, setInvalid );\n      }\n\n      return isInvalid( invalids, validators.length ) ? Validation.Stop : value;\n    };\n  };\n}\n","// in:X,Y,Z,...\nlistRuleGenerator('in',\n  '{$alias} must be one of {$list}.',\n  function isInvalid(value, model, values, map)\n  {\n    return !map[ value ];\n  }\n);\n\n// not_in:X,Y,Z,...\nlistRuleGenerator('not_in',\n  '{$alias} must not be one of {$list}.',\n  function isInvalid(value, model, values, map)\n  {\n    return map[ value ];\n  }\n);\n\nfunction listRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a list argument';\n    }\n\n    var values = split( params, /(,)/, '\\\\' );\n\n    if ( values.length === 0 )\n    {\n      throw params + ' is not a valid list of values for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( values, 'or' );\n    var extra = {\n      $params: params,\n      $list: list\n    };\n    var map = mapFromArray( values, true );\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, values, map ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","\n\nregexRuleGenerator('alpha',\n  '{$alias} should only contain alphabetic characters.',\n    /^[a-zA-Z]*$/\n);\n\nregexRuleGenerator('alpha_dash',\n  '{$alias} should only contain alpha-numeric characters, dashes, and underscores.',\n  /^[a-zA-Z0-9_-]*$/\n);\n\nregexRuleGenerator('alpha_num',\n  '{$alias} should only contain alpha-numeric characters.',\n  /^[a-zA-Z0-9]*$/\n);\n\nregexRuleGenerator('email',\n  '{$alias} is not a valid email.',\n  /^.+@.+\\..+$/\n);\n\nregexRuleGenerator('url',\n  '{$alias} is not a valid URL.',\n  /^(https?:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('uri',\n  '{$alias} is not a valid URI.',\n  /^(\\w+:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('phone',\n  '{$alias} is not a valid phone number.',\n  /^1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?$/\n);\n\nfunction regexRuleGenerator(ruleName, defaultMessage, regex)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      if ( !regex.test( value ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.regex = function(field, params, database, getAlias, message)\n{\n  var parsed = /^\\/(.*)\\/([gmi]*)$/.exec( params );\n\n  if ( !parsed )\n  {\n    throw params + ' is not a valid regular expression for the regex rule';\n  }\n\n  var regex = new RegExp( parsed[1], parsed[2] );\n  var messageTemplate = determineMessage( 'regex', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( !regex.test( value ) )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.regex.message = '{$alias} is not a valid value.';\n","// min:3\nsizeRuleGenerator('min', {\n    'string': '{$alias} must have a minimum of {$number} characters.',\n    'number': '{$alias} must be at least {$number}.',\n    'object': '{$alias} must have at least {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value < number;\n  }\n);\n\n// greater_than:0\nsizeRuleGenerator('greater_than', {\n    'string': '{$alias} must have more than {$number} characters.',\n    'number': '{$alias} must be greater than {$number}.',\n    'object': '{$alias} must have more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value <= number;\n  }\n);\n\n// max:10\nsizeRuleGenerator('max', {\n    'string': '{$alias} must have no more than {$number} characters.',\n    'number': '{$alias} must be no more than {$number}.',\n    'object': '{$alias} must have no more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value > number;\n  }\n);\n\n// less_than:5\nsizeRuleGenerator('less_than', {\n    'string': '{$alias} must have less than {$number} characters.',\n    'number': '{$alias} must be less than {$number}.',\n    'object': '{$alias} must have less than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value >= number;\n  }\n);\n\n// equal:4.5\nsizeRuleGenerator('equal', {\n    'string': '{$alias} must have {$number} characters.',\n    'number': '{$alias} must equal {$number}.',\n    'object': '{$alias} must have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value !== number;\n  }\n);\n\n// not_equal:0\nsizeRuleGenerator('not_equal', {\n    'string': '{$alias} must not have {$number} characters.',\n    'number': '{$alias} must not equal {$number}.',\n    'object': '{$alias} must not have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value === number;\n  }\n);\n\nfunction sizeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a number argument';\n    }\n\n    var number = parseFloat( params );\n\n    if ( isNaN( number ) )\n    {\n      throw params + ' is not a valid number for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $number: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, number ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || Database.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    if ( isString( x ) && Date.parse )\n    {\n      var parsed = Date.parse( x );\n\n      if ( !isNaN( parsed ) )\n      {\n        x = parsed;\n      }\n    }\n\n    if ( isNumber( x ) )\n    {\n      return new Date( x );\n    }\n\n    return x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = currentTimestamp();\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var validation = options.validation || Database.Defaults.validation;\n\n  if ( isEmpty( validation ) )\n  {\n    return;\n  }\n\n  var rules = validation.rules || {};\n  var messages = validation.messages || {};\n  var aliases = validation.aliases || {};\n  var required = !!validation.required;\n\n  function getAlias(field)\n  {\n    return aliases[ field ] || field;\n  }\n\n  db.validations = {};\n\n  for ( var field in rules )\n  {\n    db.validations[ field ] = Validation.parseRules( rules[ field ], field, db, getAlias, messages[ field ] )\n  }\n\n  addMethod( model.prototype, '$validate', function()\n  {\n    var $this = this;\n\n    this.$trigger( Model.Events.PreValidate, [this] );\n\n    this.$valid = true;\n    this.$validations = {};\n    this.$validationMessages.length = 0;\n\n    for (var field in db.validations)\n    {\n      var chain = db.validations[ field ];\n      var value = this.$get( field );\n      var fieldValid = true;\n\n      var setMessage = function(message)\n      {\n        // Only accept for the first valid message\n        if ( message && fieldValid )\n        {\n          fieldValid = false;\n\n          $this.$validations[ field ] = message;\n          $this.$validationMessages.push( message );\n          $this.$valid = false;\n        }\n      };\n\n      for (var i = 0; i < chain.length && fieldValid && value !== Validation.Stop; i++)\n      {\n        value = chain[ i ]( value, this, setMessage );\n      }\n    }\n\n    this.$trigger( this.$valid ? Model.Events.ValidatePass : Model.Events.ValidateFail, [this] );\n\n    return this.$valid;\n  });\n\n  replaceMethod( model.prototype, '$init', function($init)\n  {\n    return function()\n    {\n      this.$valid = undefined;\n      this.$validations = {};\n      this.$validationMessages = [];\n\n      return $init.apply( this, arguments );\n    };\n  });\n\n  if ( required )\n  {\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        if ( this.$isDeleted() )\n        {\n          Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n          return Promise.resolve( this );\n        }\n\n        if ( !this.$validate() )\n        {\n          return Promise.resolve( this );\n        }\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n});\n\nModel.Events.PreValidate = 'pre-validate';\n\nModel.Events.ValidatePass = 'validate-pass';\n\nModel.Events.ValidateFail = 'validate-fail';\n\nvar Validation =\n{\n  Rules: {},\n  Expression: {},\n  Expressions: [],\n  Delimiter: /([|])/,\n  Escape: '\\\\',\n  RuleSeparator: ':',\n  Stop: {},\n\n  parseRules: function(rules, field, database, getAlias, message)\n  {\n    var validators = [];\n\n    if ( isString( rules ) )\n    {\n      rules = split( rules, this.Delimiter, this.Escape );\n    }\n\n    if ( isArray( rules ) )\n    {\n      for (var i = 0; i < rules.length; i++)\n      {\n        var rule = rules[ i ];\n        var validator = this.parseRule( rule, field, database, getAlias, message );\n\n        validators.push( validator );\n      }\n    }\n    else if ( isObject( rules ) )\n    {\n      for (var rule in rules)\n      {\n        var ruleMessage = rules[ rule ];\n        var validator = this.parseRule( rule, field, database, getAlias, ruleMessage || message );\n\n        validators.push( validator );\n      }\n    }\n\n    return validators;\n  },\n\n  parseRule: function(rule, field, database, getAlias, message)\n  {\n    var colon = rule.indexOf( this.RuleSeparator );\n    var ruleName = colon === -1 ? rule : rule.substring( 0, colon );\n\n    if ( ruleName.charAt( 0 ) === '$' )\n    {\n      return this.customValidator( ruleName, field, database, getAlias, message );\n    }\n\n    var ruleParams = colon === -1 ? undefined : rule.substring( colon + 1 );\n    var validatorFactory = Validation.Rules[ ruleName ];\n\n    if ( !validatorFactory )\n    {\n      throw ruleName + ' is not a valid rule';\n    }\n\n    return validatorFactory( field, ruleParams, database, getAlias, message );\n  },\n\n  parseExpression: function(expr, database)\n  {\n    var parsers = Validation.Expressions;\n\n    for (var i = 0; i < parsers.length; i++)\n    {\n      var parser = parsers[ i ];\n      var expressionFunction = parser( expr, database );\n\n      if ( isFunction( expressionFunction ) )\n      {\n        return expressionFunction; // (value, model)\n      }\n    }\n\n    return noop;\n  },\n\n  customValidator: function(functionName, field, database, getAlias, message)\n  {\n    return function(value, model, setMessage)\n    {\n      var result = model[ functionName ]( value, getAlias, message );\n\n      if ( isString( result ) )\n      {\n        setMessage( result );\n      }\n\n      return value;\n    };\n  }\n};\n\n// Export\n\nRekord.Validation = Validation;\n\nRekord.ruleGenerator = ruleGenerator;\nRekord.rangeRuleGenerator = rangeRuleGenerator;\nRekord.collectionRuleGenerator = collectionRuleGenerator;\nRekord.dateRuleGenerator = dateRuleGenerator;\nRekord.fieldListRuleGenerator = fieldListRuleGenerator;\nRekord.fieldsRuleGenerator = fieldsRuleGenerator;\nRekord.foreignRuleGenerator = foreignRuleGenerator;\nRekord.subRuleGenerator = subRuleGenerator;\nRekord.listRuleGenerator = listRuleGenerator;\nRekord.regexRuleGenerator = regexRuleGenerator;\nRekord.sizeRuleGenerator = sizeRuleGenerator;\n\nRekord.joinFriendly = joinFriendly;\nRekord.tryParseFloat = tryParseFloat;\nRekord.tryParseInt = tryParseInt;\nRekord.tryParseDate = tryParseDate;\nRekord.startOfDay = startOfDay;\nRekord.endOfDay = endOfDay;\nRekord.determineMessage = determineMessage;\nRekord.mapFromArray = mapFromArray;\nRekord.checkNoParams = checkNoParams;\nRekord.generateMessage = generateMessage;\n","Validation.Expression.date =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = tryParseDate( expr );\n\n  if ( !isNaN(parsed) )\n  {\n    return function(value, model)\n    {\n      return parsed;\n    };\n  }\n}) - 1;\n","Validation.Expression.field =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( indexOf( database.fields, expr ) )\n  {\n    return function(value, model)\n    {\n      return model.$get( expr );\n    };\n  }\n}) - 1;\n","\nvar RELATIVE_REGEX = /^([+-]\\d+(\\.\\d+)?)\\s*(.+)$/;\n\nvar RELATIVE_UNITS = {\n  ms: 1,\n  millisecond: 1,\n  milliseconds: 1,\n  s: 1000,\n  second: 1000,\n  seconds: 1000,\n  min: 1000 * 60,\n  mins: 1000 * 60,\n  minute: 1000 * 60,\n  minutes: 1000 * 60,\n  hr: 1000 * 60 * 60,\n  hour: 1000 * 60 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n  days: 1000 * 60 * 60 * 24,\n  wk: 1000 * 60 * 60 * 24 * 7,\n  week: 1000 * 60 * 60 * 24 * 7,\n  weeks: 1000 * 60 * 60 * 24 * 7,\n  month: ['getMonth', 'setMonth'],\n  months: ['getMonth', 'setMonth'],\n  yr: ['getFullYear', 'setFullYear'],\n  year: ['getFullYear', 'setFullYear'],\n  years: ['getFullYear', 'setFullYear']\n};\n\nValidation.Expression.relative =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = RELATIVE_REGEX.exec( expr );\n\n  if ( parsed !== null )\n  {\n    var amount = parseFloat( parsed[ 1 ] );\n    var unit = parsed[ 3 ];\n    var unitScale = RELATIVE_UNITS[ unit ];\n\n    if ( !unitScale )\n    {\n      throw unit + ' is not a valid unit.';\n    }\n\n    return function(value, model)\n    {\n      var relative = new Date();\n\n      if ( isNumber( unitScale ) )\n      {\n        relative.setTime( relative.getTime() + unitScale * amount );\n      }\n      else\n      {\n        var getter = unitScale[0];\n        var setter = unitScale[1];\n\n        relative[ setter ]( relative[ getter ]() + amount );\n      }\n\n      return relative.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.today =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'today' )\n  {\n    return function(value, model)\n    {\n      var today = new Date();\n\n      startOfDay( today );\n\n      return today.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.tomorrow =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'tomorrow' )\n  {\n    return function(value, model)\n    {\n      var tomorrow = new Date();\n\n      tomorrow.setDate( tomorrow.getDate() + 1 );\n      startOfDay( tomorrow );\n\n      return tomorrow.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.yesterday =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'yesterday' )\n  {\n    return function(value, model)\n    {\n      var yesterday = new Date();\n\n      yesterday.setDate( yesterday.getDate() - 1 );\n      startOfDay( yesterday );\n\n      return yesterday.getTime();\n    };\n  }\n}) - 1;\n","// accepted\nValidation.Rules.accepted = function(field, params, database, getAlias, message)\n{\n  checkNoParams( 'accepted', field, params );\n\n  var messageTemplate = determineMessage( 'accepted', message );\n  var acceptable = Validation.Rules.accepted.acceptable;\n\n  return function(value, model, setMessage)\n  {\n    var valueString = (value + '').toLowerCase();\n    var accepted = acceptable[ valueString ];\n\n    if ( !accepted )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.accepted.message = '{$alias} has not been accepted.';\n\nValidation.Rules.accepted.acceptable =\n{\n  '1':    true,\n  'yes':  true,\n  'on':   true,\n  'y':    true,\n  'true': true\n};\n","// required\nruleGenerator('required',\n  '{$alias} is required.',\n  function isInvalid(value) {\n    return isEmpty( value );\n  }\n);\n","\nruleGenerator('array',\n  '{$alias} must be an array.',\n  function isInvalid(value) {\n    return !isArray( value );\n  }\n);\n\nruleGenerator('object',\n  '{$alias} must be an object.',\n  function isInvalid(value) {\n    return !isObject( value );\n  }\n);\n\nruleGenerator('string',\n  '{$alias} must be a string.',\n  function isInvalid(value) {\n    return !isString( value );\n  }\n);\n\nruleGenerator('number',\n  '{$alias} must be a number.',\n  function isInvalid(value) {\n    return !isNumber( value );\n  }\n);\n\nruleGenerator('boolean',\n  '{$alias} must be a true or false.',\n  function isInvalid(value) {\n    return !isBoolean( value );\n  }\n);\n\nruleGenerator('model',\n  '{$alias} must have a value.',\n  function isInvalid(value) {\n    return !(value instanceof Model);\n  }\n);\n\nruleGenerator('whole',\n  '{$alias} must be a whole number.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseInt( value );\n    var numeric = parseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      invalid = Math.floor( parsed ) !== numeric;\n      if ( !invalid ) {\n        setValue( parsed );\n      }\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('numeric',\n  '{$alias} must be numeric.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      setValue( parsed );\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('yesno',\n  '{$alias} must be a yes or no.',\n  function isInvalid(value, model, setValue) {\n    var mapped = Validation.Rules.yesno.map[ value ];\n    var invalid = !isBoolean( mapped );\n    if ( !invalid ) {\n      setValue( mapped );\n    }\n    return invalid;\n  }\n);\n\nValidation.Rules.yesno.map =\n{\n  'true':   true,\n  't':      true,\n  'yes':    true,\n  'y':      true,\n  '1':      true,\n  'false':  false,\n  'f':      false,\n  'no':     false,\n  'n':      false,\n  '0':      false\n};\n","Validation.Rules.ceil = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.ceil( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.floor = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.floor( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.trim = function(field, params, database, alias, message)\n{\n  // String.trim polyfill\n  if ( !String.prototype.trim )\n  {\n    var regex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n    String.prototype.trim = function()\n    {\n      return this.replace( regex, '' );\n    };\n  }\n\n  return function(value, model, setMessage)\n  {\n    if ( isString( value ) )\n    {\n      value = value.trim();\n    }\n\n    return value;\n  };\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}