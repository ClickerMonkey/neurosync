{"version":3,"sources":["rekord.min.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","parsedChain","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","parseDate","utc","saveNumberResolver","numbers","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","promise","get","isComplete","results","Events","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","removeKey","buildKey","buildKeys","relationName","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","add","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","isDependent","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    var events = toArray( eventsInput, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( defaultProperty + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( defaultProperty, option );\n    }\n    else\n    {\n      setProperty( defaultProperty, copy( defaultValue ) );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      setProperty( optionProperty, options[ optionProperty ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc )\n    {\n      x += ' UTC';\n    }\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  var resolver = createNumberResolver( numbers );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  var resolver = createPropertyResolver( properties, delim );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n\n  // 33\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (e)\n  {\n    throw e;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        this.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      this.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      for (var relationName in this.relations)\n      {\n        if ( relationName in input )\n        {\n          this.relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    this.buildKeyFromRelations( model );\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n    var off;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents[ related.$uid() ] = related;\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var foreign = this.model.Database.key;\n\n      if ( isArray( key ) )\n      {\n        for (var i = 0; i < key.length; i++)\n        {\n          var field = key[ i ];\n\n          if ( !isValue( input[ field ] ) && isValue( related[ foreign[ i ] ] ) )\n          {\n            input[ field ] = related[ foreign[ i ] ];\n          }\n        }\n      }\n      else\n      {\n        if ( !isValue( input[ key ] ) && isValue( related[ foreign ] ) )\n        {\n          input[ key ] = related[ foreign ];\n        }\n      }\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeFormat = options.timestampFormat || Database.Defaults.timestampFormat;\n  var timeType = options.timestampType || Database.Defaults.timestampType;\n  var timeUTC = options.timestampUTC || Database.Defaults.timestampUTC;\n  var timeCurrent = options.timestampCurrent || Database.Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDatabase.Defaults.timestampFormat = Timestamp.Millis;\nDatabase.Defaults.timestampType = Timestamp.Date;\nDatabase.Defaults.timestampUTC = false;\nDatabase.Defaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\n\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}