{"version":3,"sources":["rekord.min.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","setProperties","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","setProperty","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","addPlugin","callback","beforeCreation","Rekord","on","Events","Options","Plugins","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","off","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Error","$on","$once","$after","$off","$trigger","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","value","promise","get","isComplete","results","database","Function","className","classes","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","discriminator","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","writable","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","$invalid","destroyModel","modelKey","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setValue","$hasKey","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","add","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","buildKey","join","otherFields","akey","bkey","unshift","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","callbackContext","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","clearKey","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","onChange","postSave","preRemove","handleModelAdded","handleLazyLoad","relatedClones","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","addMethod","addMethods"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.6 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n(function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  setProperties( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar setProperty = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction setProperties(target, methods)\n{\n  for (var methodName in methods)\n  {\n    setProperty( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  setProperty( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\nfunction addPlugin( callback, beforeCreation )\n{\n  if ( beforeCreation )\n  {\n    return Rekord.on( Rekord.Events.Options, callback ); // (options)\n  }\n  else\n  {\n    return Rekord.on( Rekord.Events.Plugins, callback ); // (model, db, options)\n  }\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  setProperty( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      setProperty( $this, property, listeners = {} );\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    setProperties(target, {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    });\n  }\n  else\n  {\n    setProperties(target, {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    });\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      if ( isString( relationOptions ) )\n      {\n        relationOptions = {\n          model: relationOptions\n        };\n      }\n      else if ( !isObject( relationOptions ) )\n      {\n        relationOptions = {};\n      }\n\n      if ( !relationOptions.model && !relationOptions.discriminator )\n      {\n        relationOptions.model = name;\n      }\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nsetProperties( Database.prototype,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  setProperty( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nsetProperties( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    setProperties(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        setProperty( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.all[ key ] = this;\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $relate: function(prop, relate, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate, remoteData );\n    }\n  },\n\n  $unrelate: function(prop, unrelated, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated, remoteData );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      delete db.all[ oldKey ];\n      db.all[ newKey ] = this;\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nsetProperties( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nDependents.prototype =\n{\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n};\n\n\nfunction KeyHandler()\n{\n\n}\n\nKeyHandler.prototype =\n{\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n};\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    setProperties(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      setProperty( this, 'base', base );\n\n      this.connect();\n    }\n\n    setProperty( this, 'filter', filter );\n    \n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    setProperties(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    setProperties(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  setProperties(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input, remoteData)\n  {\n    this.relator.set( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input, remoteData)\n  {\n    this.relator.relate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input, remoteData)\n  {\n    this.relator.unrelate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  setProperties(collection, {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  setProperties( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nsetProperties( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    setProperty( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n\n  setProperty( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nsetProperties( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\nsetProperties( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nsetProperties( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      setProperties( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear && !remoteData )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, relator, model, this, relation );\n\n        relator.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related && ( !this.where || this.where( related ) ) )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  where:                false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, true );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nextend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nextend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    setProperties( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nsetProperties( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n  \n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model at the given index.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.at( 0 ); // t0\n   * ```\n   *\n   * @method at\n   * @memberof Rekord.Model\n   * @param {Number} index -\n   *    The index of the model to return.\n   * @return {Rekord.Model} -\n   *    The reference to the model at the given index.\n   */\n  model.at = function(index)\n  {\n    return db.models[ index ];\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      setProperty( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\naddPlugin(function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\naddPlugin( function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  setProperty( Map.prototype, 'put', mapKeyChangePut );\n  setProperty( Map.prototype, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  setProperty( Map.prototype, 'put', Map_put );\n  setProperty( Map.prototype, 'remove', Map_remove );\n}\n\naddPlugin(function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    setProperties( model.prototype, methods );\n  }\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n  \n}, true );\n\naddPlugin(function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\naddPlugin(function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n  Rekord.addPlugin = addPlugin;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = Rekord.setProperty = setProperty;\n  Rekord.addMethods = Rekord.setProperties = setProperties;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}