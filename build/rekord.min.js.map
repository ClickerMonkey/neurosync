{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","dynamic.js","events.js","files.js","Gate.js","Database.js","Model.js","Map.js","Request.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Transaction.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","split","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","isSorted","array","copyConstructor","func","F","extend","parent","child","override","addMethods","constructor","target","methods","methodName","addMethod","factory","args","apply","this","extendArray","extendArraySupported","create","created","transfer","EA","supported","eq","push","isDefined","isFunction","isRekord","Database","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isObject","isValue","noop","bind","context","uuid","S4","Math","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Rekord","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventable","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","saveWhere","Wheres","createWhere","where","cache","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","$once","RemoteSave","$addOperation","SaveLocal","Cascade","Local","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","Map","indices","Request","failure","callCanceled","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","url","SearchPaged","Transaction","cascade","operation","status","completed","operations","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkRekord","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","size","types","fileToValue","filtered","whereProperties","whereValue","whereEquals","find","firstWhere","grabModel","grabAll","ready","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","encoded","update","remove","query","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","resolveModel","resolveModels","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","Status","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","onSuccess","handleCall","onFailure","request","currentCall","cancel","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","onModelUpdated","handleModelUpdate","Ready","Success","Failure","$getDefaults","$append","$url","$results","$request","$handleSuccess","$handleFailure","$run","$encode","$off","$ready","$success","$failure","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","handleSuccess","handleFailure","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n","\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nRekord.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Rekord.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Rekord.Comparators )\n    {\n      return Rekord.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventable(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventable\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventable\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventable\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventable\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nRekord.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Rekord.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Rekord.NumberResolvers )\n  {\n    return Rekord.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nRekord.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Rekord.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.PropertyResolvers )\n    {\n      return Rekord.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nRekord.Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Rekord.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.Wheres )\n    {\n      return Rekord.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  if ( options.name in Rekord.cache )\n  {\n    return Rekord.cache[ options.name ];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  Rekord.cache[ database.name ] = model;\n  Rekord.cache[ database.className ] = model;\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.trigger( Rekord.Events.Initialized, [model] );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nRekord.cache = {};\n\nRekord.get = function(name, callback, context)\n{\n  var cached = Rekord.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkRekord()\n      {\n        var cached = Rekord.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Rekord.on( Rekord.Events.Initialized, checkRekord );\n    }\n  }\n\n  return cached;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventable( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nRekord.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nRekord.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nRekord.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nRekord.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Rekord.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Rekord.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n\n    if ( !db.initialized || persistent )\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( Database.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Rekord.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Rekord.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( Database.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Rekord.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( Database.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( Database.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( Database.Events.NoLoad, [db, response] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( GetRemote, cascade );\n  }\n\n});\n\naddEventable( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Rekord.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Rekord.transactNone( cascade, this, 'save' );\n    }\n\n    return Rekord.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Rekord.transactNone( cascade, this, 'remove' );\n    }\n\n    return Rekord.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n\n    return this;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventable( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\nfunction Request(context, success, failure)\n{\n  this.context = context;\n  this.success = success;\n  this.failure = failure;\n  this.call = 0;\n  this.callCanceled = 0;\n}\n\naddMethods( Request.prototype,\n{\n\n  onSuccess: function()\n  {\n    return this.handleCall( this, ++this.call, this.success );\n  },\n\n  onFailure: function()\n  {\n    return this.handleCall( this, this.call, this.failure );\n  },\n\n  handleCall: function(request, currentCall, callback)\n  {\n    return function onHandleCall()\n    {\n      if ( request.call === currentCall &&\n           currentCall > request.callCanceled &&\n           isFunction( callback ) )\n      {\n        callback.apply( request.context, arguments );\n      }\n    };\n  },\n\n  cancel: function()\n  {\n    this.callCanceled = this.call;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isObject( models ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.splice.call( arguments, 0, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      var n = this.length;\n      var half = Math.floor( n / 2 );\n\n      for (var i = 0; i < half; i++)\n      {\n        var k = n - i - 1;\n        var a = this[ i ];\n        this[ i ] = this[ k ];\n        this[ k ] = a;\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventable( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventable( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !autoSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    return this.eachWhere( cancelIt, properties, value, equals );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new ModelCollection( this.database, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n */\nfunction Search(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$status = Search.Status.Success;\n    this.$request = new Request( this, this.$handleSuccess, this.$handleFailure );\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = this.$request.onSuccess();\n    var failure = this.$request.onFailure();\n\n    this.$status = Search.Status.Pending;\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    return this;\n  },\n\n  $cancel: function()\n  {\n    this.$off( Search.Events.Ready );\n    this.$off( Search.Events.Success );\n    this.$off( Search.Events.Failure );\n\n    this.$request.cancel();\n\n    return this;\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Success, callback, context );\n    }\n    else if ( this.$status === Search.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Failure, callback, context );\n    }\n    else if ( this.$status === Search.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(response)\n  {\n    var models = this.$decode.apply( this, arguments );\n\n    this.$status = Search.Status.Success;\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Success, [this, response] );\n  },\n\n  $handleFailure: function(response)\n  {\n    this.$status = Search.Status.Failure;\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Failure, [this, response] );\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n\naddEventable( Search.prototype, true );\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$once( Search.Events.Ready, this.$onMoreEnd );\n      this.$append = true;\n      this.$run();\n    }\n\n    return this;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nRekord.transaction = null;\n\nRekord.transact = function(cascade, model, operation, func)\n{\n  var transaction = Rekord.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Rekord.transaction = new Transaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Rekord.transaction = null;\n\n    return transaction;\n  }\n};\n\nRekord.transactNone = function(cascade, model, operation)\n{\n  return new Transaction( cascade, model, operation );\n};\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Transaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\naddMethods( Transaction.prototype,\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = Transaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = Transaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Rekord.Cascade.Rest )\n      {\n        this.status = Transaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Rekord.Cascade.Local )\n      {\n        this.status = Transaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = Transaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( Transaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n});\n\naddEventable( Transaction.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Rekord.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Rekord.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Rekord.Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Rekord.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Rekord.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Rekord.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Rekord.Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Rekord.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Rekord.Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Rekord.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Rekord.Save.Model:\n        return related.$toJSON( true );\n\n      case Rekord.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Rekord.Save.Key:\n      case Rekord.Store.Key:\n        return related.$key();\n\n      case Rekord.Save.Keys:\n      case Rekord.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Rekord.Store.Model || this.save === Rekord.Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.Local,\n  cascadeSave:          Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.NoRest,\n  cascadeSave:          Rekord.Cascade.All,\n  cascadeSaveRelated:   Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Rekord.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options)\n  {\n    return new Search( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options)\n  {\n    return new SearchPaged( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || Database.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    addMethod( model.prototype, '$save', function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    DiscriminateCollection( search, this.discriminator, this.discriminatorToModel );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  global.Rekord.Model = Model;\n  global.Rekord.Database = Database;\n  global.Rekord.Relation = Relation;\n  global.Rekord.Operation = Operation;\n  global.Rekord.Transaction = Transaction;\n  global.Rekord.Search = Search;\n  global.Rekord.SearchPaged = SearchPaged;\n\n  /* Collections */\n  global.Rekord.Map = Map;\n  global.Rekord.Collection = Collection;\n  global.Rekord.FilteredCollection = FilteredCollection;\n  global.Rekord.ModelCollection = ModelCollection;\n  global.Rekord.FilteredModelCollection = FilteredModelCollection;\n  global.Rekord.Page = Page;\n\n  /* Relationships */\n  global.Rekord.HasOne = HasOne;\n  global.Rekord.BelongsTo = BelongsTo;\n  global.Rekord.HasMany = HasMany;\n  global.Rekord.HasManyThrough = HasManyThrough;\n  global.Rekord.HasRemote = HasRemote;\n\n  /* Utility Functions */\n  global.Rekord.isRekord = isRekord;\n  global.Rekord.isDefined = isDefined;\n  global.Rekord.isFunction = isFunction;\n  global.Rekord.isString = isString;\n  global.Rekord.isNumber = isNumber;\n  global.Rekord.isBoolean = isBoolean;\n  global.Rekord.isDate = isDate;\n  global.Rekord.isRegExp = isRegExp;\n  global.Rekord.isArray = isArray;\n  global.Rekord.isObject = isObject;\n  global.Rekord.isValue = isValue;\n\n  global.Rekord.uuid = uuid;\n  global.Rekord.indexOf = indexOf;\n  global.Rekord.propsMatch = propsMatch;\n  global.Rekord.hasFields = hasFields;\n  global.Rekord.toArray = toArray;\n\n  global.Rekord.addEventable = addEventable;\n\n  global.Rekord.extend = extend;\n  global.Rekord.extendArray = extendArray;\n  global.Rekord.copyConstructor = copyConstructor;\n  global.Rekord.factory = factory;\n\n  global.Rekord.transfer = transfer;\n  global.Rekord.collapse = collapse;\n  global.Rekord.swap = swap;\n  global.Rekord.grab = grab;\n  global.Rekord.pull = pull;\n  global.Rekord.copy = copy;\n  global.Rekord.noop = noop;\n  global.Rekord.bind = bind;\n  global.Rekord.diff = diff;\n  global.Rekord.sizeof = sizeof;\n  global.Rekord.isEmpty = isEmpty;\n  global.Rekord.collect = collect;\n  global.Rekord.applyOptions = applyOptions;\n  global.Rekord.toCamelCase = toCamelCase;\n  global.Rekord.evaluate = evaluate;\n\n  global.Rekord.clean = clean;\n  global.Rekord.cleanFunctions = cleanFunctions;\n\n  global.Rekord.compare = compare;\n  global.Rekord.equals = equals;\n  global.Rekord.equalsStrict = equalsStrict;\n  global.Rekord.equalsCompare = equalsCompare;\n\n  global.Rekord.isSorted = isSorted;\n  global.Rekord.saveComparator = saveComparator;\n  global.Rekord.createComparator = createComparator;\n  global.Rekord.addComparator = addComparator;\n\n  global.Rekord.saveWhere = saveWhere;\n  global.Rekord.createWhere = createWhere;\n\n  global.Rekord.savePropertyResolver = savePropertyResolver;\n  global.Rekord.createPropertyResolver = createPropertyResolver;\n\n  global.Rekord.saveNumberResolver = saveNumberResolver;\n  global.Rekord.createNumberResolver = createNumberResolver;\n\n  global.Rekord.parse = parse;\n  global.Rekord.format = format;\n  global.Rekord.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}