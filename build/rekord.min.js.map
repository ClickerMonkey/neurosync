{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","dynamic.js","events.js","files.js","Gate.js","Database.js","Model.js","Map.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Promise.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","split","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isValue","isObject","copyConstructor","func","F","extend","parent","child","override","addMethods","constructor","target","methods","methodName","addMethod","factory","args","apply","this","extendArray","extendArraySupported","create","created","transfer","EA","supported","eq","push","isDefined","isFunction","isRekord","Database","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Rekord","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","saveWhere","Wheres","createWhere","where","promise","get","isComplete","results","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","$once","RemoteSave","$addOperation","SaveLocal","Cascade","Local","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Rest","off1","off2","off3","status","reject","noline","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","url","run","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","callbackContext","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","size","types","fileToValue","filtered","whereProperties","whereValue","whereEquals","find","firstWhere","grabModel","grabAll","ready","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","query","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","cache","fullSave","fullPublish","resolveModel","resolveModels","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","complete","isValid","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","$getDefaults","$append","$url","$results","$promise","$run","$encode","$handleSuccess","$handleFailure","isPending","offline","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","notLive","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nRekord.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Rekord.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Rekord.Comparators )\n    {\n      return Rekord.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nRekord.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Rekord.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Rekord.NumberResolvers )\n  {\n    return Rekord.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nRekord.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Rekord.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.PropertyResolvers )\n    {\n      return Rekord.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nRekord.Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Rekord.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.Wheres )\n    {\n      return Rekord.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  return Rekord.promises[ name ] = Rekord.promises[ name ] || new Promise( null, false );\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n};\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.complete( callback, context || db );\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    }\n\n    db.rest.all( onModels, onLoadError );\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n        i--;\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    return this.eachWhere( cancelIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    return this.eachWhere( refreshIt, properties, value, equals );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( isObject( props ) )\n    {\n      this.$set( props );\n    }\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    this.$cancel();\n    this.$promise = new Promise();\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = status === 0;\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 410 || status === 404 )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || Database.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    addMethod( model.prototype, '$save', function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Utility Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n\n  Rekord.uuid = uuid;\n  Rekord.indexOf = indexOf;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.toArray = toArray;\n\n  Rekord.addEventful = addEventful;\n\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.copy = copy;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.diff = diff;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.collect = collect;\n  Rekord.applyOptions = applyOptions;\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.evaluate = evaluate;\n\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n\n  Rekord.compare = compare;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.equals = equals;\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n\n  Rekord.isSorted = isSorted;\n  Rekord.saveComparator = saveComparator;\n  Rekord.createComparator = createComparator;\n  Rekord.addComparator = addComparator;\n\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}