{"version":3,"sources":["rekord.min.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","promise","get","isComplete","results","Events","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","removeKey","buildKey","buildKeys","join","relationName","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","$invalid","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","add","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","isDependent","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.2.7 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n(function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    var events = toArray( eventsInput, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      setProperty( defaultProperty, option );\n    }\n    else\n    {\n      setProperty( defaultProperty, copy( defaultValue ) );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      setProperty( optionProperty, options[ optionProperty ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc )\n    {\n      x += ' UTC';\n    }\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (e)\n  {\n    throw e;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in Defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        this.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      this.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      for (var relationName in this.relations)\n      {\n        if ( relationName in input )\n        {\n          this.relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    this.buildKeyFromRelations( model );\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if ( !isValue(key) )\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        this.$invalid = true;\n\n        return;\n      }\n\n      this.$db.all[ key ] = this;\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = this.$db.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n    var off;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents[ related.$uid() ] = related;\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var foreign = this.model.Database.key;\n\n      if ( isArray( key ) )\n      {\n        for (var i = 0; i < key.length; i++)\n        {\n          var field = key[ i ];\n\n          if ( !isValue( input[ field ] ) && isValue( related[ foreign[ i ] ] ) )\n          {\n            input[ field ] = related[ foreign[ i ] ];\n          }\n        }\n      }\n      else\n      {\n        if ( !isValue( input[ key ] ) && isValue( related[ foreign ] ) )\n        {\n          input[ key ] = related[ foreign ];\n        }\n      }\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\n\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}