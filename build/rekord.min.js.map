{"version":3,"sources":["rekord.min.js"],"names":["root","factory","define","amd","module","exports","global","Rekord","this","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","create","collectArray","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","isDefined","isFunction","constructor","apply","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","func","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","addPlugin","callback","beforeCreation","on","Events","Options","Plugins","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","target","functionName","events","secret","off","eventFunction","listener","result","subject","unlistener","unlistened","$methods","Class","method","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","push","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Error","methods","$on","$once","$after","$off","$trigger","props","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","copyValues","grabbed","p","pull","pulledValue","pulled","transfer","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","value","promise","get","isComplete","results","database","dynamic","className","classes","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","modelsCached","models","ModelCollection","allCached","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","contextIndex","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","discriminator","init","save","projectionName","projections","Projection","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","input","addProjection","Context","databases","alls","add","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","win","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","window","construct","build","extend","parent","override","parentCopy","copyConstructor","instanceFactory","nativeArray","Settings","parentInstance","code","DynamicClass","Function","propThis","methodThis","replaceThis","methodName","writable","propertyName","methodFactory","existingMethod","F","now","RekordSettings","document","currentScript","script","getAttribute","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","removeListeners","failOnPendingChanges","hasPending","singularity","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","isOnline","navigator","onLine","online","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","saveAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","noReferences","prune","active","max","keepAlive","removeLocal","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","clearAll","contains","$isPending","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","addReference","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","saveReference","createModel","$status","$invalid","destroyModel","modelKey","pruneModel","RemoteAndRemove","removeReference","hasPruning","pruneModels","youngestAllowed","$remove","isTooYoung","$touched","youngest","minModel","eachWhere","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","delaySort","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$sync","removeUnrelated","sync","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","$touch","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isSavedLocally","$isNew","$project","projectionInput","projection","project","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","alias","aliasIndex","ALIAS_DELIMITER","word","words","tokens","types","resolvers","processWord","token","TOKEN_HANDLER","unshift","post","processToken","pre","TOKENS",".","?","|","#","(",")","[","]","{",":","}","sourceType","fieldIndex","filterName","Filters","resolveName","whereName","whereFrom","subEnd","pluckValueEnd","pluck","pluckObjectEnd","originalInput","start","getApplied","applied","each","applyDatabase","discard","discardDatabase","destroy","destroyDatabase","iterator","dbs","buildKey","join","otherFields","akey","bkey","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","insertAt","removed","shift","removing","element","removeAll","removeWhere","deleteCount","adding","startingValue","min","maxModel","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","valuesResolver","keysResolver","callbackContext","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","grabAlways","publish","always","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","clearKey","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","initial","grabInitial","grabModels","pending","setProperty","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","ignoreLoaded","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","relatedValue","modelFields","relatedFields","hasOne","child","preSave","populateInitial","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","onChange","postSave","preRemove","handleModelAdded","handleLazyLoad","onRelated","existingModel","relatedClones","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","existingThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","fileToValue","find","findOrCreate","created","grabAll","persist","searchAt","paging","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","extendArray","addMethod","addMethods","replaceMethod"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.10 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define('rekord', [], function() { // jshint ignore:line\n      return factory(root);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global);  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root);\n  }\n}(this, function(global, undefined)\n{\n\n  var win = typeof window !== 'undefined' ? window : global;   // jshint ignore:line\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.create( values );\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collectArray(1, 2, 3, 4);\n * Rekord.collectArray([1, 2, 3, 4]); // same as above\n * Rekord.collectArray();\n * Rekord.collectArray([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collectArray(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.native( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\n// Class.create( construct, methods )\n// Class.extend( parent, construct, override )\n// Class.prop( target, name, value )\n// Class.props( target, properties )\n// Class.method( construct, methodName, method )\n// Class.method( construct, methods )\n// Class.replace( construct, methodName, methodFactory(super) )\n\n// constructor.create( ... )\n// constructor.native( ... ) // for arrays\n// constructor.$constuctor\n// constructor.prototype.$super\n// constructor.$methods\n// constructor.$prop( name, value ) // add to prototype\n// constructor.$method( methodName, method ) // add to prototype\n// constructor.$replace( methodName, methodFactory(super) )\n\nvar Class =\n{\n\n  create: function( construct, methods )\n  {\n    Class.prop( construct, 'create', Class.factory( construct ) );\n    Class.build( construct, methods, noop );\n  },\n\n  extend: function( parent, construct, override )\n  {\n    var methods = collapse( override, parent.$methods );\n    var parentCopy = Class.copyConstructor( parent );\n\n    construct.prototype = new parentCopy();\n\n    var instanceFactory = Class.factory( construct );\n\n    if ( Class.isArray( parent ) )\n    {\n      var nativeArray = function()\n      {\n        var arr = [];\n        Class.props( arr, methods );\n        construct.apply( arr, arguments );\n        return arr;\n      };\n\n      Class.prop( construct, 'native', nativeArray );\n      Class.prop( construct, 'create', Settings.nativeArray ? nativeArray : instanceFactory );\n    }\n    else\n    {\n      Class.prop( construct, 'create', instanceFactory );\n    }\n\n    Class.build( construct, methods, parent );\n  },\n\n  dynamic: function(parent, parentInstance, className, code)\n  {\n    var DynamicClass = new Function('return function ' + className + code)(); // jshint ignore:line\n\n    DynamicClass.prototype = parentInstance;\n\n    Class.build( DynamicClass, {}, parent );\n\n    return DynamicClass;\n  },\n\n  build: function(construct, methods, parent)\n  {\n    Class.prop( construct, '$methods', methods );\n    Class.prop( construct, '$prop', Class.propThis );\n    Class.prop( construct, '$method', Class.methodThis );\n    Class.prop( construct, '$replace', Class.replaceThis );\n    Class.prop( construct.prototype, '$super', parent );\n    Class.prop( construct.prototype, 'constructor', construct );\n    Class.props( construct.prototype, methods );\n  },\n\n  isArray: function( construct )\n  {\n    return Array === construct || construct.prototype instanceof Array;\n  },\n\n  method: function( construct, methodName, method )\n  {\n    if (construct.$methods)\n    {\n      construct.$methods[ methodName ] = method;\n    }\n\n    Class.prop( construct.prototype, methodName, method );\n  },\n\n  methodThis: function( methodName, method )\n  {\n    Class.method( this, methodName, method );\n  },\n\n  methods: function( construct, methods )\n  {\n    for (var methodName in methods)\n    {\n      Class.method( construct, methodName, methods[ methodName ] );\n    }\n  },\n\n  prop: (function()\n  {\n    if (Object.defineProperty)\n    {\n      return function( target, property, value )\n      {\n        Object.defineProperty( target, property, {\n          configurable: true,\n          enumerable: false,\n          writable: true,\n          value: value\n        });\n      };\n    }\n    else\n    {\n      return function( target, property, value )\n      {\n        target[ property ] = value;\n      };\n    }\n  })(),\n\n  propThis: function( property, value )\n  {\n    Class.prop( this.prototype, property, value );\n  },\n\n  props: function( target, properties )\n  {\n    for (var propertyName in properties)\n    {\n      Class.prop( target, propertyName, properties[ propertyName ] );\n    }\n  },\n\n  replace: function( target, methodName, methodFactory )\n  {\n    var existingMethod = target.prototype[ methodName ] || target[ methodName ] || noop;\n\n    Class.method( target, methodName, methodFactory( existingMethod ) );\n  },\n\n  replaceThis: function( methodName, methodFactory )\n  {\n    Class.replace( this, methodName, methodFactory );\n  },\n\n  copyConstructor: function(construct)\n  {\n    function F()\n    {\n\n    }\n\n    F.prototype = construct.prototype;\n\n    return F;\n  },\n\n  factory: function(construct)\n  {\n    function F(args)\n    {\n      construct.apply( this, args );\n    }\n\n    F.prototype = construct.prototype;\n\n    return function()\n    {\n      return new F( arguments );\n    };\n  }\n\n};\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nvar now = Date.now || function()\n{\n  return new Date().getTime();\n};\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\nfunction addPlugin( callback, beforeCreation )\n{\n  if ( beforeCreation )\n  {\n    return Rekord.on( Rekord.Events.Options, callback ); // (options)\n  }\n  else\n  {\n    return Rekord.on( Rekord.Events.Plugins, callback ); // (model, db, options)\n  }\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  var eventFunction = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n\n  if (target.$methods)\n  {\n    Class.method( target, functionName, eventFunction );\n  }\n  else\n  {\n    Class.prop( target, functionName, eventFunction );\n  }\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      Class.prop( $this, property, listeners = {} );\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  var methods = null;\n\n  if ( secret )\n  {\n    methods = {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    };\n  }\n  else\n  {\n    methods = {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    };\n  }\n\n  if ( target.$methods )\n  {\n    Class.methods( target, methods );\n  }\n  else\n  {\n    Class.props( target, methods );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nvar Settings = global.RekordSettings || win.RekordSettings || {};\n\nif ( win.document && win.document.currentScript )\n{\n  var script = win.document.currentScript;\n\n  if (script.getAttribute('native-array') !== null)\n  {\n    Settings.nativeArray = true;\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = Class.dynamic(\n    Model,\n    new Model( database ),\n    database.className,\n    '(props, remoteData) { this.$init( props, remoteData ) }'\n  );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\nRekord.export = function()\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    win[ className ] = classes[ className ];\n  }\n};\n\nRekord.clear = function(removeListeners)\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    classes[ className ].clear( removeListeners );\n  }\n};\n\nRekord.reset = function(failOnPendingChanges, removeListeners)\n{\n  var classes = Rekord.classes;\n\n  if ( failOnPendingChanges )\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      if ( db.hasPending() )\n      {\n        return Promise.reject( db );\n      }\n    }\n  }\n\n  return Promise.singularity(this, function()\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      db.reset( false, removeListeners );\n    }\n  });\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\n\nRekord.isOnline = function()\n{\n  return !win.navigator || win.navigator.onLine !== false;\n};\n\nRekord.online = Rekord.isOnline();\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (win.addEventListener)\n  {\n    win.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    win.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    win.document.body.ononline = Rekord.setOnline;\n    win.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = Rekord.isOnline();\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.modelsCached = this.models = ModelCollection.create( this );\n  this.allCached = this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n  this.context = null;\n  this.contextIndex = -1;\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      if ( isString( relationOptions ) )\n      {\n        relationOptions = {\n          model: relationOptions\n        };\n      }\n      else if ( !isObject( relationOptions ) )\n      {\n        relationOptions = {};\n      }\n\n      if ( !relationOptions.model && !relationOptions.discriminator )\n      {\n        relationOptions.model = name;\n      }\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n\n  // Projections\n  for (var projectionName in this.projections)\n  {\n    this.projections[ projectionName ] = Projection.parse( this, projectionName );\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  saveAlways:           [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  noReferences:         false,\n  encodings:            {},\n  decodings:            {},\n  projections:          {},\n  prune:                {active: false, max: 0, keepAlive: 0, removeLocal: false},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nClass.create( Database,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  clearAll: function()\n  {\n    var db = this;\n\n    if (db.context)\n    {\n      db.context.clear( this );\n    }\n    else\n    {\n      db.allCached = db.all = {};\n    }\n  },\n\n  clear: function(removeListeners)\n  {\n    var db = this;\n\n    db.clearAll();\n    db.models.clear();\n\n    if ( removeListeners )\n    {\n      db.off();\n    }\n\n    return db;\n  },\n\n  hasPending: function()\n  {\n    return this.models.contains(function(model)\n    {\n      return model.$isPending();\n    });\n  },\n\n  reset: function(failOnPendingChanges, removeListeners)\n  {\n    var db = this;\n    var promise = new Rekord.Promise();\n\n    if ( failOnPendingChanges && db.hasPending() )\n    {\n      promise.reject( db );\n    }\n    else\n    {\n      db.clear( removeListeners );\n\n      db.store.reset( [], [],\n        function()\n        {\n          promise.resolve( db );\n        },\n        function()\n        {\n          promise.reject( db );\n        }\n      );\n    }\n\n    return promise;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.clearAll();\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.addReference( models[ i ], keys[ i ] );\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.addReference( model, key );\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.saveReference( model, key );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    this.pruneModel( model, modelKey );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, this, model );\n  },\n\n  pruneModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    db.removeReference( key );\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n  },\n\n  removeReference: function(key)\n  {\n    delete this.all[ key ];\n  },\n\n  hasPruning: function()\n  {\n    return this.prune.max || this.prune.keepAlive;\n  },\n\n  pruneModels: function()\n  {\n    var db = this;\n    var prune = db.prune;\n    var models = db.models;\n\n    if (prune.max || prune.keepAlive)\n    {\n      if (prune.active)\n      {\n        var youngestAllowed = now() - prune.keepAlive;\n\n        var pruneModel = function(model)\n        {\n          if (prune.removeLocal)\n          {\n            model.$remove( Cascade.Local );\n          }\n          else\n          {\n            db.pruneModel( model );\n          }\n        };\n\n        var isTooYoung = function(model)\n        {\n          return model.$touched <= youngestAllowed;\n        };\n\n        while ( prune.max && models.length > prune.max )\n        {\n          var youngest = models.minModel('$touched');\n\n          if (youngest)\n          {\n            pruneModel( youngest );\n          }\n        }\n\n        if ( prune.keepAlive )\n        {\n          models.eachWhere( pruneModel, isTooYoung );\n        }\n      }\n    }\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.saveReference( model, key, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.addReference( model, key );\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model, key)\n  {\n    if (!this.noReferences)\n    {\n      this.all[ key || model.$key() ] = model;\n    }\n  },\n\n  saveReference: function(model, key, delaySort)\n  {\n    if ( !this.noReferences )\n    {\n      this.models.put( key || model.$key(), model, delaySort );\n    }\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database );\n\naddEventFunction( Database, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  Class.prop( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nClass.create( Model,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    Class.props(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false,\n      $touched: now()\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        Class.prop( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.addReference( this, key );\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.addReference( this, key );\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $sync: function(prop, removeUnrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.sync( this, removeUnrelated );\n    }\n  },\n\n  $relate: function(prop, relate, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate, remoteData );\n    }\n  },\n\n  $unrelate: function(prop, unrelated, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated, remoteData );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$touch();\n\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$db.pruneModels();\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      db.removeReference( oldKey );\n      db.addReference( this, newKey );\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $touch: function()\n  {\n    if ( this.$db.hasPruning() )\n    {\n      this.$touched = now();\n    }\n  },\n\n  $project: function(projectionInput)\n  {\n    var projection = Projection.parse( this.$db, projectionInput );\n\n    return projection.project( this );\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model, true );\n\naddEventFunction( Model, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nClass.create( Map,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nClass.create( Dependents,\n{\n\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n});\n\n\n// field\n// relation.field\n// relations[pluckValue]\n// relations?savedWhere[pluckValue]\n// relations{pluckKey: pluckValue}\n// relation(subprojection)\n// relations(subprojection)\n// relations?savedWhere(subprojection)\n// expression|filter\n// expression?savedWhere\n// alias:expression\n// expression#resolve\n\nfunction Projection(database, input)\n{\n  this.database = database;\n  this.input = input;\n  this.projections = {};\n\n  for (var i = 0; i < input.length; i++)\n  {\n    this.addProjection( input[ i ] );\n  }\n}\n\nClass.create( Projection,\n{\n\n  addProjection: function(input)\n  {\n    var projection = this;\n    var alias = input;\n    var aliasIndex = input.indexOf( Projection.ALIAS_DELIMITER );\n\n    if (aliasIndex > 0)\n    {\n      alias = input.substring( 0, aliasIndex );\n      input = input.substring( aliasIndex + 1 );\n    }\n\n    var word = '';\n    var words = [];\n    var tokens = ['property'];\n    var types = [this.database];\n    var i = 0;\n    var resolvers = [];\n\n    var processWord = function(word)\n    {\n      if (!word)\n      {\n        return;\n      }\n\n      var token = tokens[0];\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      words.unshift( word );\n\n      if (handler && handler.post)\n      {\n        resolvers.push( handler.post( words, tokens, types, projection ) );\n      }\n    };\n\n    var processToken = function(token)\n    {\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      tokens.unshift( token );\n\n      if (handler && handler.pre)\n      {\n        resolvers.push( handler.pre( words, tokens, types, projection ) );\n      }\n    };\n\n    for (var i = 0; i < input.length; i++)\n    {\n      var c = input.charAt( i );\n      var token = Projection.TOKENS[ c ];\n\n      if (token)\n      {\n        processWord( word );\n        processToken( token );\n\n        word = '';\n      }\n      else\n      {\n        word += c;\n      }\n    }\n\n    processWord( word );\n\n    var resolver = function(value) {\n      return value;\n    };\n\n    for (var i = resolvers.length - 1; i >= 0; i--) {\n      resolver = resolvers[ i ]( resolver );\n    }\n\n    this.projections[ alias ] = resolver;\n  },\n\n  project: function(model)\n  {\n    var out = {};\n\n    for (var alias in this.projections)\n    {\n      out[ alias ] = this.projections[ alias ]( model );\n    }\n\n    return out;\n  }\n\n});\n\nProjection.TOKENS =\n{\n  '.': 'property',\n  '?': 'where',\n  '|': 'filter',\n  '#': 'resolve',\n  '(': 'subStart',\n  ')': 'subEnd',\n  '[': 'pluckValueStart',\n  ']': 'pluckValueEnd',\n  '{': 'pluckObjectStart',\n  ':': 'pluckObjectDelimiter',\n  '}': 'pluckObjectEnd'\n};\n\nProjection.TOKEN_HANDLER =\n{\n  property: {\n    post: function(words, tokens, types, projection) {\n      var propertyName = words[0];\n      var sourceType = types[0];\n      if (!(sourceType instanceof Database)) {\n        throw ('The property ' + propertyName + ' can only be taken from a Model');\n      }\n      var relation = sourceType.relations[ propertyName ];\n      if (relation) {\n        if (relation instanceof RelationSingle) {\n          types.unshift( relation.model.Database );\n        } else {\n          types.unshift( relation );\n        }\n      }\n      var fieldIndex = indexOf( sourceType.fields, propertyName );\n      if (fieldIndex === false && !relation) {\n        throw ('The property ' + propertyName + ' does not exist as a field or relation on the Model ' + sourceType.name );\n      }\n      return function(resolver) {\n        return function(model) {\n          if ( !isValue( model ) ) {\n            return null;\n          }\n          return resolver( model.$get( propertyName ) );\n        };\n      };\n    }\n  },\n  filter: {\n    post: function(words, tokens, types, projection) {\n      var filterName = words[0];\n      var filter = Rekord.Filters[ filterName ];\n      if (!filter) {\n        throw (filterName + ' is not a valid filter function');\n      }\n      return function(resolver) {\n        return function(value) {\n          if ( !isValue( value ) ) {\n            return null;\n          }\n          return resolver( filter( value ) );\n        };\n      };\n    }\n  },\n  resolve: {\n    post: function(words, tokens, types, projection) {\n      var resolveName = words[0];\n      return function(resolver) {\n        return function(source) {\n          if ( !isValue( source ) ) {\n            return null;\n          }\n          var value = source[ resolveName ];\n          if ( isFunction( value ) ) {\n            value = value.apply( source );\n          }\n          return resolver( value );\n        };\n      };\n    }\n  },\n  where: {\n    post: function(words, tokens, types, projection) {\n      var whereName = words[0];\n      var whereFrom = types[0];\n      var where = Rekord.Wheres[ whereName ];\n      if (!where) {\n        throw (whereName + ' is not a valid where expression');\n      }\n      if (!(whereFrom instanceof RelationMultiple)) {\n        throw (whereName + ' where expressions can only be used on relations');\n      }\n      return function(resolver) {\n        return function(relation) {\n          if ( !isValue( relation ) ) {\n            return null;\n          }\n          return resolver( relation.where( where ) );\n        };\n      };\n    }\n  },\n  subEnd: {\n    pre: function(words, tokens, types, projection) {\n      var projectionName = words[0];\n      var whereFrom = types[0];\n      if (tokens[1] !== 'subStart') {\n        throw ('Sub projection syntax error, an ending ) requires a starting (');\n      }\n      if (!(whereFrom instanceof Relation)) {\n        throw ('Sub projections like ' + projectionName + ' from ' + words[1] + ' can only be used on relations');\n      }\n      if (!whereFrom.model.Database.projections[ projectionName ]) {\n        throw ('The projection ' + projectionName + ' does not exist on ' + whereFrom.model.Database.name);\n      }\n      if (whereFrom instanceof RelationSingle) {\n        return function(resolver) {\n          return function (relation) {\n            if ( !isValue( relation ) ) {\n              return null;\n            }\n            return resolver( relation.$project( projectionName ) );\n          };\n        };\n      } else {\n        return function(resolver) {\n          return function(relations) {\n            if ( !isValue( relations ) ) {\n              return null;\n            }\n            return resolver( relations.project( projectionName ) );\n          };\n        };\n      }\n    }\n  },\n  pluckValueEnd: {\n    pre: function(words, tokens, types, projection) {\n      var properties = words[0];\n      var whereFrom = types[0];\n      if (tokens[1] !== 'pluckValueStart') {\n        throw ('Pluck value syntax error, an ending ] requires a starting [');\n      }\n      if (!(whereFrom instanceof RelationMultiple)) {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n      return function (resolver) {\n        return function (relations) {\n          if ( !isValue( relations ) ) {\n            return null;\n          }\n          return resolver( relations.pluck( properties ) );\n        };\n      };\n    }\n  },\n  pluckObjectEnd: {\n    pre: function(words, tokens, types, projection) {\n      var properties = words[0];\n      var keys = words[1];\n      var whereFrom = types[0];\n      if (tokens[1] !== 'pluckObjectDelimiter' || tokens[2] !== 'pluckObjectStart') {\n        throw ('Pluck object syntax error, must be {key: value}');\n      }\n      if (!(whereFrom instanceof RelationMultiple)) {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n      return function (resolver) {\n        return function (relations) {\n          if ( !isValue( relations ) ) {\n            return null;\n          }\n          return resolver( relations.pluck( properties, keys ) );\n        };\n      };\n    }\n  }\n};\n\nProjection.ALIAS_DELIMITER = ':';\n\nProjection.parse = function(database, input)\n{\n  var originalInput = input;\n\n  if ( isString( input ) )\n  {\n    input = database.projections[ input ];\n  }\n\n  if ( isArray( input ) )\n  {\n    input = new Projection( database, input );\n  }\n\n  if (!(input instanceof Projection))\n  {\n    throw (originalInput + ' is not a valid projection');\n  }\n\n  return input;\n};\n\n\nfunction Context(models)\n{\n  this.databases = [];\n  this.alls = [];\n  this.models = [];\n\n  var classes = Rekord.classes;\n\n  if ( isEmpty( models ) )\n  {\n    for (var name in classes)\n    {\n      this.add( classes[ name ].Database );\n    }\n  }\n  else if ( isArray( models ) )\n  {\n    for (var i = 0; i < models.length; i++)\n    {\n      this.add( classes[ models[ i ] ].Database );\n    }\n  }\n}\n\nContext.start = function(models)\n{\n  var context = new Context( models );\n\n  context.apply();\n\n  return context;\n};\n\nClass.create( Context,\n{\n\n  add: function(db)\n  {\n    this.databases.push( db );\n    this.alls.push( {} );\n    this.models.push( new ModelCollection( db ) );\n  },\n\n  getApplied: function()\n  {\n    var applied = 0;\n\n    this.each(function(db)\n    {\n      if (db.context === this)\n      {\n        applied++;\n      }\n    });\n\n    return applied / this.databases.length;\n  },\n\n  apply: function()\n  {\n    this.each( this.applyDatabase );\n  },\n\n  applyDatabase: function(db, all, models, i)\n  {\n    db.all = all;\n    db.models = models;\n    db.context = this;\n    db.contextIndex = i;\n  },\n\n  discard: function()\n  {\n    this.each( this.discardDatabase );\n  },\n\n  discardDatabase: function(db)\n  {\n    if (db.context === this)\n    {\n      db.all = db.allCached;\n      db.models = db.modelsCached;\n      db.context = null;\n      db.contextIndex = -1;\n    }\n  },\n\n  destroy: function()\n  {\n    this.each( this.destroyDatabase );\n\n    this.databases.length = 0;\n    this.alls.length = 0;\n    this.models.length = 0;\n  },\n\n  destroyDatabase: function(db, alls, models, i)\n  {\n    this.discardDatabase( db );\n\n    this.databases[ i ] = null;\n    this.alls[ i ] = null;\n    this.models[ i ].clear();\n    this.models[ i ] = null;\n  },\n\n  clear: function(db)\n  {\n    this.alls[ db.contextIndex ] = {};\n  },\n\n  each: function(iterator)\n  {\n    var dbs = this.databases;\n    var alls = this.alls;\n    var models = this.models;\n\n    for (var i = 0; i < dbs.length; i++)\n    {\n      iterator.call( this, dbs[ i ], alls[ i ], models[ i ], i );\n    }\n  }\n\n});\n\n\nfunction KeyHandler()\n{\n\n}\n\nClass.create( KeyHandler,\n{\n\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n\n});\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nClass.extend( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredCollection.create( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return this.constructor.create( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return this.constructor.create();\n  }\n\n});\n\naddEventful( Collection );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    Class.props(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      Class.prop( this, 'base', base );\n\n      this.connect();\n    }\n\n    Class.prop( this, 'filter', filter );\n\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nClass.extend( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page );\n\naddEventFunction( Page, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nClass.extend( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    Class.props(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredModelCollection.create( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  // TODO\n  project: function(projectionInput, out)\n  {\n    var target = out || [];\n    var projection = Projection.parse( this.database, projectionInput );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      target.push( projection.project( this[ i ] ) );\n    }\n\n    return target;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return ModelCollection.create( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return ModelCollection.create( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    Class.props(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  Class.props(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nClass.extend( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input, remoteData)\n  {\n    this.relator.set( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input, remoteData)\n  {\n    this.relator.relate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input, remoteData)\n  {\n    this.relator.unrelate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Syncrhonizes the related models in this collection by re-evaluating all\n   * models for a relationship.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {boolean} [removeUnrelated=false] -\n   *    Whether to remove models that are no longer related. The $remove\n   *    function is not called on these models.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  sync: function(removeUnrelated)\n  {\n    this.relator.sync( this.model, removeUnrelated );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  Class.props( collection,\n  {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  Class.props( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nClass.create( Search,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    Class.prop( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = ModelCollection.create( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nClass.extend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n\n  Class.prop( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nClass.create( Promise,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise );\n\n\nfunction Operation()\n{\n}\n\nClass.create( Operation,\n{\n\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    db.removeReference( key );\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : this.grabAlways( db.saveAlways, changes, remote );\n    var publish = db.fullPublish ? remote : this.grabAlways( db.publishAlways, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  grabAlways: function(always, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( always.length )\n    {\n      for (var i = 0; i < always.length; i++)\n      {\n        var prop = always[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.create( Relation,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      Class.props( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return RelationCollection.create( this.model.Database, model, this );\n  },\n\n  createCollection: function(initial)\n  {\n    return ModelCollection.create( this.model.Database, initial );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\nClass.extend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear && !remoteData )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false || ignoreLoaded )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\nClass.extend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending || ignoreLoaded )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.populateInitial( initialValue, relation, model );\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  populateInitial: function(initialValue, relation, model)\n  {\n    if ( isObject( initialValue ) && relation.child )\n    {\n      var src = toArray( this.local );\n      var dst = toArray( this.model.Database.key );\n\n      for (var k = 0; k < src.length; k++)\n      {\n        initialValue[ dst[ k ] ] = model[ src[ k ] ];\n      }\n    }\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.populateInitial( relatedValue, relation, model );\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.related;\n      var remoteData = true;\n      var dontClear = true;\n      var relator = this;\n\n      var onRelated = function(related)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( related );\n\n          existing.each(function(existingModel)\n          {\n            if ( !given.has( existingModel.$key() ) )\n            {\n              relator.removeModel( relation, existingModel, remoteData, dontClear );\n            }\n          });\n        }\n      };\n\n      this.ready( this.handleLazyLoad( relation, onRelated ) );\n    }\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, related );\n      }\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, relator, model, this, relation );\n\n        relator.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var throughDatabase = this.through.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.throughs.values;\n      var remoteData = true;\n      var relator = this;\n\n      var onRelated = function(throughs)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( throughs );\n\n          for (var i = 0; i < existing.length; i++)\n          {\n            var existingThrough = existing[ i ];\n\n            if ( !given.has( existingThrough.$key() ) )\n            {\n              relator.removeModelFromThrough( relation, existingThrough, remoteData );\n            }\n          }\n        }\n      };\n\n      throughDatabase.ready( this.handleLazyLoad( relation, onRelated ), this );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, throughs );\n      }\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related && ( !this.where || this.where( related ) ) )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through, undefined, undefined, remoteData ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey, remoteData );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey, remoteData)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  where:                false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nClass.extend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, true );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nClass.extend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nClass.extend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( RelationCollection.create( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( ModelCollection.create(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    Class.props( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nClass.create( Shard,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n  \n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.array = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.native( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model at the given index.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.at( 0 ); // t0\n   * ```\n   *\n   * @method at\n   * @memberof Rekord.Model\n   * @param {Number} index -\n   *    The index of the model to return.\n   * @return {Rekord.Model} -\n   *    The reference to the model at the given index.\n   */\n  model.at = function(index)\n  {\n    return db.models[ index ];\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return ModelCollection.create( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  \n  model.clear = function(removeListeners)\n  {\n    return db.clear( removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.create( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      Class.replace( model, '$init', function($init)\n      {\n        return function()\n        {\n          $init.apply( this, arguments );\n\n          applyEventListeners( this, modelEvents );\n        };\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return win.File && win.FileReader && win.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof win.File )\n  {\n    return input;\n  }\n  else if ( input instanceof win.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof win.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in win.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new win.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\naddPlugin(function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\naddPlugin( function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  Class.method( Map, 'put', mapKeyChangePut );\n  Class.method( Map, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  Class.method( Map, 'put', Map_put );\n  Class.method( Map, 'remove', Map_remove );\n}\n\naddPlugin(function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    Class.methods( model, methods );\n  }\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.projection = function(projectionInput)\n  {\n    return Projection.parse( db, projectionInput );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.reset = function(failOnPendingChanges, removeListeners)\n  {\n    return db.reset( failOnPendingChanges, removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.searchAt = function(index, url, paging, options, props, success, failure)\n  {\n    var page = {page_index: index, page_size: 1};\n\n    var search = paging ?\n      new SearchPaged( db, url, collapse( options, page ), props ) :\n      new Search( db, url, options, props );\n\n    var promise = new Rekord.Promise();\n\n    promise.success( success );\n    promise.failure( failure );\n\n    search.$run().then(\n      function onSuccess(search, response, results) {\n        promise.resolve( results[ paging ? 0 : index ] );\n      },\n      function onFailure() {\n        promise.reject();\n      },\n      function onOffline() {\n        promise.noline();\n      }\n    );\n\n    return promise;\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n  \n}, true );\n\naddPlugin(function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    Class.replace( model, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\naddPlugin(function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n  Rekord.Context = Context;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Projections */\n  Rekord.Filters = {};\n  Rekord.Projection = Projection;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n  Rekord.addPlugin = addPlugin;\n  Rekord.now = now;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.array = collectArray;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.Settings = Settings;\n  Rekord.Class = Class;\n  Rekord.extend = Class.extend;\n  Rekord.extendArray = Class.extend;\n  Rekord.addMethod = Rekord.setProperty = Class.prop;\n  Rekord.addMethods = Rekord.setProperties = Class.props;\n  Rekord.replaceMethod = Class.replace;\n  Rekord.copyConstructor = Class.copyConstructor;\n  Rekord.factory = Class.factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}