{"version":3,"sources":["header.js","functions.js","eventize.js","Rekord.js","dynamic.js","events.js","files.js","Gate.js","Database.js","Model.js","Map.js","Request.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Query.js","RemoteQuery.js","Search.js","SearchPaged.js","Transaction.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","find.js","get.js","grab.js","grabAll.js","methods.js","query.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","where.js","debug.js","rest.js","store.js","live.js","offline.js","Polymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isRekord","Database","prototype","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","equals","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","transfer","factory","args","this","extendArray","extendArraySupported","create","created","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","target","options","defaults","secret","defaultValue","option","valued","copy","$options","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","Collection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","clean","cleanFunctions","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","value","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","$on","$once","$after","$off","$trigger","cache","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","RemoteSave","$addOperation","SaveLocal","Cascade","Local","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","Map","indices","Request","failure","callCanceled","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","remoteData","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Query","whereProperties","whereValue","whereEquals","onModelAdd","handleModelAdded","onModelRemoved","handleModelRemoved","onModelUpdated","handleModelUpdated","connect","setWhere","RemoteQuery","query","status","Status","Success","request","handleSuccess","handleFailure","Search","SearchPaged","Transaction","cascade","operation","completed","operations","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkRekord","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","methods","text","dataURL","base64","resource","capacity","size","types","fileToValue","find","firstWhere","grabModel","grabAll","ready","q","sync","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","encoded","update","remove","put","record","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","resolveModel","resolveModels","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","overwrite","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$change","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","onSuccess","handleCall","onFailure","currentCall","cancel","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","setPageSize","setPageIndex","disconnect","goto","actualIndex","next","prev","jump","forceApply","changes","end","setFilter","onClear","updates","inputs","rebuild","callRemove","avoidSave","updateWhere","Failure","Ready","setQuery","skipSync","clearPending","error","$method","$results","$request","$handleSuccess","$handleFailure","$run","$encode","$ready","$success","$failure","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","page_size","$setPageSize","$getPageSize","page_index","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","remoteQuery","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n/**\n * A function for comparing two values to determine if one is greater or lesser\n * than the other or if they're equal.\n *\n * ```javascript\n * comparisonCallback( a, b ) < 0 // a < b\n * comparisonCallback( a, b ) > 0 // a > b\n * comparisonCallback( a, b ) == 0 // a == b\n * ```\n *\n * @callback comparisonCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Number} -\n *    0 if the two values are considered equal, a negative value if `a` is\n *    considered less than `b`, and a positive value if `a` is considered\n *    greater than `b`.\n * @see Rekord.compare\n * @see Rekord.compareNumbers\n */\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n var AP = Array.prototype;\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent()\n  // Copy new methods into child prototype\n  transfer( override, child.prototype )\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      target[ prop ] = options[ prop ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nRekord.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Rekord.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Rekord.Comparators )\n    {\n      return Rekord.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nRekord.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Rekord.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Rekord.NumberResolvers )\n  {\n    return Rekord.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nRekord.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Rekord.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.PropertyResolvers )\n    {\n      return Rekord.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model[ properties ];\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nRekord.Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Rekord.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.Wheres )\n    {\n      return Rekord.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nRekord.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Rekord.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Rekord.Havings )\n    {\n      return Rekord.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  target[ functionName ] = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   *\n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   *\n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    target.$on = on;\n    target.$once = once;\n    target.$after = after;\n    target.$off = off;\n    target.$trigger = trigger;\n  }\n  else\n  {\n    target.on = on;\n    target.once = once;\n    target.after = after;\n    target.off = off;\n    target.trigger = trigger;\n  }\n};\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  if ( options.name in Rekord.cache )\n  {\n    return Rekord.cache[ options.name ];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  Rekord.cache[ database.name ] = model;\n  Rekord.cache[ database.className ] = model;\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.trigger( Rekord.Events.Initialized, [model] );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nRekord.cache = {};\n\nRekord.get = function(name, callback, context)\n{\n  var cached = Rekord.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkRekord()\n      {\n        var cached = Rekord.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Rekord.on( Rekord.Events.Initialized, checkRekord );\n    }\n  }\n\n  return cached;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\neventize( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nRekord.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nRekord.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nRekord.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nRekord.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Rekord.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Rekord.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nDatabase.prototype =\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n    else\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( Database.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Rekord.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Rekord.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( Database.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Rekord.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( Database.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( Database.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( Database.Events.NoLoad, [db, response] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( GetLocal, cascade );\n  }\n\n};\n\neventize( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nModel.prototype =\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Rekord.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Rekord.transactNone( cascade, this, 'save' );\n    }\n\n    return Rekord.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Rekord.transactNone( cascade, this, 'remove' );\n    }\n\n    return Rekord.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $change: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n};\n\neventize( Model.prototype, true );\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};\n","\nfunction Request(context, success, failure)\n{\n  this.context = context;\n  this.success = success;\n  this.failure = failure;\n  this.call = 0;\n  this.callCanceled = 0;\n}\n\nRequest.prototype =\n{\n\n  onSuccess: function()\n  {\n    return this.handleCall( this, ++this.call, this.success );\n  },\n\n  onFailure: function()\n  {\n    return this.handleCall( this, this.call, this.failure );\n  },\n\n  handleCall: function(request, currentCall, callback)\n  {\n    return function onHandleCall()\n    {\n      if ( request.call === currentCall &&\n           currentCall > request.callCanceled &&\n           isFunction( callback ) )\n      {\n        callback.apply( request.context, arguments );\n      }\n    };\n  },\n\n  cancel: function()\n  {\n    this.callCanceled = this.call;\n  }\n\n};\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   * @see Rekord.Query#sync\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.splice.call( arguments, 0, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      var n = this.length;\n      var half = Math.floor( n / 2 );\n\n      for (var i = 0; i < half; i++)\n      {\n        var k = n - i - 1;\n        var a = this[ i ];\n        this[ i ] = this[ k ];\n        this[ k ] = a;\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\neventize( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","function Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = length;\n\n    for (var i = 0; i < length; i++)\n    {\n      this[ i ] = source[ start++ ];\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.onAdd      = bind( this, this.handleAdd );\n  this.onAdds     = bind( this, this.handleAdds );\n  this.onRemove   = bind( this, this.handleRemove );\n  this.onRemoves  = bind( this, this.handleRemoves );\n  this.onReset    = bind( this, this.handleReset );\n  this.onUpdates  = bind( this, this.handleUpdates );\n  this.onCleared  = bind( this, this.handleCleared );\n\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n\n    this.length = 0;\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        this.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n\n    return this;\n  },\n\n  /**\n   * Responds to the {@link Rekord.Collection#event:add} event.\n   */\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  /**\n   * Responds to the {@link Rekord.Collection#event:adds} event.\n   */\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  /**\n   * Responds to the {@link Rekord.Collection#event:remove} event.\n   */\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  /**\n   * Responds to the {@link Rekord.Collection#event:removes} event.\n   */\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  /**\n   * Responds to the {@link Rekord.Collection#event:reset} event.\n   */\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  /**\n   * Responds to the {@link Rekord.Collection#event:updates} event.\n   */\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  /**\n   * Responds to the {@link Rekord.Collection#event:cleared} event.\n   */\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort)\n  {\n    var model = this.parseModel( input );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ] );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !autoSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new ModelCollection( this.database, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  /**\n   * Builds a key from input. Discriminated collections only accept objects as\n   * input - otherwise there's no way to determine the discriminator. If the\n   * discriminator on the input doesn't map to a Rekord instance OR the input\n   * is not an object the input will be returned instead of a model instance.\n   *\n   * @param {modelInput} input -\n   *    The input to create a key for.\n   * @return {Any} -\n   *    The built key or the given input if a key could not be built.\n   */\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n\n    return input;\n  };\n\n  /**\n   * Takes input and returns a model instance. The input is expected to be an\n   * object, any other type will return null.\n   *\n   * @param {modelInput} input -\n   *    The input to parse to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    Whether or not the input is coming from a remote source.\n   * @return {Rekord.Model} -\n   *    The model instance parsed or null if none was found.\n   */\n  collection.parseModel = function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n\n    var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  collection.clone = function()\n  {\n    return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n  };\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  collection.cloneEmpty = function()\n  {\n    return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n  };\n\n  return collection;\n}\n","function Query(database, whereProperties, whereValue, whereEquals)\n{\n  this.onModelAdd     = bind( this, this.handleModelAdded );\n  this.onModelRemoved = bind( this, this.handleModelRemoved );\n  this.onModelUpdated = bind( this, this.handleModelUpdated );\n\n  this.init( database );\n  this.connect();\n  this.setWhere( whereProperties, whereValue, whereEquals );\n}\n\nextendArray( ModelCollection, Query,\n{\n\n  setWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    this.where = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n  },\n\n  connect: function()\n  {\n    this.database.on( Database.Events.ModelAdded, this.onModelAdd );\n    this.database.on( Database.Events.ModelRemoved, this.onModelRemoved );\n    this.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  disconnect: function()\n  {\n    this.database.off( Database.Events.ModelAdded, this.onModelAdd );\n    this.database.off( Database.Events.ModelRemoved, this.onModelRemoved );\n    this.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n  },\n\n  sync: function()\n  {\n    var where = this.where;\n    var map = this.map;\n    var models = this.database.models;\n\n    map.reset();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var model = models[ i ];\n\n      if ( where( model ) )\n      {\n        map.put( model.$key(), model );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n  },\n\n  handleModelAdded: function(model, remoteData)\n  {\n    if ( this.where( model ) )\n    {\n      this.add( model );\n    }\n  },\n\n  handleModelRemoved: function(model)\n  {\n    this.remove( model );\n  },\n\n  handleModelUpdated: function(model, remoteData)\n  {\n    var key = model.$key();\n\n    if ( this.map.has( key ) )\n    {\n      if ( !this.where( model ) )\n      {\n        this.remove( model );\n      }\n    }\n    else\n    {\n      if ( this.where( model ) )\n      {\n        this.add( model );\n      }\n    }\n  }\n\n});\n","function RemoteQuery(database, query)\n{\n  this.init( database );\n  this.query = query;\n  this.status = RemoteQuery.Status.Success;\n  this.request = new Request( this, this.handleSuccess, this.handleFailure );\n}\n\nRemoteQuery.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nRemoteQuery.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nextendArray( Query, RemoteQuery,\n{\n\n  setQuery: function(query, skipSync, clearPending)\n  {\n    this.query = query;\n\n    if ( !skipSync )\n    {\n      this.sync( clearPending );\n    }\n\n    return this;\n  },\n\n  sync: function(clearPending)\n  {\n    this.status = RemoteQuery.Status.Pending;\n\n    if ( clearPending )\n    {\n      this.cancel();\n    }\n\n    this.database.rest.query( this.query, this.request.onSuccess(), this.request.onFailure() );\n\n    return this;\n  },\n\n  cancel: function()\n  {\n    this.off( RemoteQuery.Events.Ready );\n    this.off( RemoteQuery.Events.Success );\n    this.off( RemoteQuery.Events.Failure );\n\n    this.request.cancel();\n\n    return this;\n  },\n\n  ready: function(callback, context)\n  {\n    if ( this.status === RemoteQuery.Status.Pending )\n    {\n      this.once( RemoteQuery.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  success: function(callback, context)\n  {\n    if ( this.status === RemoteQuery.Status.Pending )\n    {\n      this.once( RemoteQuery.Events.Success, callback, context );\n    }\n    else if ( this.status === RemoteQuery.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  failure: function(callback, context)\n  {\n    if ( this.status === RemoteQuery.Status.Pending )\n    {\n      this.once( RemoteQuery.Events.Failure, callback, context );\n    }\n    else if ( this.status === RemoteQuery.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  parse: function(models)\n  {\n    return models;\n  },\n\n  handleSuccess: function(response)\n  {\n    var models = this.parse.apply( this, arguments );\n\n    this.status = RemoteQuery.Status.Success;\n    this.reset( models, true );\n    this.off( RemoteQuery.Events.Failure, this.onFailure );\n    this.trigger( RemoteQuery.Events.Ready, [this, response] );\n    this.trigger( RemoteQuery.Events.Success, [this, response] );\n  },\n\n  handleFailure: function(response, error)\n  {\n    this.status = RemoteQuery.Status.Failure;\n    this.off( RemoteQuery.Events.Success, this.onSuccess );\n    this.trigger( RemoteQuery.Events.Ready, [this, response] );\n    this.trigger( RemoteQuery.Events.Failure, [this, response] );\n  }\n\n});\n","\nfunction Search(database, options)\n{\n  this.$init( database, options );\n}\n\nSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Defaults =\n{\n  $method:     'create'\n};\n\nSearch.prototype =\n{\n\n  $init: function(database, options)\n  {\n    applyOptions( this, options, Search.Defaults, true );\n\n    this.$db = database;\n    this.$results = new ModelCollection( database );\n    this.$status = Search.Status.Success;\n    this.$request = new Request( this, this.$handleSuccess, this.$handleFailure );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n\n    this.$status = Search.Status.Pending;\n\n    var success = this.$request.onSuccess();\n    var failure = this.$request.onFailure();\n\n    switch (this.$method) {\n      case 'create':\n        this.$db.rest.create( this, encoded, success, failure );\n        break;\n      case 'update':\n        this.$db.rest.update( this, encoded, success, failure );\n        break;\n      case 'query':\n        this.$db.rest.query( encoded, success, failure );\n        break;\n      default:\n        throw 'Invalid search method: ' + this.$method;\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$off( Search.Events.Ready );\n    this.$off( Search.Events.Success );\n    this.$off( Search.Events.Failure );\n\n    this.$request.cancel();\n\n    return this;\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Success, callback, context );\n    }\n    else if ( this.$status === Search.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Failure, callback, context );\n    }\n    else if ( this.$status === Search.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(response)\n  {\n    var models = this.$decode.apply( this, arguments );\n\n    this.$status = Search.Status.Success;\n    this.$results.reset( models, true );\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Success, [this, response] );\n  },\n\n  $handleFailure: function(response)\n  {\n    this.$status = Search.Status.Failure;\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Failure, [this, response] );\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n};\n\neventize( Search.prototype, true );\n","\nfunction SearchPaged(database, options)\n{\n  this.$init( database, options );\n}\n\nextend( Search, SearchPaged,\n{\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nRekord.transaction = null;\n\nRekord.transact = function(cascade, model, operation, func)\n{\n  var transaction = Rekord.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Rekord.transaction = new Transaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Rekord.transaction = null;\n\n    return transaction;\n  }\n};\n\nRekord.transactNone = function(cascade, model, operation)\n{\n  return new Transaction( cascade, model, operation );\n};\n\nfunction Transaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\nTransaction.prototype =\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = Transaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = Transaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Rekord.Cascade.Rest )\n      {\n        this.status = Transaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Rekord.Cascade.Local )\n      {\n        this.status = Transaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = Transaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( Transaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n};\n\neventize( Transaction.prototype );\n","\nfunction Operation()\n{\n}\n\nOperation.prototype =\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n};\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Rekord.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Rekord.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Rekord.Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Rekord.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Rekord.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Rekord.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Rekord.Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Rekord.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Rekord.Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Rekord.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nRelation.prototype =\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( Polymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = this.model.query( query );\n\n    Rekord.debug( this.debugQuery, this, model, remoteQuery, queryOption, query );\n\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      Rekord.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      for (var i = 0; i < remoteQuery.length; i++)\n      {\n        this.relate( model, remoteQuery[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Rekord.Save.Model:\n        return related.$toJSON( true );\n\n      case Rekord.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Rekord.Save.Key:\n      case Rekord.Store.Key:\n        return related.$key();\n\n      case Rekord.Save.Keys:\n      case Rekord.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n};\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(remoteQuery)\n    {\n      var relation = model.$relations[ this.name ];\n\n      Rekord.debug( this.debugQueryResults, this, model, remoteQuery );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < remoteQuery.length; i++)\n        {\n          this.addModel( relation, remoteQuery[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Rekord.Store.Model || this.save === Rekord.Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.Local,\n  cascadeSave:          Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.NoRest,\n  cascadeSave:          Rekord.Cascade.All,\n  cascadeSaveRelated:   Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Rekord.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    transfer( methods, shard );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nShard.prototype =\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( query, success, failure )\n  {\n    var shards = this.getShardsForQuery( query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      Array.prototype.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      var key = db.buildKeyFromInput( input );\n\n      return db.get( key );\n    }\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.query = function(query)\n  {\n    var q = new RemoteQuery( db, query );\n\n    if ( isValue( query ) )\n    {\n      q.sync();\n    }\n\n    return q;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.search = function(options)\n  {\n    return new Search( db, options );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.searchPaged = function(options)\n  {\n    return new SearchPaged( db, options );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || Database.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.where = function(whereProperties, whereValue, whereEquals)\n  {\n    return new Query( db, whereProperties, whereValue, whereEquals );\n  };\n});\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n  \n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n * \n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and \n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure) \n    { \n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     * \n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure) \n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     * \n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure) \n    {\n      success( [], [] );\n    }\n\n  };\n\n};","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n * \n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var remoteQuery = new RemoteQuery( model.$db, query );\n\n    DiscriminateCollection( remoteQuery, this.discriminator, this.discriminatorToModel );\n\n    remoteQuery.sync();\n    remoteQuery.ready( this.handleExecuteQuery( model ), this );\n\n    return remoteQuery;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  global.Rekord.Model = Model;\n  global.Rekord.Database = Database;\n  global.Rekord.Relation = Relation;\n  global.Rekord.Operation = Operation;\n  global.Rekord.Transaction = Transaction;\n  global.Rekord.Search = Search;\n  global.Rekord.SearchPaged = SearchPaged;\n\n  /* Collections */\n  global.Rekord.Map = Map;\n  global.Rekord.Collection = Collection;\n  global.Rekord.FilteredCollection = FilteredCollection;\n  global.Rekord.ModelCollection = ModelCollection;\n  global.Rekord.Query = Query;\n  global.Rekord.RemoteQuery = RemoteQuery;\n  global.Rekord.Page = Page;\n\n  /* Relationships */\n  global.Rekord.HasOne = HasOne;\n  global.Rekord.BelongsTo = BelongsTo;\n  global.Rekord.HasMany = HasMany;\n  global.Rekord.HasManyThrough = HasManyThrough;\n  global.Rekord.HasRemote = HasRemote;\n\n  /* Utility Functions */\n  global.Rekord.isRekord = isRekord;\n  global.Rekord.isDefined = isDefined;\n  global.Rekord.isFunction = isFunction;\n  global.Rekord.isString = isString;\n  global.Rekord.isNumber = isNumber;\n  global.Rekord.isBoolean = isBoolean;\n  global.Rekord.isDate = isDate;\n  global.Rekord.isRegExp = isRegExp;\n  global.Rekord.isArray = isArray;\n  global.Rekord.isObject = isObject;\n  global.Rekord.isValue = isValue;\n\n  global.Rekord.uuid = uuid;\n  global.Rekord.indexOf = indexOf;\n  global.Rekord.propsMatch = propsMatch;\n  global.Rekord.hasFields = hasFields;\n  global.Rekord.toArray = toArray;\n\n  global.Rekord.eventize = eventize;\n\n  global.Rekord.extend = extend;\n  global.Rekord.extendArray = extendArray;\n  global.Rekord.copyConstructor = copyConstructor;\n  global.Rekord.factory = factory;\n\n  global.Rekord.transfer = transfer;\n  global.Rekord.collapse = collapse;\n  global.Rekord.swap = swap;\n  global.Rekord.grab = grab;\n  global.Rekord.pull = pull;\n  global.Rekord.copy = copy;\n  global.Rekord.noop = noop;\n  global.Rekord.bind = bind;\n  global.Rekord.diff = diff;\n  global.Rekord.sizeof = sizeof;\n  global.Rekord.isEmpty = isEmpty;\n  global.Rekord.collect = collect;\n  global.Rekord.applyOptions = applyOptions;\n  global.Rekord.toCamelCase = toCamelCase;\n  global.Rekord.evaluate = evaluate;\n\n  global.Rekord.clean = clean;\n  global.Rekord.cleanFunctions = cleanFunctions;\n\n  global.Rekord.compare = compare;\n  global.Rekord.equals = equals;\n  global.Rekord.equalsStrict = equalsStrict;\n  global.Rekord.equalsCompare = equalsCompare;\n\n  global.Rekord.isSorted = isSorted;\n  global.Rekord.saveComparator = saveComparator;\n  global.Rekord.createComparator = createComparator;\n  global.Rekord.addComparator = addComparator;\n\n  global.Rekord.saveWhere = saveWhere;\n  global.Rekord.createWhere = createWhere;\n\n  global.Rekord.savePropertyResolver = savePropertyResolver;\n  global.Rekord.createPropertyResolver = createPropertyResolver;\n\n  global.Rekord.saveNumberResolver = saveNumberResolver;\n  global.Rekord.createNumberResolver = createNumberResolver;\n\n  global.Rekord.saveHaving = saveHaving;\n  global.Rekord.createHaving = createHaving;\n\n  global.Rekord.parse = parse;\n  global.Rekord.format = format;\n  global.Rekord.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}