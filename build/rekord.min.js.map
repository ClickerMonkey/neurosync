{"version":3,"sources":["rekord.min.js"],"names":["root","factory","define","amd","module","exports","global","Rekord","this","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","create","collectArray","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","isDefined","isFunction","constructor","apply","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","func","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","addPlugin","callback","beforeCreation","on","Events","Options","Plugins","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","target","functionName","events","secret","off","eventFunction","listener","result","subject","unlistener","unlistened","$methods","Class","method","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","push","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Error","methods","$on","$once","$after","$off","$trigger","props","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","copyValues","grabbed","p","pull","pulledValue","pulled","transfer","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","value","promise","get","isComplete","results","database","dynamic","className","classes","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","modelsCached","models","ModelCollection","allCached","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","contextIndex","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","discriminator","init","save","projectionName","projections","Projection","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","input","addProjection","Context","databases","alls","add","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","win","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","window","construct","build","extend","parent","override","parentCopy","copyConstructor","instanceFactory","nativeArray","Settings","parentInstance","code","DynamicClass","Function","propThis","methodThis","replaceThis","methodName","writable","propertyName","methodFactory","existingMethod","F","now","RekordSettings","document","currentScript","script","getAttribute","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","removeListeners","failOnPendingChanges","hasPending","singularity","Initialized","Online","Offline","Cache","None","All","NoLive","Live","NoRest","Remote","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","Save","Key","Keys","Store","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setLive","liveSet","isOnline","navigator","onLine","online","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","body","ononline","onoffline","checkNetworkStatus","setRest","restSet","put","record","records","setStore","storeSet","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","saveAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","noReferences","allOptions","fetchOptions","getOptions","updateOptions","createOptions","saveOptions","removeOptions","queryOptions","prune","active","max","keepAlive","removeLocal","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","clearAll","contains","$isPending","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","addReference","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","saveReference","createModel","$status","$invalid","destroyModel","modelKey","pruneModel","RemoteAndRemove","removeReference","hasPruning","pruneModels","youngestAllowed","$remove","isTooYoung","$touched","youngest","minModel","eachWhere","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","delaySort","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$sync","removeUnrelated","sync","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","$touch","$exists","$autoRefresh","callRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isSavedLocally","$isNew","$project","projectionInput","projection","project","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","$resumeOptions","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","alias","aliasIndex","ALIAS_DELIMITER","word","words","tokens","types","resolvers","processWord","token","TOKEN_HANDLER","unshift","post","processToken","pre","TOKENS",".","?","|","#","(",")","[","]","{",":","}","@","=","sourceType","fieldIndex","filterName","Filters","resolveName","whereName","whereFrom","aggregateProperty","aggregateFunction","aggregateFrom","subEnd","pluckValueEnd","pluck","pluckObjectEnd","originalInput","start","getApplied","applied","each","applyDatabase","discard","discardDatabase","destroy","destroyDatabase","iterator","dbs","buildKey","join","otherFields","akey","bkey","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","insertAt","removed","shift","removing","element","removeAll","removeWhere","deleteCount","adding","startingValue","min","maxModel","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","valuesResolver","keysResolver","callbackContext","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","grabAlways","publish","always","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","autoCascade","autoOptions","preserve","clearKey","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","initial","grabInitial","grabModels","pending","setProperty","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","ignoreLoaded","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","saveParentCascade","saveParentOptions","belongsTo","cascadeRemoveOptions","postRemove","onKeyUpdate","relatedValue","modelFields","relatedFields","hasOne","saveCascade","child","preSave","populateInitial","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","cascadeSaveOptions","onChange","postSave","preRemove","handleModelAdded","handleLazyLoad","onRelated","existingModel","relatedClones","hasManyThrough","through","cascadeSaveRelated","cascadeSaveRelatedOptions","cascadeRemoveThroughOptions","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","existingThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","fileToValue","find","findOrCreate","created","grabAll","persist","searchAt","paging","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","extendArray","addMethod","addMethods","replaceMethod"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.10 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define('rekord', [], function() { // jshint ignore:line\n      return factory(root);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global);  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root);\n  }\n}(this, function(global, undefined)\n{\n\n  var win = typeof window !== 'undefined' ? window : global;   // jshint ignore:line\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.create( values );\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collectArray(1, 2, 3, 4);\n * Rekord.collectArray([1, 2, 3, 4]); // same as above\n * Rekord.collectArray();\n * Rekord.collectArray([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collectArray(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.native( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\n// Class.create( construct, methods )\n// Class.extend( parent, construct, override )\n// Class.prop( target, name, value )\n// Class.props( target, properties )\n// Class.method( construct, methodName, method )\n// Class.method( construct, methods )\n// Class.replace( construct, methodName, methodFactory(super) )\n\n// constructor.create( ... )\n// constructor.native( ... ) // for arrays\n// constructor.$constuctor\n// constructor.prototype.$super\n// constructor.$methods\n// constructor.$prop( name, value ) // add to prototype\n// constructor.$method( methodName, method ) // add to prototype\n// constructor.$replace( methodName, methodFactory(super) )\n\nvar Class =\n{\n\n  create: function( construct, methods )\n  {\n    Class.prop( construct, 'create', Class.factory( construct ) );\n    Class.build( construct, methods, noop );\n  },\n\n  extend: function( parent, construct, override )\n  {\n    var methods = collapse( override, parent.$methods );\n    var parentCopy = Class.copyConstructor( parent );\n\n    construct.prototype = new parentCopy();\n\n    var instanceFactory = Class.factory( construct );\n\n    if ( Class.isArray( parent ) )\n    {\n      var nativeArray = function()\n      {\n        var arr = [];\n        Class.props( arr, methods );\n        construct.apply( arr, arguments );\n        return arr;\n      };\n\n      Class.prop( construct, 'native', nativeArray );\n      Class.prop( construct, 'create', Settings.nativeArray ? nativeArray : instanceFactory );\n    }\n    else\n    {\n      Class.prop( construct, 'create', instanceFactory );\n    }\n\n    Class.build( construct, methods, parent );\n  },\n\n  dynamic: function(parent, parentInstance, className, code)\n  {\n    var DynamicClass = new Function('return function ' + className + code)(); // jshint ignore:line\n\n    DynamicClass.prototype = parentInstance;\n\n    Class.build( DynamicClass, {}, parent );\n\n    return DynamicClass;\n  },\n\n  build: function(construct, methods, parent)\n  {\n    Class.prop( construct, '$methods', methods );\n    Class.prop( construct, '$prop', Class.propThis );\n    Class.prop( construct, '$method', Class.methodThis );\n    Class.prop( construct, '$replace', Class.replaceThis );\n    Class.prop( construct.prototype, '$super', parent );\n    Class.prop( construct.prototype, 'constructor', construct );\n    Class.props( construct.prototype, methods );\n  },\n\n  isArray: function( construct )\n  {\n    return Array === construct || construct.prototype instanceof Array;\n  },\n\n  method: function( construct, methodName, method )\n  {\n    if (construct.$methods)\n    {\n      construct.$methods[ methodName ] = method;\n    }\n\n    Class.prop( construct.prototype, methodName, method );\n  },\n\n  methodThis: function( methodName, method )\n  {\n    Class.method( this, methodName, method );\n  },\n\n  methods: function( construct, methods )\n  {\n    for (var methodName in methods)\n    {\n      Class.method( construct, methodName, methods[ methodName ] );\n    }\n  },\n\n  prop: (function()\n  {\n    if (Object.defineProperty)\n    {\n      return function( target, property, value )\n      {\n        Object.defineProperty( target, property, {\n          configurable: true,\n          enumerable: false,\n          writable: true,\n          value: value\n        });\n      };\n    }\n    else\n    {\n      return function( target, property, value )\n      {\n        target[ property ] = value;\n      };\n    }\n  })(),\n\n  propThis: function( property, value )\n  {\n    Class.prop( this.prototype, property, value );\n  },\n\n  props: function( target, properties )\n  {\n    for (var propertyName in properties)\n    {\n      Class.prop( target, propertyName, properties[ propertyName ] );\n    }\n  },\n\n  replace: function( target, methodName, methodFactory )\n  {\n    var existingMethod = target.prototype[ methodName ] || target[ methodName ] || noop;\n\n    Class.method( target, methodName, methodFactory( existingMethod ) );\n  },\n\n  replaceThis: function( methodName, methodFactory )\n  {\n    Class.replace( this, methodName, methodFactory );\n  },\n\n  copyConstructor: function(construct)\n  {\n    function F()\n    {\n\n    }\n\n    F.prototype = construct.prototype;\n\n    return F;\n  },\n\n  factory: function(construct)\n  {\n    function F(args)\n    {\n      construct.apply( this, args );\n    }\n\n    F.prototype = construct.prototype;\n\n    return function()\n    {\n      return new F( arguments );\n    };\n  }\n\n};\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nvar now = Date.now || function()\n{\n  return new Date().getTime();\n};\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\nfunction addPlugin( callback, beforeCreation )\n{\n  if ( beforeCreation )\n  {\n    return Rekord.on( Rekord.Events.Options, callback ); // (options)\n  }\n  else\n  {\n    return Rekord.on( Rekord.Events.Plugins, callback ); // (model, db, options)\n  }\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  var eventFunction = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n\n  if (target.$methods)\n  {\n    Class.method( target, functionName, eventFunction );\n  }\n  else\n  {\n    Class.prop( target, functionName, eventFunction );\n  }\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      Class.prop( $this, property, listeners = {} );\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  var methods = null;\n\n  if ( secret )\n  {\n    methods = {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    };\n  }\n  else\n  {\n    methods = {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    };\n  }\n\n  if ( target.$methods )\n  {\n    Class.methods( target, methods );\n  }\n  else\n  {\n    Class.props( target, methods );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nvar Settings = global.RekordSettings || win.RekordSettings || {};\n\nif ( win.document && win.document.currentScript )\n{\n  var script = win.document.currentScript;\n\n  if (script.getAttribute('native-array') !== null)\n  {\n    Settings.nativeArray = true;\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = Class.dynamic(\n    Model,\n    new Model( database ),\n    database.className,\n    '(props, remoteData) { this.$init( props, remoteData ) }'\n  );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\nRekord.export = function()\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    win[ className ] = classes[ className ];\n  }\n};\n\nRekord.clear = function(removeListeners)\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    classes[ className ].clear( removeListeners );\n  }\n};\n\nRekord.reset = function(failOnPendingChanges, removeListeners)\n{\n  var classes = Rekord.classes;\n\n  if ( failOnPendingChanges )\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      if ( db.hasPending() )\n      {\n        return Promise.reject( db );\n      }\n    }\n  }\n\n  return Promise.singularity(this, function()\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      db.reset( false, removeListeners );\n    }\n  });\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\n\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              options: options,\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              options: options,\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, options, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              options: options,\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\n\nRekord.isOnline = function()\n{\n  return !win.navigator || win.navigator.onLine !== false;\n};\n\nRekord.online = Rekord.isOnline();\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (win.addEventListener)\n  {\n    win.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    win.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    win.document.body.ononline = Rekord.setOnline;\n    win.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = Rekord.isOnline();\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( options, success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, options, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, options, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, options, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model,options,  success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, options, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.modelsCached = this.models = ModelCollection.create( this );\n  this.allCached = this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n  this.context = null;\n  this.contextIndex = -1;\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      if ( isString( relationOptions ) )\n      {\n        relationOptions = {\n          model: relationOptions\n        };\n      }\n      else if ( !isObject( relationOptions ) )\n      {\n        relationOptions = {};\n      }\n\n      if ( !relationOptions.model && !relationOptions.discriminator )\n      {\n        relationOptions.model = name;\n      }\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n\n  // Projections\n  for (var projectionName in this.projections)\n  {\n    this.projections[ projectionName ] = Projection.parse( this, projectionName );\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  saveAlways:           [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  noReferences:         false,\n  encodings:            {},\n  decodings:            {},\n  projections:          {},\n  allOptions:           null,\n  fetchOptions:         null,\n  getOptions:           null,\n  updateOptions:        null,\n  createOptions:        null,\n  saveOptions:          null,\n  removeOptions:        null,\n  queryOptions:         null,\n  prune:                {active: false, max: 0, keepAlive: 0, removeLocal: false},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nClass.create( Database,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  clearAll: function()\n  {\n    var db = this;\n\n    if (db.context)\n    {\n      db.context.clear( this );\n    }\n    else\n    {\n      db.allCached = db.all = {};\n    }\n  },\n\n  clear: function(removeListeners)\n  {\n    var db = this;\n\n    db.clearAll();\n    db.models.clear();\n\n    if ( removeListeners )\n    {\n      db.off();\n    }\n\n    return db;\n  },\n\n  hasPending: function()\n  {\n    return this.models.contains(function(model)\n    {\n      return model.$isPending();\n    });\n  },\n\n  reset: function(failOnPendingChanges, removeListeners)\n  {\n    var db = this;\n    var promise = new Rekord.Promise();\n\n    if ( failOnPendingChanges && db.hasPending() )\n    {\n      promise.reject( db );\n    }\n    else\n    {\n      db.clear( removeListeners );\n\n      db.store.reset( [], [],\n        function()\n        {\n          promise.resolve( db );\n        },\n        function()\n        {\n          promise.reject( db );\n        }\n      );\n    }\n\n    return promise;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh( Cascade.All, db.fetchOptions );\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.clearAll();\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.addReference( models[ i ], keys[ i ] );\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.addReference( model, key );\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.saveReference( model, key );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    this.pruneModel( model, modelKey );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, this, model );\n  },\n\n  pruneModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    db.removeReference( key );\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n  },\n\n  removeReference: function(key)\n  {\n    delete this.all[ key ];\n  },\n\n  hasPruning: function()\n  {\n    return this.prune.max || this.prune.keepAlive;\n  },\n\n  pruneModels: function()\n  {\n    var db = this;\n    var prune = db.prune;\n    var models = db.models;\n\n    if (prune.max || prune.keepAlive)\n    {\n      if (prune.active)\n      {\n        var youngestAllowed = now() - prune.keepAlive;\n\n        var pruneModel = function(model)\n        {\n          if (prune.removeLocal)\n          {\n            model.$remove( Cascade.Local );\n          }\n          else\n          {\n            db.pruneModel( model );\n          }\n        };\n\n        var isTooYoung = function(model)\n        {\n          return model.$touched <= youngestAllowed;\n        };\n\n        while ( prune.max && models.length > prune.max )\n        {\n          var youngest = models.minModel('$touched');\n\n          if (youngest)\n          {\n            pruneModel( youngest );\n          }\n        }\n\n        if ( prune.keepAlive )\n        {\n          models.eachWhere( pruneModel, isTooYoung );\n        }\n      }\n    }\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.saveReference( model, key, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.addReference( model, key );\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( this.allOptions, success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model, key)\n  {\n    if (!this.noReferences)\n    {\n      this.all[ key || model.$key() ] = model;\n    }\n  },\n\n  saveReference: function(model, key, delaySort)\n  {\n    if ( !this.noReferences )\n    {\n      this.models.put( key || model.$key(), model, delaySort );\n    }\n  },\n\n  // Save the model\n  save: function(model, cascade, options)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade, options );\n  },\n\n  // Remove the model\n  remove: function(model, cascade, options)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade, options );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database );\n\naddEventFunction( Database, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  Class.prop( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nClass.create( Model,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    Class.props(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false,\n      $touched: now()\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        Class.prop( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.addReference( this, key );\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.addReference( this, key );\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $sync: function(prop, removeUnrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.sync( this, removeUnrelated );\n    }\n  },\n\n  $relate: function(prop, relate, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate, remoteData );\n    }\n  },\n\n  $unrelate: function(prop, unrelated, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated, remoteData );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade, options)\n  {\n    if ( isObject( setProperties ) )\n    {\n      options = cascade;\n      cascade = setValue;\n      setValue = undefined;\n    }\n    else if ( isNumber( setProperties ) )\n    {\n      options = setValue;\n      cascade = setProperties;\n      setValue = undefined;\n      setProperties = undefined;\n    }\n\n    if ( !isNumber( cascade ) )\n    {\n      cascade = this.$db.cascade;\n    }\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$touch();\n\n        this.$db.addReference( this );\n\n        if ( setProperties !== undefined )\n        {\n          this.$set( setProperties, setValue );\n        }\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade, options );\n\n        this.$db.pruneModels();\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade, options)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade, options );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade, options)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade, options );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade, options );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function(cascade, options)\n  {\n    var callRefresh = function()\n    {\n      this.$refresh( cascade, options );\n    };\n\n    Rekord.on( Rekord.Events.Online, callRefresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset, options)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved, this.$db.cascade, options );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade, options)\n  {\n    var operation = new OperationType( this, cascade, options );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      db.removeReference( oldKey );\n      db.addReference( this, newKey );\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $touch: function()\n  {\n    if ( this.$db.hasPruning() )\n    {\n      this.$touched = now();\n    }\n  },\n\n  $project: function(projectionInput)\n  {\n    var projection = Projection.parse( this.$db, projectionInput );\n\n    return projection.project( this );\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade, options)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    Class.props(this,\n    {\n      $resumeCascade: cascade,\n      $resumeOptions: options\n    });\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade, this.$resumeOptions );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade, this.$resumeOptions );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model, true );\n\naddEventFunction( Model, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nClass.create( Map,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nClass.create( Dependents,\n{\n\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n});\n\n\n// field\n// relation.field\n// relations[pluckValue]\n// relations?savedWhere[pluckValue]\n// relations{pluckKey: pluckValue}\n// relation(subprojection)\n// relations(subprojection)\n// relations?savedWhere(subprojection)\n// expression|filter\n// expression?savedWhere\n// alias:expression\n// expression#resolve\n// relations@sum=field\n\nfunction Projection(database, input)\n{\n  this.database = database;\n  this.input = input;\n  this.projections = {};\n\n  for (var i = 0; i < input.length; i++)\n  {\n    this.addProjection( input[ i ] );\n  }\n}\n\nClass.create( Projection,\n{\n\n  addProjection: function(input)\n  {\n    var projection = this;\n    var alias = input;\n    var aliasIndex = input.indexOf( Projection.ALIAS_DELIMITER );\n\n    if (aliasIndex > 0)\n    {\n      alias = input.substring( 0, aliasIndex );\n      input = input.substring( aliasIndex + 1 );\n    }\n\n    var word = '';\n    var words = [];\n    var tokens = ['property'];\n    var types = [this.database];\n    var i = 0;\n    var resolvers = [];\n\n    var processWord = function(word)\n    {\n      if (!word)\n      {\n        return;\n      }\n\n      var token = tokens[0];\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      words.unshift( word );\n\n      if (handler && handler.post)\n      {\n        resolvers.push( handler.post( words, tokens, types, projection ) );\n      }\n    };\n\n    var processToken = function(token)\n    {\n      var handler = Projection.TOKEN_HANDLER[ token ];\n\n      tokens.unshift( token );\n\n      if (handler && handler.pre)\n      {\n        resolvers.push( handler.pre( words, tokens, types, projection ) );\n      }\n    };\n\n    for (var i = 0; i < input.length; i++)\n    {\n      var c = input.charAt( i );\n      var token = Projection.TOKENS[ c ];\n\n      if (token)\n      {\n        processWord( word );\n        processToken( token );\n\n        word = '';\n      }\n      else\n      {\n        word += c;\n      }\n    }\n\n    processWord( word );\n\n    var resolver = function(value) {\n      return value;\n    };\n\n    for (var i = resolvers.length - 1; i >= 0; i--) {\n      resolver = resolvers[ i ]( resolver );\n    }\n\n    this.projections[ alias ] = resolver;\n  },\n\n  project: function(model)\n  {\n    var out = {};\n\n    for (var alias in this.projections)\n    {\n      out[ alias ] = this.projections[ alias ]( model );\n    }\n\n    return out;\n  }\n\n});\n\nProjection.TOKENS =\n{\n  '.': 'property',\n  '?': 'where',\n  '|': 'filter',\n  '#': 'resolve',\n  '(': 'subStart',\n  ')': 'subEnd',\n  '[': 'pluckValueStart',\n  ']': 'pluckValueEnd',\n  '{': 'pluckObjectStart',\n  ':': 'pluckObjectDelimiter',\n  '}': 'pluckObjectEnd',\n  '@': 'aggregateStart',\n  '=': 'aggregateProperty'\n};\n\nProjection.TOKEN_HANDLER =\n{\n\n  property:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var propertyName = words[0];\n      var sourceType = types[0];\n\n      if (!(sourceType instanceof Database))\n      {\n        throw ('The property ' + propertyName + ' can only be taken from a Model');\n      }\n\n      var relation = sourceType.relations[ propertyName ];\n\n      if (relation)\n      {\n        if (relation instanceof RelationSingle)\n        {\n          types.unshift( relation.model.Database );\n        }\n        else\n        {\n          types.unshift( relation );\n        }\n      }\n\n      var fieldIndex = indexOf( sourceType.fields, propertyName );\n\n      if (fieldIndex === false && !relation)\n      {\n        throw ('The property ' + propertyName + ' does not exist as a field or relation on the Model ' + sourceType.name );\n      }\n\n      return function(resolver)\n      {\n        return function(model)\n        {\n          if ( !isValue( model ) )\n          {\n            return null;\n          }\n\n          return resolver( model.$get( propertyName ) );\n        };\n      };\n    }\n  },\n\n  filter:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var filterName = words[0];\n      var filter = Rekord.Filters[ filterName ];\n\n      if (!filter)\n      {\n        throw (filterName + ' is not a valid filter function');\n      }\n\n      return function(resolver)\n      {\n        return function(value)\n        {\n          if ( !isValue( value ) )\n          {\n            return null;\n          }\n\n          return resolver( filter( value ) );\n        };\n      };\n    }\n  },\n\n  resolve:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var resolveName = words[0];\n\n      return function(resolver)\n      {\n        return function(source)\n        {\n          if ( !isValue( source ) )\n          {\n            return null;\n          }\n\n          var value = source[ resolveName ];\n\n          if ( isFunction( value ) )\n          {\n            value = value.apply( source );\n          }\n\n          return resolver( value );\n        };\n      };\n    }\n  },\n\n  where:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var whereName = words[0];\n      var whereFrom = types[0];\n      var where = Rekord.Wheres[ whereName ];\n\n      if (!where)\n      {\n        throw (whereName + ' is not a valid where expression');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw (whereName + ' where expressions can only be used on relations');\n      }\n\n      return function(resolver)\n      {\n        return function(relation)\n        {\n          if ( !isValue( relation ) )\n          {\n            return null;\n          }\n\n          return resolver( relation.where( where ) );\n        };\n      };\n    }\n  },\n\n  aggregateProperty:\n  {\n    post: function(words, tokens, types, projection)\n    {\n      var property = words[0];\n      var aggregateFunction = words[1];\n      var aggregateFrom = types[0];\n\n      if (tokens[1] !== 'aggregateStart')\n      {\n        throw ('Aggregate function syntax error, a = must follow a @');\n      }\n\n      if (!(aggregateFrom instanceof Relation))\n      {\n        throw ('Aggregate functions like ' + aggregateFunction + ' from ' + aggregateFrom + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relation)\n        {\n          if ( !isValue( relation ) )\n          {\n            return null;\n          }\n\n          return resolver( relation[ aggregateFunction ]( property ) );\n        };\n      };\n    }\n  },\n\n  subEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var projectionName = words[0];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'subStart')\n      {\n        throw ('Sub projection syntax error, an ending ) requires a starting (');\n      }\n\n      if (!(whereFrom instanceof Relation))\n      {\n        throw ('Sub projections like ' + projectionName + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      if (!whereFrom.model.Database.projections[ projectionName ])\n      {\n        throw ('The projection ' + projectionName + ' does not exist on ' + whereFrom.model.Database.name);\n      }\n\n      if (whereFrom instanceof RelationSingle)\n      {\n        return function(resolver)\n        {\n          return function (relation)\n          {\n            if ( !isValue( relation ) )\n            {\n              return null;\n            }\n\n            return resolver( relation.$project( projectionName ) );\n          };\n        };\n      }\n      else\n      {\n        return function(resolver)\n        {\n          return function(relations)\n          {\n            if ( !isValue( relations ) )\n            {\n              return null;\n            }\n\n            return resolver( relations.project( projectionName ) );\n          };\n        };\n      }\n    }\n  },\n\n  pluckValueEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var properties = words[0];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'pluckValueStart')\n      {\n        throw ('Pluck value syntax error, an ending ] requires a starting [');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relations)\n        {\n          if ( !isValue( relations ) )\n          {\n            return null;\n          }\n\n          return resolver( relations.pluck( properties ) );\n        };\n      };\n    }\n  },\n\n  pluckObjectEnd:\n  {\n    pre: function(words, tokens, types, projection)\n    {\n      var properties = words[0];\n      var keys = words[1];\n      var whereFrom = types[0];\n\n      if (tokens[1] !== 'pluckObjectDelimiter' || tokens[2] !== 'pluckObjectStart')\n      {\n        throw ('Pluck object syntax error, must be {key: value}');\n      }\n\n      if (!(whereFrom instanceof RelationMultiple))\n      {\n        throw ('Pluck values like ' + properties + ' from ' + words[1] + ' can only be used on relations');\n      }\n\n      return function (resolver)\n      {\n        return function (relations)\n        {\n          if ( !isValue( relations ) )\n          {\n            return null;\n          }\n\n          return resolver( relations.pluck( properties, keys ) );\n        };\n      };\n    }\n  }\n};\n\nProjection.ALIAS_DELIMITER = ':';\n\nProjection.parse = function(database, input)\n{\n  var originalInput = input;\n\n  if ( isString( input ) )\n  {\n    input = database.projections[ input ];\n  }\n\n  if ( isArray( input ) )\n  {\n    input = new Projection( database, input );\n  }\n\n  if (!(input instanceof Projection))\n  {\n    throw (originalInput + ' is not a valid projection');\n  }\n\n  return input;\n};\n\n\nfunction Context(models)\n{\n  this.databases = [];\n  this.alls = [];\n  this.models = [];\n\n  if ( isEmpty( models ) )\n  {\n    for (var name in Rekord.classes)\n    {\n      this.add( name );\n    }\n  }\n  else if ( isArray( models ) )\n  {\n    for (var i = 0; i < models.length; i++)\n    {\n      this.add( models[ i ] );\n    }\n  }\n}\n\nContext.start = function(models)\n{\n  var context = new Context( models );\n\n  context.apply();\n\n  return context;\n};\n\nClass.create( Context,\n{\n\n  add: function(type)\n  {\n    if ( isString( type ) )\n    {\n      type = Rekord.classes[ type ];\n    }\n\n    if ( isRekord( type ) )\n    {\n      type = type.Database;\n    }\n\n    if ( type instanceof Database )\n    {\n      this.databases.push( type );\n      this.alls.push( {} );\n      this.models.push( new ModelCollection( type ) );\n    }\n  },\n\n  getApplied: function()\n  {\n    var applied = 0;\n\n    this.each(function(db)\n    {\n      if (db.context === this)\n      {\n        applied++;\n      }\n    });\n\n    return applied / this.databases.length;\n  },\n\n  apply: function()\n  {\n    this.each( this.applyDatabase );\n  },\n\n  applyDatabase: function(db, all, models, i)\n  {\n    db.all = all;\n    db.models = models;\n    db.context = this;\n    db.contextIndex = i;\n  },\n\n  discard: function()\n  {\n    this.each( this.discardDatabase );\n  },\n\n  discardDatabase: function(db)\n  {\n    if (db.context === this)\n    {\n      db.all = db.allCached;\n      db.models = db.modelsCached;\n      db.context = null;\n      db.contextIndex = -1;\n    }\n  },\n\n  destroy: function()\n  {\n    this.each( this.destroyDatabase );\n\n    this.databases.length = 0;\n    this.alls.length = 0;\n    this.models.length = 0;\n  },\n\n  destroyDatabase: function(db, alls, models, i)\n  {\n    this.discardDatabase( db );\n\n    this.databases[ i ] = null;\n    this.alls[ i ] = null;\n    this.models[ i ].clear();\n    this.models[ i ] = null;\n  },\n\n  clear: function(db)\n  {\n    this.alls[ db.contextIndex ] = {};\n  },\n\n  each: function(iterator)\n  {\n    var dbs = this.databases;\n    var alls = this.alls;\n    var models = this.models;\n\n    for (var i = 0; i < dbs.length; i++)\n    {\n      iterator.call( this, dbs[ i ], alls[ i ], models[ i ], i );\n    }\n  }\n\n});\n\n\nfunction KeyHandler()\n{\n\n}\n\nClass.create( KeyHandler,\n{\n\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n\n});\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nClass.extend( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredCollection.create( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return this.constructor.create( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return this.constructor.create();\n  }\n\n});\n\naddEventful( Collection );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    Class.props(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      Class.prop( this, 'base', base );\n\n      this.connect();\n    }\n\n    Class.prop( this, 'filter', filter );\n\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nClass.extend( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page );\n\naddEventFunction( Page, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nClass.extend( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    Class.props(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredModelCollection.create( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort, cascade, options)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove( cascade, options );\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade, options)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save( cascade, options );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade, options)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade, options );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals, cascade, options)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh( cascade, options );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade, options)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade, options );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  // TODO\n  project: function(projectionInput, out)\n  {\n    var target = out || [];\n    var projection = Projection.parse( this.database, projectionInput );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      target.push( projection.project( this[ i ] ) );\n    }\n\n    return target;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return ModelCollection.create( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return ModelCollection.create( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    Class.props(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  Class.props(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nClass.extend( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input, remoteData)\n  {\n    this.relator.set( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input, remoteData)\n  {\n    this.relator.relate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input, remoteData)\n  {\n    this.relator.unrelate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Syncrhonizes the related models in this collection by re-evaluating all\n   * models for a relationship.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {boolean} [removeUnrelated=false] -\n   *    Whether to remove models that are no longer related. The $remove\n   *    function is not called on these models.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  sync: function(removeUnrelated)\n  {\n    this.relator.sync( this.model, removeUnrelated );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  Class.props( collection,\n  {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  Class.props( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nClass.create( Search,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    Class.prop( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = ModelCollection.create( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n    var options = this.$options || this.$db.queryOptions;\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, options, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nClass.extend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n\n  Class.prop( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nClass.create( Promise,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise );\n\n\nfunction Operation()\n{\n}\n\nClass.create( Operation,\n{\n\n  reset: function(model, cascade, options)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.options = options;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade, this.options );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade, this.options );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.options || db.getOptions, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade, this.options );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade, this.options );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.options || this.removeOptions, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    db.removeReference( key );\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : this.grabAlways( db.saveAlways, changes, remote );\n    var publish = db.fullPublish ? remote : this.grabAlways( db.publishAlways, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  grabAlways: function(always, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( always.length )\n    {\n      for (var i = 0; i < always.length; i++)\n      {\n        var prop = always[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade, options)\n{\n  this.reset( model, cascade, options );\n}\n\nClass.extend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.options || db.updateOptions || db.saveOptions, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.options || db.createOptions || db.saveOptions, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade, this.options );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.create( Relation,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      Class.props( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return RelationCollection.create( this.model.Database, model, this );\n  },\n\n  createCollection: function(initial)\n  {\n    return ModelCollection.create( this.model.Database, initial );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade || this.autoCascade, this.autoOptions );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save( this.autoCascade, this.autoOptions );\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\nClass.extend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear && !remoteData )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false || ignoreLoaded )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\nClass.extend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save( this.saveParentCascade, this.saveParentOptions );\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending || ignoreLoaded )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  cascadeRemoveOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade, this.cascadeRemoveOptions );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  saveCascade:          Cascade.All,\n  saveOptions:          null,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  cascadeRemoveOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.populateInitial( initialValue, relation, model );\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  populateInitial: function(initialValue, relation, model)\n  {\n    if ( isObject( initialValue ) && relation.child )\n    {\n      var src = toArray( this.local );\n      var dst = toArray( this.model.Database.key );\n\n      for (var k = 0; k < src.length; k++)\n      {\n        initialValue[ dst[ k ] ] = model[ src[ k ] ];\n      }\n    }\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.populateInitial( relatedValue, relation, model );\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save( this.saveCascade, this.saveOptions );\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade, this.cascadeRemoveOptions );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  saveParentCascade:    Cascade.All,\n  saveParentOptions:    null,\n  cascadeRemove:        Cascade.Local,\n  cascadeRemoveOptions: null,\n  cascadeSave:          Cascade.None,\n  cascadeSaveOptions:   null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.related;\n      var remoteData = true;\n      var dontClear = true;\n      var relator = this;\n\n      var onRelated = function(related)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( related );\n\n          existing.each(function(existingModel)\n          {\n            if ( !given.has( existingModel.$key() ) )\n            {\n              relator.removeModel( relation, existingModel, remoteData, dontClear );\n            }\n          });\n        }\n      };\n\n      this.ready( this.handleLazyLoad( relation, onRelated ) );\n    }\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave, this.cascadeSaveOptions );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove, this.cascadeRemoveOptions );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, related );\n      }\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove, this.cascadeRemoveOptions );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  autoCascade:          Cascade.All,\n  autoOptions:          null,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveOptions:   null,\n  cascadeSaveRelated:   Cascade.None,\n  cascadeSaveRelatedOptions: null,\n  saveParentCascade:    Cascade.All,\n  saveParentOptions:    null,\n  cascadeRemoveThroughOptions: null,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, relator, model, this, relation );\n\n        relator.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var throughDatabase = this.through.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.throughs.values;\n      var remoteData = true;\n      var relator = this;\n\n      var onRelated = function(throughs)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( throughs );\n\n          for (var i = 0; i < existing.length; i++)\n          {\n            var existingThrough = existing[ i ];\n\n            if ( !given.has( existingThrough.$key() ) )\n            {\n              relator.removeModelFromThrough( relation, existingThrough, remoteData );\n            }\n          }\n        }\n      };\n\n      throughDatabase.ready( this.handleLazyLoad( relation, onRelated ), this );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave, this.cascadeSaveOptions );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated, this.cascadeSaveRelatedOptions );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove, this.cascadeRemoveThroughOptions );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, throughs );\n      }\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related && ( !this.where || this.where( related ) ) )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave, this.cascadeSaveOptions );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through, undefined, undefined, remoteData ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey, remoteData );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All, this.cascadeRemoveThroughOptions );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey, remoteData)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  where:                false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nClass.extend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, true );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nClass.extend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nClass.extend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( RelationCollection.create( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( ModelCollection.create(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( this.autoCascade, this.autoOptions );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save( this.autoCascade, this.autoOptions );\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    Class.props( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nClass.create( Shard,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(options, success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, options, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, options, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, options, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, options, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n  \n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.array = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.native( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model at the given index.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.at( 0 ); // t0\n   * ```\n   *\n   * @method at\n   * @memberof Rekord.Model\n   * @param {Number} index -\n   *    The index of the model to return.\n   * @return {Rekord.Model} -\n   *    The reference to the model at the given index.\n   */\n  model.at = function(index)\n  {\n    return db.models[ index ];\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return ModelCollection.create( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  \n  model.clear = function(removeListeners)\n  {\n    return db.clear( removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.create( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade, options )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade, options );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      Class.replace( model, '$init', function($init)\n      {\n        return function()\n        {\n          $init.apply( this, arguments );\n\n          applyEventListeners( this, modelEvents );\n        };\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, options, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh( Cascade.Rest, options );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return win.File && win.FileReader && win.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof win.File )\n  {\n    return input;\n  }\n  else if ( input instanceof win.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof win.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in win.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new win.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\naddPlugin(function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @param {Any} [options] -\n   *    The options to pass to the REST service.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, options, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade, options );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade, options );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, options, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, options, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\naddPlugin( function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  Class.method( Map, 'put', mapKeyChangePut );\n  Class.method( Map, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  Class.method( Map, 'put', Map_put );\n  Class.method( Map, 'remove', Map_remove );\n}\n\naddPlugin(function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    Class.methods( model, methods );\n  }\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, options, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, options, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade, options );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.projection = function(projectionInput)\n  {\n    return Projection.parse( db, projectionInput );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.reset = function(failOnPendingChanges, removeListeners)\n  {\n    return db.reset( failOnPendingChanges, removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.searchAt = function(index, url, paging, options, props, success, failure)\n  {\n    var page = {page_index: index, page_size: 1};\n\n    var search = paging ?\n      new SearchPaged( db, url, collapse( options, page ), props ) :\n      new Search( db, url, options, props );\n\n    var promise = new Rekord.Promise();\n\n    promise.success( success );\n    promise.failure( failure );\n\n    search.$run().then(\n      function onSuccess(search, response, results) {\n        promise.resolve( results[ paging ? 0 : index ] );\n      },\n      function onFailure() {\n        promise.reject();\n      },\n      function onOffline() {\n        promise.noline();\n      }\n    );\n\n    return promise;\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n  \n}, true );\n\naddPlugin(function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    Class.replace( model, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\naddPlugin(function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n  Rekord.Context = Context;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Projections */\n  Rekord.Filters = {};\n  Rekord.Projection = Projection;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n  Rekord.addPlugin = addPlugin;\n  Rekord.now = now;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.array = collectArray;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.Settings = Settings;\n  Rekord.Class = Class;\n  Rekord.extend = Class.extend;\n  Rekord.extendArray = Class.extend;\n  Rekord.addMethod = Rekord.setProperty = Class.prop;\n  Rekord.addMethods = Rekord.setProperties = Class.props;\n  Rekord.replaceMethod = Class.replace;\n  Rekord.copyConstructor = Class.copyConstructor;\n  Rekord.factory = Class.factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}