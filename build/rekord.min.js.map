{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","Gate.js","Database.js","Model.js","Map.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Promise.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","dynamic.js","events.js","files.js","timestamps.js","util.js","rules/between.js","rules/collection.js","rules/dates.js","rules/field_list.js","rules/fields.js","rules/foreign.js","rules/if.js","rules/list.js","rules/regex.js","rules/sizes.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","validation.js","expressions/date.js","expressions/field.js","expressions/relative.js","expressions/today.js","expressions/tomorrow.js","expressions/yesterday.js","rules/accepted.js","rules/required.js","rules/types.js","transforms/ceil.js","transforms/floor.js","transforms/trim.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","split","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isValue","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","parseDate","utc","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","splits","ae","joined","saveWhere","Wheres","createWhere","where","promise","get","isComplete","results","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","rest","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","url","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","tryParseFloat","tryParseInt","startOfDay","setHours","endOfDay","ruleGenerator","ruleName","defaultMessage","isInvalid","Validation","Rules","params","getAlias","message","checkNoParams","messageTemplate","determineMessage","setMessage","setValue","newValue","generateMessage","joinFriendly","lastSeparator","itemSeparator","last","pop","mapFromArray","alias","extra","$field","$alias","$value","rangeRuleGenerator","defaultMessages","range","start","end","string","number","object","$start","$end","size","typeMessage","$size","collectionRuleGenerator","comma","matchField","matchValue","otherField","$matchField","$matchAlias","$matchValue","dateRuleGenerator","dateExpression","parseExpression","$date","fieldListRuleGenerator","parts","shift","matchValues","list","$params","$list","fieldsRuleGenerator","fieldNames","fieldAliases","$fields","$fieldAliases","foreignRuleGenerator","modelName","fieldName","modelClass","$class","subRuleGenerator","colon","otherRules","validators","parseRules","invalids","setInvalid","Stop","listRuleGenerator","regexRuleGenerator","regex","sizeRuleGenerator","$number","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","failure","encoded","update","remove","query","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","loadRelations","loadRemote","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","ready","persistent","hasData","saving","grabModel","checkModel","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","putRemoteData","instantiate","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","records","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","operation","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","lastKey","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","add","intersect","complement","delaySort","insertAt","removed","removing","element","removeAll","removeWhere","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","$getDefaults","$append","$url","$results","$promise","$run","$encode","$handleSuccess","$handleFailure","isPending","offline","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","notLive","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","grabAll","searchPaged","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","aliases","validation","rules","messages","required","validations","PreValidate","$valid","$validations","$validationMessages","chain","fieldValid","ValidatePass","ValidateFail","$validate","Expression","Expressions","Delimiter","Escape","RuleSeparator","rule","parseRule","ruleMessage","customValidator","ruleParams","validatorFactory","parsers","parser","expressionFunction","parsedTime","RELATIVE_REGEX","RELATIVE_UNITS","ms","millisecond","milliseconds","s","seconds","mins","minute","minutes","hr","hour","hours","day","days","wk","week","weeks","month","months","yr","year","years","relative","exec","amount","unit","unitScale","setTime","getter","today","tomorrow","setDate","getDate","yesterday","accepted","acceptable","valueString","toLowerCase","1","yes","y","true","m","validate","messageOption","invalid","confirmed","different","invalidCount","totalCount","numeric","yesno","false","no","0","trim","String"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc ) x += ' UTC';\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var splits = x.split( delimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  return Rekord.promises[ name ] = Rekord.promises[ name ] || new Promise( null, false );\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n};\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.complete( callback, context || db );\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    }\n\n    db.rest.all( onModels, onLoadError );\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n        i--;\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    return this.eachWhere( cancelIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    return this.eachWhere( refreshIt, properties, value, equals );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( isObject( props ) )\n    {\n      this.$set( props );\n    }\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    this.$cancel();\n    this.$promise = new Promise();\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = status === 0;\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 410 || status === 404 )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeFormat = options.timestampFormat || Database.Defaults.timestampFormat;\n  var timeType = options.timestampType || Database.Defaults.timestampType;\n  var timeUTC = options.timestampUTC || Database.Defaults.timestampUTC;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTimestamp()\n  {\n    return convertDate( new Date(), timeType );\n  }\n\n  function encode(x)\n  {\n    var encoded = convertDate( x, timeFormat );\n\n    return encoded || x;\n  }\n\n  function decode(x)\n  {\n    var decoded = convertDate( x, timeType, timeUTC );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = currentTimestamp();\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDatabase.Defaults.timestampFormat = Timestamp.Millis;\nDatabase.Defaults.timestampType = Timestamp.Date;\nDatabase.Defaults.timestampUTC = false;\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n","function tryParseFloat(x)\n{\n  var parsed = parseFloat( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction tryParseInt(x)\n{\n  var parsed = parseInt( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction startOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 0, 0, 0, 0 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000);\n  }\n\n  return d;\n}\n\nfunction endOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 23, 59, 59, 999 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000) + 86400000 - 1;\n  }\n\n  return d;\n}\n\nfunction ruleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nfunction determineMessage(ruleName, message)\n{\n  return message || Validation.Rules[ ruleName ].message;\n}\n\nfunction joinFriendly(arr, lastSeparator, itemSeparator, getAlias)\n{\n  var copy = arr.slice();\n\n  if ( getAlias )\n  {\n    for (var i = 0; i < copy.length; i++)\n    {\n      copy[ i ] = getAlias( copy[ i ] );\n    }\n  }\n\n  var last = copy.pop();\n  var lastSeparator = lastSeparator || 'and';\n  var itemSeparator = itemSeparator || ', ';\n\n  switch (copy.length) {\n    case 0:\n      return last;\n    case 1:\n      return copy[ 0 ] + ' ' + lastSeparator + ' ' + last;\n    default:\n      return copy.join( itemSeparator ) + itemSeparator + lastSeparator + ' ' + last;\n  }\n}\n\nfunction mapFromArray(arr, value)\n{\n  var map = {};\n\n  for (var i = 0; i < arr.length; i++)\n  {\n    map[ arr[ i ] ] = value;\n  }\n\n  return map;\n}\n\nfunction checkNoParams(ruleName, field, params)\n{\n  if ( params )\n  {\n    throw 'the rule ' + ruleName + ' for field ' + field + ' has no arguments';\n  }\n}\n\nfunction generateMessage(field, alias, value, model, message, extra)\n{\n  if ( isFunction( message ) )\n  {\n    message = message( field, alias, value, model, extra );\n  }\n\n  var base = {};\n  base.$field = field;\n  base.$alias = alias;\n  base.$value = value;\n\n  transfer( model, base );\n\n  if ( isObject( extra ) )\n  {\n    transfer( extra, base );\n  }\n\n  return format( message, base );\n}\n","// between:3,10\nrangeRuleGenerator('between', {\n    'string': '{$alias} must have between {$start} to {$end} characters.',\n    'number': '{$alias} must be between {$start} and {$end}.',\n    'object': '{$alias} must have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value < start || value > end;\n  }\n);\n\n// not_between\nrangeRuleGenerator('not_between', {\n    'string': '{$alias} must not have between {$start} to {$end} characters.',\n    'number': '{$alias} must not be between {$start} and {$end}.',\n    'object': '{$alias} must not have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value >= start && value <= end;\n  }\n);\n\nfunction rangeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a range argument';\n    }\n\n    var range = split( params, /(\\s*,\\s*)/, '\\\\' );\n    var start = parseFloat( range[0] );\n    var end = parseFloat( range[1] );\n\n    if ( isNaN( start ) || isNaN( end ) )\n    {\n      throw params + ' is not a valid range of numbers for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $start: start,\n      $end: end\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, start, end ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","// contains:field,value\ncollectionRuleGenerator('contains',\n  '{$alias} does not contain an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue)\n  {\n    return !value.contains(function isMatch(m)\n    {\n      return m !== model && equalsCompare( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\n// not_contains:field,value\ncollectionRuleGenerator('not_contains',\n  '{$alias} contains an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue)\n  {\n    return value.contains(function isMatch(m)\n    {\n      return m !== model && equalsCompare( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\nfunction collectionRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var comma = params.indexOf(',');\n\n    if ( comma === -1 )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var matchField = params.substring( 0, comma );\n    var matchValue = params.substring( comma + 1 );\n\n    if ( indexOf( database.fields, matchField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $matchValue: matchValue\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.validate = function(field, params, database, getAlias, message)\n{\n  // message, models, validations\n  var messageOption = params || 'message';\n  var messageTemplate = determineMessage( 'validate', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      var invalid = new Collection();\n\n      for (var i = 0; i < value.length; i++)\n      {\n        var model = value[ i ];\n\n        if ( model && model.$validate && !model.$validate() )\n        {\n          invalid.push( model );\n        }\n      }\n\n      if ( invalid.length )\n      {\n        switch (messageOption)\n        {\n          case 'models':\n            setMessage( invalid );\n            break;\n          case 'validations':\n            setMessage( invalid.pluck( '$validations', '$$key' ) );\n            break;\n          default: // message\n            setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n            break;\n        }\n      }\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.validate.message = '{$alias} is not valid.';\n","// after:today\ndateRuleGenerator('after',\n  '{$alias} must be after {$date}.',\n  function isInvalid(value, date) {\n    return value < endOfDay( date );\n  }\n);\n\n// after_on:tomorrow\ndateRuleGenerator('after_on',\n  '{$alias} must be after or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value < date;\n  }\n);\n\n// before:yesterday\ndateRuleGenerator('before',\n  '{$alias} must be before {$date}.',\n  function isInvalid(value, date) {\n    return value > date;\n  }\n);\n\n// before_on:+2days\ndateRuleGenerator('before_on',\n  '{$alias} must be before or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value > endOfDay( date );\n  }\n);\n\n// date\nruleGenerator('date_like',\n  '{$alias} must be a valid date.',\n  function isInvalid(value, model, setValue) {\n    var parsed = parseDate( value );\n    var invalid = parsed === false;\n    if ( !invalid ) {\n      setValue( parsed.getTime() );\n    }\n    return invalid;\n  }\n);\n\nfunction dateRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a date expression argument';\n    }\n\n    var dateExpression = Validation.parseExpression( params, database );\n\n    if ( dateExpression === noop )\n    {\n      throw params + ' is not a valid date expression for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $date: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var parsed = parseDate( value );\n\n      if ( parsed !== false )\n      {\n        value = parsed.getTime();\n\n        var date = dateExpression( value, model );\n\n        if ( isNumber( date ) && isInvalid( value, date ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","\n// required_if:X,Y,...\nfieldListRuleGenerator('required_if',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\n// required_unless:X,Y,...\nfieldListRuleGenerator('required_unless',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = !map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldListRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a field and list arguments';\n    }\n\n    var parts = split( params, /(,)/, '\\\\' );\n    var matchField = parts.shift();\n    var matchValues = parts;\n\n    if ( indexOf( database.fields, matchField ) === false )\n    {\n      throw matchField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( matchValues );\n    var extra = {\n      $params: params,\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $list: list\n    };\n    var map = mapFromArray( matchValues, true );\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValues, map ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// confirmed:X\nfieldsRuleGenerator('confirmed',\n  '{$alias} must match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var confirmed = true;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        confirmed = false;\n      }\n    }\n\n    return !confirmed;\n  }\n);\n\n// different:X\nfieldsRuleGenerator('different',\n  '{$alias} must not match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var different = false;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        different = true;\n      }\n    }\n\n    return !different;\n  }\n);\n\n// if_valid:X\nfieldsRuleGenerator('if_valid',\n  '',\n  function isInvalid(value, model, fields, setValue) {\n    var valid = true;\n\n    for (var i = 0; i < fields.length && valid; i++)\n    {\n      if ( model.$validations[ fields[ i ] ] )\n      {\n        valid = false;\n      }\n    }\n\n    if ( !valid )\n    {\n      setValue( Validation.Stop );\n    }\n\n    return false;\n  }\n);\n\n// The field under validation must be present only if any of the other specified fields are present.\n// required_with:X,Y,...\nfieldsRuleGenerator('required_with',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only if all of the other specified fields are present.\n// required_with_all:X,Y,...\nfieldsRuleGenerator('required_with_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when any of the other specified fields are not present.\n// required_without:X,Y,...\nfieldsRuleGenerator('required_without',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when all of the other specified fields are not present.\n// required_without_all:X,Y,...\nfieldsRuleGenerator('required_without_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldsRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires an array of fields argument';\n    }\n\n    var fields = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( indexOf( database.fields, fields[ i ] ) === -1 )\n      {\n        throw fields[ i ] + ' is not a valid field for the ' + ruleName + ' rule';\n      }\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var fieldNames = joinFriendly( fields );\n    var fieldAliases = joinFriendly( fields, false, false, getAlias );\n    var extra = {\n      $fields: fieldNames,\n      $fieldAliases: fieldAliases\n    };\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, fields, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n};\n","// exists:X,Y\nforeignRuleGenerator('exists',\n  '{$alias} must match an existing {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return !models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// unique:X,Y\nforeignRuleGenerator('unique',\n  '{$alias} must be a unique {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\nfunction foreignRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var parts = split( params || '', /(\\s*,\\s*)/, '\\\\' );\n    var modelName = parts[0] || database.name;\n    var fieldName = parts[1] || field;\n    var models = null;\n\n    if ( indexOf( database.fields, fieldName ) === false )\n    {\n      throw fieldName + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    Rekord.get( modelName ).success(function(modelClass)\n    {\n      models = modelClass.all();\n    });\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $class: modelName,\n      $matchField: fieldName,\n      $matchAlias: getAlias( fieldName )\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( models && isValue( value ) )\n      {\n        if ( isInvalid( value, model, models, fieldName ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// if:due_date:before:today|required\n\n// if all rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount > 0;\n  }\n);\n\n// if any rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_any',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount >= totalCount;\n  }\n);\n\n// if no rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_not',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount < totalCount;\n  }\n);\n\n\n\nfunction subRuleGenerator(ruleName, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a validation rule argument';\n    }\n\n    var colon = params.indexOf( ':' );\n\n    if ( colon === -1 )\n    {\n      throw params + ' is not a valid argument for the ' + ruleName + ' rule';\n    }\n\n    var otherField = params.substring( 0, colon );\n    var otherRules = params.substring( colon + 1 );\n\n    if ( indexOf( database.fields, otherField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var validators = Validation.parseRules( otherRules, otherField, database, getAlias );\n\n    return function(value, model, setMessage)\n    {\n      var invalids = 0;\n\n      var setInvalid = function(message)\n      {\n        if ( message )\n        {\n          invalids++;\n        }\n      };\n\n      for (var i = 0; i < validators.length; i++)\n      {\n        validators[ i ]( value, model, setInvalid );\n      }\n\n      return isInvalid( invalids, validators.length ) ? Validation.Stop : value;\n    };\n  };\n}\n","// in:X,Y,Z,...\nlistRuleGenerator('in',\n  '{$alias} must be one of {$list}.',\n  function isInvalid(value, model, values, map)\n  {\n    return !map[ value ];\n  }\n);\n\n// not_in:X,Y,Z,...\nlistRuleGenerator('not_in',\n  '{$alias} must not be one of {$list}.',\n  function isInvalid(value, model, values, map)\n  {\n    return map[ value ];\n  }\n);\n\nfunction listRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a list argument';\n    }\n\n    var values = split( params, /(,)/, '\\\\' );\n\n    if ( values.length === 0 )\n    {\n      throw params + ' is not a valid list of values for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( values, 'or' );\n    var extra = {\n      $params: params,\n      $list: list\n    };\n    var map = mapFromArray( values, true );\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, values, map ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","\n\nregexRuleGenerator('alpha',\n  '{$alias} should only contain alphabetic characters.',\n    /^[a-zA-Z]*$/\n);\n\nregexRuleGenerator('alpha_dash',\n  '{$alias} should only contain alpha-numeric characters, dashes, and underscores.',\n  /^[a-zA-Z0-9_-]*$/\n);\n\nregexRuleGenerator('alpha_num',\n  '{$alias} should only contain alpha-numeric characters.',\n  /^[a-zA-Z0-9]*$/\n);\n\nregexRuleGenerator('email',\n  '{$alias} is not a valid email.',\n  /^.+@.+\\..+$/\n);\n\nregexRuleGenerator('url',\n  '{$alias} is not a valid URL.',\n  /^(https?:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('uri',\n  '{$alias} is not a valid URI.',\n  /^(\\w+:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('phone',\n  '{$alias} is not a valid phone number.',\n  /^1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?$/\n);\n\nfunction regexRuleGenerator(ruleName, defaultMessage, regex)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      if ( !regex.test( value ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.regex = function(field, params, database, getAlias, message)\n{\n  var parsed = /^\\/(.*)\\/([gmi]*)$/.exec( params );\n\n  if ( !parsed )\n  {\n    throw params + ' is not a valid regular expression for the regex rule';\n  }\n\n  var regex = new RegExp( parsed[1], parsed[2] );\n  var messageTemplate = determineMessage( 'regex', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( !regex.test( value ) )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.regex.message = '{$alias} is not a valid value.';\n","// min:3\nsizeRuleGenerator('min', {\n    'string': '{$alias} must have a minimum of {$number} characters.',\n    'number': '{$alias} must be at least {$number}.',\n    'object': '{$alias} must have at least {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value < number;\n  }\n);\n\n// greater_than:0\nsizeRuleGenerator('greater_than', {\n    'string': '{$alias} must have more than {$number} characters.',\n    'number': '{$alias} must be greater than {$number}.',\n    'object': '{$alias} must have more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value <= number;\n  }\n);\n\n// max:10\nsizeRuleGenerator('max', {\n    'string': '{$alias} must have no more than {$number} characters.',\n    'number': '{$alias} must be no more than {$number}.',\n    'object': '{$alias} must have no more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value > number;\n  }\n);\n\n// less_than:5\nsizeRuleGenerator('less_than', {\n    'string': '{$alias} must have less than {$number} characters.',\n    'number': '{$alias} must be less than {$number}.',\n    'object': '{$alias} must have less than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value >= number;\n  }\n);\n\n// equal:4.5\nsizeRuleGenerator('equal', {\n    'string': '{$alias} must have {$number} characters.',\n    'number': '{$alias} must equal {$number}.',\n    'object': '{$alias} must have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value !== number;\n  }\n);\n\n// not_equal:0\nsizeRuleGenerator('not_equal', {\n    'string': '{$alias} must not have {$number} characters.',\n    'number': '{$alias} must not equal {$number}.',\n    'object': '{$alias} must not have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value === number;\n  }\n);\n\nfunction sizeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a number argument';\n    }\n\n    var number = parseFloat( params );\n\n    if ( isNaN( number ) )\n    {\n      throw params + ' is not a valid number for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $number: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, number ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var validation = options.validation || Database.Defaults.validation;\n\n  if ( isEmpty( validation ) )\n  {\n    return;\n  }\n\n  var rules = validation.rules || {};\n  var messages = validation.messages || {};\n  var aliases = validation.aliases || {};\n  var required = !!validation.required;\n\n  function getAlias(field)\n  {\n    return aliases[ field ] || field;\n  }\n\n  db.validations = {};\n\n  for ( var field in rules )\n  {\n    db.validations[ field ] = Validation.parseRules( rules[ field ], field, db, getAlias, messages[ field ] )\n  }\n\n  addMethod( model.prototype, '$validate', function()\n  {\n    var $this = this;\n\n    this.$trigger( Model.Events.PreValidate, [this] );\n\n    this.$valid = true;\n    this.$validations = {};\n    this.$validationMessages.length = 0;\n\n    for (var field in db.validations)\n    {\n      var chain = db.validations[ field ];\n      var value = this.$get( field );\n      var fieldValid = true;\n\n      var setMessage = function(message)\n      {\n        // Only accept for the first valid message\n        if ( message && fieldValid )\n        {\n          fieldValid = false;\n\n          $this.$validations[ field ] = message;\n          $this.$validationMessages.push( message );\n          $this.$valid = false;\n        }\n      };\n\n      for (var i = 0; i < chain.length && fieldValid && value !== Validation.Stop; i++)\n      {\n        value = chain[ i ]( value, this, setMessage );\n      }\n    }\n\n    this.$trigger( this.$valid ? Model.Events.ValidatePass : Model.Events.ValidateFail, [this] );\n\n    return this.$valid;\n  });\n\n  replaceMethod( model.prototype, '$init', function($init)\n  {\n    return function()\n    {\n      this.$valid = undefined;\n      this.$validations = {};\n      this.$validationMessages = [];\n\n      return $init.apply( this, arguments );\n    };\n  });\n\n  if ( required )\n  {\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        if ( this.$isDeleted() )\n        {\n          Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n          return Promise.resolve( this );\n        }\n\n        if ( !this.$validate() )\n        {\n          return Promise.resolve( this );\n        }\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n});\n\nModel.Events.PreValidate = 'pre-validate';\n\nModel.Events.ValidatePass = 'validate-pass';\n\nModel.Events.ValidateFail = 'validate-fail';\n\nvar Validation =\n{\n  Rules: {},\n  Expression: {},\n  Expressions: [],\n  Delimiter: /([|])/,\n  Escape: '\\\\',\n  RuleSeparator: ':',\n  Stop: {},\n\n  parseRules: function(rules, field, database, getAlias, message)\n  {\n    var validators = [];\n\n    if ( isString( rules ) )\n    {\n      rules = split( rules, this.Delimiter, this.Escape );\n    }\n\n    if ( isArray( rules ) )\n    {\n      for (var i = 0; i < rules.length; i++)\n      {\n        var rule = rules[ i ];\n        var validator = this.parseRule( rule, field, database, getAlias, message );\n\n        validators.push( validator );\n      }\n    }\n    else if ( isObject( rules ) )\n    {\n      for (var rule in rules)\n      {\n        var ruleMessage = rules[ rule ];\n        var validator = this.parseRule( rule, field, database, getAlias, ruleMessage || message );\n\n        validators.push( validator );\n      }\n    }\n\n    return validators;\n  },\n\n  parseRule: function(rule, field, database, getAlias, message)\n  {\n    var colon = rule.indexOf( this.RuleSeparator );\n    var ruleName = colon === -1 ? rule : rule.substring( 0, colon );\n\n    if ( ruleName.charAt( 0 ) === '$' )\n    {\n      return this.customValidator( ruleName, field, database, getAlias, message );\n    }\n\n    var ruleParams = colon === -1 ? undefined : rule.substring( colon + 1 );\n    var validatorFactory = Validation.Rules[ ruleName ];\n\n    if ( !validatorFactory )\n    {\n      throw ruleName + ' is not a valid rule';\n    }\n\n    return validatorFactory( field, ruleParams, database, getAlias, message );\n  },\n\n  parseExpression: function(expr, database)\n  {\n    var parsers = Validation.Expressions;\n\n    for (var i = 0; i < parsers.length; i++)\n    {\n      var parser = parsers[ i ];\n      var expressionFunction = parser( expr, database );\n\n      if ( isFunction( expressionFunction ) )\n      {\n        return expressionFunction; // (value, model)\n      }\n    }\n\n    return noop;\n  },\n\n  customValidator: function(functionName, field, database, getAlias, message)\n  {\n    return function(value, model, setMessage)\n    {\n      var result = model[ functionName ]( value, getAlias, message );\n\n      if ( isString( result ) )\n      {\n        setMessage( result );\n      }\n\n      return value;\n    };\n  }\n};\n\n// Export\n\nRekord.Validation = Validation;\n\nRekord.ruleGenerator = ruleGenerator;\nRekord.rangeRuleGenerator = rangeRuleGenerator;\nRekord.collectionRuleGenerator = collectionRuleGenerator;\nRekord.dateRuleGenerator = dateRuleGenerator;\nRekord.fieldListRuleGenerator = fieldListRuleGenerator;\nRekord.fieldsRuleGenerator = fieldsRuleGenerator;\nRekord.foreignRuleGenerator = foreignRuleGenerator;\nRekord.subRuleGenerator = subRuleGenerator;\nRekord.listRuleGenerator = listRuleGenerator;\nRekord.regexRuleGenerator = regexRuleGenerator;\nRekord.sizeRuleGenerator = sizeRuleGenerator;\n\nRekord.joinFriendly = joinFriendly;\nRekord.tryParseFloat = tryParseFloat;\nRekord.tryParseInt = tryParseInt;\nRekord.startOfDay = startOfDay;\nRekord.endOfDay = endOfDay;\nRekord.determineMessage = determineMessage;\nRekord.mapFromArray = mapFromArray;\nRekord.checkNoParams = checkNoParams;\nRekord.generateMessage = generateMessage;\n","Validation.Expression.date =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = parseDate( expr );\n\n  if ( parsed !== false )\n  {\n    var parsedTime = parsed.getTime();\n\n    return function(value, model)\n    {\n      return parsedTime;\n    };\n  }\n}) - 1;\n","Validation.Expression.field =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( indexOf( database.fields, expr ) )\n  {\n    return function(value, model)\n    {\n      return model.$get( expr );\n    };\n  }\n}) - 1;\n","\nvar RELATIVE_REGEX = /^([+-]\\d+(\\.\\d+)?)\\s*(.+)$/;\n\nvar RELATIVE_UNITS = {\n  ms: 1,\n  millisecond: 1,\n  milliseconds: 1,\n  s: 1000,\n  second: 1000,\n  seconds: 1000,\n  min: 1000 * 60,\n  mins: 1000 * 60,\n  minute: 1000 * 60,\n  minutes: 1000 * 60,\n  hr: 1000 * 60 * 60,\n  hour: 1000 * 60 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n  days: 1000 * 60 * 60 * 24,\n  wk: 1000 * 60 * 60 * 24 * 7,\n  week: 1000 * 60 * 60 * 24 * 7,\n  weeks: 1000 * 60 * 60 * 24 * 7,\n  month: ['getMonth', 'setMonth'],\n  months: ['getMonth', 'setMonth'],\n  yr: ['getFullYear', 'setFullYear'],\n  year: ['getFullYear', 'setFullYear'],\n  years: ['getFullYear', 'setFullYear']\n};\n\nValidation.Expression.relative =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = RELATIVE_REGEX.exec( expr );\n\n  if ( parsed !== null )\n  {\n    var amount = parseFloat( parsed[ 1 ] );\n    var unit = parsed[ 3 ];\n    var unitScale = RELATIVE_UNITS[ unit ];\n\n    if ( !unitScale )\n    {\n      throw unit + ' is not a valid unit.';\n    }\n\n    return function(value, model)\n    {\n      var relative = new Date();\n\n      if ( isNumber( unitScale ) )\n      {\n        relative.setTime( relative.getTime() + unitScale * amount );\n      }\n      else\n      {\n        var getter = unitScale[0];\n        var setter = unitScale[1];\n\n        relative[ setter ]( relative[ getter ]() + amount );\n      }\n\n      return relative.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.today =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'today' )\n  {\n    return function(value, model)\n    {\n      var today = new Date();\n\n      startOfDay( today );\n\n      return today.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.tomorrow =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'tomorrow' )\n  {\n    return function(value, model)\n    {\n      var tomorrow = new Date();\n\n      tomorrow.setDate( tomorrow.getDate() + 1 );\n      startOfDay( tomorrow );\n\n      return tomorrow.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.yesterday =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'yesterday' )\n  {\n    return function(value, model)\n    {\n      var yesterday = new Date();\n\n      yesterday.setDate( yesterday.getDate() - 1 );\n      startOfDay( yesterday );\n\n      return yesterday.getTime();\n    };\n  }\n}) - 1;\n","// accepted\nValidation.Rules.accepted = function(field, params, database, getAlias, message)\n{\n  checkNoParams( 'accepted', field, params );\n\n  var messageTemplate = determineMessage( 'accepted', message );\n  var acceptable = Validation.Rules.accepted.acceptable;\n\n  return function(value, model, setMessage)\n  {\n    var valueString = (value + '').toLowerCase();\n    var accepted = acceptable[ valueString ];\n\n    if ( !accepted )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.accepted.message = '{$alias} has not been accepted.';\n\nValidation.Rules.accepted.acceptable =\n{\n  '1':    true,\n  'yes':  true,\n  'on':   true,\n  'y':    true,\n  'true': true\n};\n","// required\nruleGenerator('required',\n  '{$alias} is required.',\n  function isInvalid(value) {\n    return isEmpty( value );\n  }\n);\n","\nruleGenerator('array',\n  '{$alias} must be an array.',\n  function isInvalid(value) {\n    return !isArray( value );\n  }\n);\n\nruleGenerator('object',\n  '{$alias} must be an object.',\n  function isInvalid(value) {\n    return !isObject( value );\n  }\n);\n\nruleGenerator('string',\n  '{$alias} must be a string.',\n  function isInvalid(value) {\n    return !isString( value );\n  }\n);\n\nruleGenerator('number',\n  '{$alias} must be a number.',\n  function isInvalid(value) {\n    return !isNumber( value );\n  }\n);\n\nruleGenerator('boolean',\n  '{$alias} must be a true or false.',\n  function isInvalid(value) {\n    return !isBoolean( value );\n  }\n);\n\nruleGenerator('model',\n  '{$alias} must have a value.',\n  function isInvalid(value) {\n    return !(value instanceof Model);\n  }\n);\n\nruleGenerator('whole',\n  '{$alias} must be a whole number.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseInt( value );\n    var numeric = parseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      invalid = Math.floor( parsed ) !== numeric;\n      if ( !invalid ) {\n        setValue( parsed );\n      }\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('numeric',\n  '{$alias} must be numeric.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      setValue( parsed );\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('yesno',\n  '{$alias} must be a yes or no.',\n  function isInvalid(value, model, setValue) {\n    var mapped = Validation.Rules.yesno.map[ value ];\n    var invalid = !isBoolean( mapped );\n    if ( !invalid ) {\n      setValue( mapped );\n    }\n    return invalid;\n  }\n);\n\nValidation.Rules.yesno.map =\n{\n  'true':   true,\n  't':      true,\n  'yes':    true,\n  'y':      true,\n  '1':      true,\n  'false':  false,\n  'f':      false,\n  'no':     false,\n  'n':      false,\n  '0':      false\n};\n","Validation.Rules.ceil = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.ceil( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.floor = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.floor( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.trim = function(field, params, database, alias, message)\n{\n  // String.trim polyfill\n  if ( !String.prototype.trim )\n  {\n    var regex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n    String.prototype.trim = function()\n    {\n      return this.replace( regex, '' );\n    };\n  }\n\n  return function(value, model, setMessage)\n  {\n    if ( isString( value ) )\n    {\n      value = value.trim();\n    }\n\n    return value;\n  };\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}