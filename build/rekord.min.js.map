{"version":3,"sources":["rekord.min.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","parsedChain","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","parseDate","utc","saveNumberResolver","numbers","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","splits","ae","joined","saveWhere","where","createWhere","Wheres","promise","get","isComplete","results","Events","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","removeKey","buildKey","buildKeys","relationName","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","isDependent","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    var events = toArray( eventsInput, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( defaultProperty + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( defaultProperty, option );\n    }\n    else\n    {\n      setProperty( defaultProperty, copy( defaultValue ) );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      setProperty( optionProperty, options[ optionProperty ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc )\n    {\n      x += ' UTC';\n    }\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  var resolver = createNumberResolver( numbers );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  var resolver = createPropertyResolver( properties, delim );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var splits = x.split( delimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n\n  // 33\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (e)\n  {\n    throw e;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        this.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      this.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      for (var relationName in this.relations)\n      {\n        if ( relationName in input )\n        {\n          this.relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    this.buildKeyFromRelations( model );\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n    var off;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents[ related.$uid() ] = related;\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var foreign = this.model.Database.key;\n\n      if ( isArray( key ) )\n      {\n        for (var i = 0; i < key.length; i++)\n        {\n          var field = key[ i ];\n\n          if ( !isValue( input[ field ] ) && isValue( related[ foreign[ i ] ] ) )\n          {\n            input[ field ] = related[ foreign[ i ] ];\n          }\n        }\n      }\n      else\n      {\n        if ( !isValue( input[ key ] ) && isValue( related[ foreign ] ) )\n        {\n          input[ key ] = related[ foreign ];\n        }\n      }\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeFormat = options.timestampFormat || Database.Defaults.timestampFormat;\n  var timeType = options.timestampType || Database.Defaults.timestampType;\n  var timeUTC = options.timestampUTC || Database.Defaults.timestampUTC;\n  var timeCurrent = options.timestampCurrent || Database.Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDatabase.Defaults.timestampFormat = Timestamp.Millis;\nDatabase.Defaults.timestampType = Timestamp.Date;\nDatabase.Defaults.timestampUTC = false;\nDatabase.Defaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\n\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}