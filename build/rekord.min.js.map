{"version":3,"sources":["rekord.min.js"],"names":["root","factory","define","amd","module","exports","global","Rekord","this","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","setProperties","constructor","extendArray","extendArraySupported","create","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","setProperty","replaceMethod","methodFactory","func","F","args","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","addPlugin","callback","beforeCreation","on","Events","Options","Plugins","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","off","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Error","$on","$once","$after","$off","$trigger","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","value","promise","get","isComplete","results","database","Function","className","classes","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","discriminator","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","writable","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","$invalid","destroyModel","modelKey","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$sync","removeUnrelated","sync","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setValue","$hasKey","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","add","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","buildKey","join","otherFields","akey","bkey","unshift","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","callbackContext","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","clearKey","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","initial","grabInitial","grabModels","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","ignoreLoaded","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","relatedValue","modelFields","relatedFields","hasOne","preSave","populateInitial","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","onChange","postSave","preRemove","handleModelAdded","handleLazyLoad","onRelated","existingModel","relatedClones","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","existingThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","addMethod","addMethods"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.9 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define('Rekord', [], function() { // jshint ignore:line\n      return factory(root);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global);  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root);\n  }\n}(this, function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  setProperties( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar setProperty = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction setProperties(target, methods)\n{\n  for (var methodName in methods)\n  {\n    setProperty( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  setProperty( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\nfunction addPlugin( callback, beforeCreation )\n{\n  if ( beforeCreation )\n  {\n    return Rekord.on( Rekord.Events.Options, callback ); // (options)\n  }\n  else\n  {\n    return Rekord.on( Rekord.Events.Plugins, callback ); // (model, db, options)\n  }\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  setProperty( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      setProperty( $this, property, listeners = {} );\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    setProperties(target, {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    });\n  }\n  else\n  {\n    setProperties(target, {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    });\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      if ( isString( relationOptions ) )\n      {\n        relationOptions = {\n          model: relationOptions\n        };\n      }\n      else if ( !isObject( relationOptions ) )\n      {\n        relationOptions = {};\n      }\n\n      if ( !relationOptions.model && !relationOptions.discriminator )\n      {\n        relationOptions.model = name;\n      }\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nsetProperties( Database.prototype,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  setProperty( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nsetProperties( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    setProperties(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        setProperty( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.all[ key ] = this;\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $sync: function(prop, removeUnrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.sync( this, removeUnrelated );\n    }\n  },\n\n  $relate: function(prop, relate, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate, remoteData );\n    }\n  },\n\n  $unrelate: function(prop, unrelated, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated, remoteData );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      delete db.all[ oldKey ];\n      db.all[ newKey ] = this;\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nsetProperties( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nDependents.prototype =\n{\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n};\n\n\nfunction KeyHandler()\n{\n\n}\n\nKeyHandler.prototype =\n{\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n};\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    setProperties(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      setProperty( this, 'base', base );\n\n      this.connect();\n    }\n\n    setProperty( this, 'filter', filter );\n    \n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    setProperties(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    setProperties(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  setProperties(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input, remoteData)\n  {\n    this.relator.set( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input, remoteData)\n  {\n    this.relator.relate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input, remoteData)\n  {\n    this.relator.unrelate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Syncrhonizes the related models in this collection by re-evaluating all\n   * models for a relationship.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {boolean} [removeUnrelated=false] -\n   *    Whether to remove models that are no longer related. The $remove\n   *    function is not called on these models.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  sync: function(removeUnrelated)\n  {\n    this.relator.sync( this.model, removeUnrelated );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  setProperties(collection, {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  setProperties( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nsetProperties( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    setProperty( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n\n  setProperty( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nsetProperties( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\nsetProperties( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nsetProperties( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      setProperties( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function(initial)\n  {\n    return new ModelCollection( this.model.Database, initial );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear && !remoteData )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false || ignoreLoaded )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending || ignoreLoaded )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.populateInitial( initialValue, relation, model );\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  populateInitial: function(initialValue, relation, model)\n  {\n    if ( isObject( initialValue ) && relation.child )\n    {\n      var src = toArray( this.local );\n      var dst = toArray( this.model.Database.key );\n\n      for (var k = 0; k < src.length; k++)\n      {\n        initialValue[ dst[ k ] ] = model[ src[ k ] ];\n      }\n    }\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.populateInitial( relatedValue, relation, model );\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.related;\n      var remoteData = true;\n      var dontClear = true;\n      var relator = this;\n\n      var onRelated = function(related)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( related );\n\n          existing.each(function(existingModel)\n          {\n            if ( !given.has( existingModel.$key() ) )\n            {\n              relator.removeModel( relation, existingModel, remoteData, dontClear );\n            }\n          });\n        }\n      };\n\n      this.ready( this.handleLazyLoad( relation, onRelated ) );\n    }\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, related );\n      }\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, relator, model, this, relation );\n\n        relator.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var throughDatabase = this.through.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.throughs.values;\n      var remoteData = true;\n      var relator = this;\n\n      var onRelated = function(throughs)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( throughs );\n\n          for (var i = 0; i < existing.length; i++)\n          {\n            var existingThrough = existing[ i ];\n\n            if ( !given.has( existingThrough.$key() ) )\n            {\n              relator.removeModelFromThrough( relation, existingThrough, remoteData );\n            }\n          }\n        }\n      };\n\n      throughDatabase.ready( this.handleLazyLoad( relation, onRelated ), this );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, throughs );\n      }\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related && ( !this.where || this.where( related ) ) )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through, undefined, undefined, remoteData ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey, remoteData );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey, remoteData)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  where:                false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, true );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nextend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nextend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    setProperties( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nsetProperties( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n  \n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model at the given index.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.at( 0 ); // t0\n   * ```\n   *\n   * @method at\n   * @memberof Rekord.Model\n   * @param {Number} index -\n   *    The index of the model to return.\n   * @return {Rekord.Model} -\n   *    The reference to the model at the given index.\n   */\n  model.at = function(index)\n  {\n    return db.models[ index ];\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      setProperty( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\naddPlugin(function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\naddPlugin( function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  setProperty( Map.prototype, 'put', mapKeyChangePut );\n  setProperty( Map.prototype, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  setProperty( Map.prototype, 'put', Map_put );\n  setProperty( Map.prototype, 'remove', Map_remove );\n}\n\naddPlugin(function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    setProperties( model.prototype, methods );\n  }\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n  \n}, true );\n\naddPlugin(function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\naddPlugin(function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n  Rekord.addPlugin = addPlugin;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = Rekord.setProperty = setProperty;\n  Rekord.addMethods = Rekord.setProperties = setProperties;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}