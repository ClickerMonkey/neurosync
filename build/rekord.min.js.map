{"version":3,"sources":["rekord.min.js"],"names":["root","factory","define","amd","module","exports","global","Rekord","this","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","create","collectArray","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","isDefined","isFunction","constructor","apply","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","func","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","addPlugin","callback","beforeCreation","on","Events","Options","Plugins","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","target","functionName","events","secret","off","eventFunction","listener","result","subject","unlistener","unlistened","$methods","Class","method","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","push","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","args","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Error","methods","$on","$once","$after","$off","$trigger","props","applyOptions","options","defaults","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","copyValues","grabbed","p","pull","pulledValue","pulled","transfer","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","value","promise","get","isComplete","results","database","dynamic","className","classes","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","discriminator","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","HasReference","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","win","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","$db","keyChanges","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","window","construct","build","extend","parent","override","parentCopy","copyConstructor","instanceFactory","nativeArray","Settings","parentInstance","code","DynamicClass","Function","propThis","methodThis","replaceThis","methodName","writable","propertyName","methodFactory","existingMethod","F","RekordSettings","document","currentScript","script","getAttribute","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","removeListeners","failOnPendingChanges","hasPending","singularity","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASREFERENCE_INIT","HASREFERENCE_NINJA_REMOVE","HASREFERENCE_INITIAL_PULLED","HASREFERENCE_INITIAL","HASREFERENCE_CLEAR_MODEL","HASREFERENCE_SET_MODEL","HASREFERENCE_CLEAR_KEY","HASREFERENCE_UPDATE_KEY","HASREFERENCE_LOADED","HASREFERENCE_QUERY","HASREFERENCE_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","isOnline","navigator","onLine","online","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","saveAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","noReferences","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","contains","$isPending","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","addReference","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","PartialUpdate","FullUpdate","RemoteUpdate","has","saveReference","createModel","$status","$invalid","destroyModel","modelKey","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","delaySort","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$savedState","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$sync","removeUnrelated","sync","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","add","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","buildKey","join","otherFields","akey","bkey","unshift","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","callbackContext","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","promiseOrContext","contextOrCallback","callbackOrNull","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","grabAlways","publish","always","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","clearKey","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","initial","grabInitial","grabModels","pending","setProperty","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","clearForeignKey","debugClearKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","clearModel","setRelated","clearRelated","setModel","dontClear","onSaved","onRemoved","dirty","isDependent","handleModel","ignoreLoaded","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","relatedValue","modelFields","relatedFields","hasOne","child","preSave","populateInitial","src","dst","relatedClone","hasMany","listenForRelated","loadRelated","cascadeRemove","cascadeSave","onChange","postSave","preRemove","handleModelAdded","handleLazyLoad","onRelated","existingModel","relatedClones","hasManyThrough","through","cascadeSaveRelated","setThrough","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","existingThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","hasReference","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","created","grabAll","persist","searchAt","paging","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent","extendArray","addMethod","addMethods","replaceMethod"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.10 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define('rekord', [], function() { // jshint ignore:line\n      return factory(root);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global);  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root);\n  }\n}(this, function(global, undefined)\n{\n\n  var win = typeof window !== 'undefined' ? window : global;   // jshint ignore:line\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.create( values );\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collectArray(1, 2, 3, 4);\n * Rekord.collectArray([1, 2, 3, 4]); // same as above\n * Rekord.collectArray();\n * Rekord.collectArray([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collectArray(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return Collection.native( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\n// Class.create( construct, methods )\n// Class.extend( parent, construct, override )\n// Class.prop( target, name, value )\n// Class.props( target, properties )\n// Class.method( construct, methodName, method )\n// Class.method( construct, methods )\n// Class.replace( construct, methodName, methodFactory(super) )\n\n// constructor.create( ... )\n// constructor.native( ... ) // for arrays\n// constructor.$constuctor\n// constructor.prototype.$super\n// constructor.$methods\n// constructor.$prop( name, value ) // add to prototype\n// constructor.$method( methodName, method ) // add to prototype\n// constructor.$replace( methodName, methodFactory(super) )\n\nvar Class =\n{\n\n  create: function( construct, methods )\n  {\n    Class.prop( construct, 'create', Class.factory( construct ) );\n    Class.build( construct, methods, noop );\n  },\n\n  extend: function( parent, construct, override )\n  {\n    var methods = collapse( override, parent.$methods );\n    var parentCopy = Class.copyConstructor( parent );\n\n    construct.prototype = new parentCopy();\n\n    var instanceFactory = Class.factory( construct );\n\n    if ( Class.isArray( parent ) )\n    {\n      var nativeArray = function()\n      {\n        var arr = [];\n        Class.props( arr, methods );\n        construct.apply( arr, arguments );\n        return arr;\n      };\n\n      Class.prop( construct, 'native', nativeArray );\n      Class.prop( construct, 'create', Settings.nativeArray ? nativeArray : instanceFactory );\n    }\n    else\n    {\n      Class.prop( construct, 'create', instanceFactory );\n    }\n\n    Class.build( construct, methods, parent );\n  },\n\n  dynamic: function(parent, parentInstance, className, code)\n  {\n    var DynamicClass = new Function('return function ' + className + code)(); // jshint ignore:line\n\n    DynamicClass.prototype = parentInstance;\n\n    Class.build( DynamicClass, {}, parent );\n\n    return DynamicClass;\n  },\n\n  build: function(construct, methods, parent)\n  {\n    Class.prop( construct, '$methods', methods );\n    Class.prop( construct, '$prop', Class.propThis );\n    Class.prop( construct, '$method', Class.methodThis );\n    Class.prop( construct, '$replace', Class.replaceThis );\n    Class.prop( construct.prototype, '$super', parent );\n    Class.prop( construct.prototype, 'constructor', construct );\n    Class.props( construct.prototype, methods );\n  },\n\n  isArray: function( construct )\n  {\n    return Array === construct || construct.prototype instanceof Array;\n  },\n\n  method: function( construct, methodName, method )\n  {\n    if (construct.$methods)\n    {\n      construct.$methods[ methodName ] = method;\n    }\n\n    Class.prop( construct.prototype, methodName, method );\n  },\n\n  methodThis: function( methodName, method )\n  {\n    Class.method( this, methodName, method );\n  },\n\n  methods: function( construct, methods )\n  {\n    for (var methodName in methods)\n    {\n      Class.method( construct, methodName, methods[ methodName ] );\n    }\n  },\n\n  prop: (function()\n  {\n    if (Object.defineProperty)\n    {\n      return function( target, property, value )\n      {\n        Object.defineProperty( target, property, {\n          configurable: true,\n          enumerable: false,\n          writable: true,\n          value: value\n        });\n      };\n    }\n    else\n    {\n      return function( target, property, value )\n      {\n        target[ property ] = value;\n      };\n    }\n  })(),\n\n  propThis: function( property, value )\n  {\n    Class.prop( this.prototype, property, value );\n  },\n\n  props: function( target, properties )\n  {\n    for (var propertyName in properties)\n    {\n      Class.prop( target, propertyName, properties[ propertyName ] );\n    }\n  },\n\n  replace: function( target, methodName, methodFactory )\n  {\n    var existingMethod = target.prototype[ methodName ] || target[ methodName ] || noop;\n\n    Class.method( target, methodName, methodFactory( existingMethod ) );\n  },\n\n  replaceThis: function( methodName, methodFactory )\n  {\n    Class.replace( this, methodName, methodFactory );\n  },\n\n  copyConstructor: function(construct)\n  {\n    function F()\n    {\n\n    }\n\n    F.prototype = construct.prototype;\n\n    return F;\n  },\n\n  factory: function(construct)\n  {\n    function F(args)\n    {\n      construct.apply( this, args );\n    }\n\n    F.prototype = construct.prototype;\n\n    return function()\n    {\n      return new F( arguments );\n    };\n  }\n\n};\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    return func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\nfunction addPlugin( callback, beforeCreation )\n{\n  if ( beforeCreation )\n  {\n    return Rekord.on( Rekord.Events.Options, callback ); // (options)\n  }\n  else\n  {\n    return Rekord.on( Rekord.Events.Plugins, callback ); // (model, db, options)\n  }\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  var eventFunction = function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  };\n\n  if (target.$methods)\n  {\n    Class.method( target, functionName, eventFunction );\n  }\n  else\n  {\n    Class.prop( target, functionName, eventFunction );\n  }\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      Class.prop( $this, property, listeners = {} );\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  var methods = null;\n\n  if ( secret )\n  {\n    methods = {\n      $on: on,\n      $once: once,\n      $after: after,\n      $off: off,\n      $trigger: trigger\n    };\n  }\n  else\n  {\n    methods = {\n      on: on,\n      once: once,\n      after: after,\n      off: off,\n      trigger: trigger\n    };\n  }\n\n  if ( target.$methods )\n  {\n    Class.methods( target, methods );\n  }\n  else\n  {\n    Class.props( target, methods );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      target[ defaultProperty ] = option;\n    }\n    else\n    {\n      target[ defaultProperty ] = copy( defaultValue );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      target[ optionProperty ] = options[ optionProperty ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nvar Settings = global.RekordSettings || win.RekordSettings || {};\n\nif ( win.document && win.document.currentScript )\n{\n  var script = win.document.currentScript;\n\n  if (script.getAttribute('native-array') !== null)\n  {\n    Settings.nativeArray = true;\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = Class.dynamic(\n    Model,\n    new Model( database ),\n    database.className,\n    '(props, remoteData) { this.$init( props, remoteData ) }'\n  );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\nRekord.export = function()\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    win[ className ] = classes[ className ];\n  }\n};\n\nRekord.clear = function(removeListeners)\n{\n  var classes = Rekord.classes;\n\n  for (var className in classes)\n  {\n    classes[ className ].clear( removeListeners );\n  }\n};\n\nRekord.reset = function(failOnPendingChanges, removeListeners)\n{\n  var classes = Rekord.classes;\n\n  if ( failOnPendingChanges )\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      if ( db.hasPending() )\n      {\n        return Promise.reject( db );\n      }\n    }\n  }\n\n  return Promise.singularity(this, function()\n  {\n    for (var className in classes)\n    {\n      var db = classes[ className ].Database;\n\n      db.reset( false, removeListeners );\n    }\n  });\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASREFERENCE_INIT: 131,      // HasOne\n  HASREFERENCE_NINJA_REMOVE: 132, // Model, relation\n  HASREFERENCE_INITIAL_PULLED: 133, // Model, initial\n  HASREFERENCE_INITIAL: 134,    // Model, initial\n  HASREFERENCE_CLEAR_MODEL: 135, // relation\n  HASREFERENCE_SET_MODEL: 136,  // relation\n  HASREFERENCE_CLEAR_KEY: 137,  // Model, local\n  HASREFERENCE_UPDATE_KEY: 138, // Model, targetFields, Model, sourceFields\n  HASREFERENCE_LOADED: 139,     // Model, relation, [Model]\n  HASREFERENCE_QUERY: 140,      // Model, RemoteQuery, queryOption, query\n  HASREFERENCE_QUERY_RESULTS: 141, // Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\n\nRekord.isOnline = function()\n{\n  return !win.navigator || win.navigator.onLine !== false;\n};\n\nRekord.online = Rekord.isOnline();\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (win.addEventListener)\n  {\n    win.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    win.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    win.document.body.ononline = Rekord.setOnline;\n    win.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = Rekord.isOnline();\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.models = ModelCollection.create( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      if ( isString( relationOptions ) )\n      {\n        relationOptions = {\n          model: relationOptions\n        };\n      }\n      else if ( !isObject( relationOptions ) )\n      {\n        relationOptions = {};\n      }\n\n      if ( !relationOptions.model && !relationOptions.discriminator )\n      {\n        relationOptions.model = name;\n      }\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  saveAlways:           [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  noReferences:         false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\nClass.create( Database,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  clear: function(removeListeners)\n  {\n    var db = this;\n\n    db.all = {};\n    db.models.clear();\n\n    if ( removeListeners )\n    {\n      db.off();\n    }\n\n    return db;\n  },\n\n  hasPending: function()\n  {\n    return this.models.contains(function(model)\n    {\n      return model.$isPending();\n    });\n  },\n\n  reset: function(failOnPendingChanges, removeListeners)\n  {\n    var db = this;\n    var promise = new Rekord.Promise();\n\n    if ( failOnPendingChanges && db.hasPending() )\n    {\n      promise.reject( db );\n    }\n    else\n    {\n      db.clear( removeListeners );\n\n      db.store.reset( [], [],\n        function()\n        {\n          promise.resolve( db );\n        },\n        function()\n        {\n          promise.reject( db );\n        }\n      );\n    }\n\n    return promise;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.addReference( models[ i ], keys[ i ] );\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.addReference( model, key );\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.saveReference( model, key );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.saveReference( model, key, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.addReference( model, key );\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model, key)\n  {\n    if (!this.noReferences)\n    {\n      this.all[ key || model.$key() ] = model;\n    }\n  },\n\n  saveReference: function(model, key, delaySort)\n  {\n    if ( !this.noReferences )\n    {\n      this.models.put( key || model.$key(), model, delaySort );\n    }\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.saveReference( model, key );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database );\n\naddEventFunction( Database, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  Class.prop( this, '$db', db );\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\nClass.create( Model,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n\n    Class.props(this, {\n      $operation: null,\n      $relations: {},\n      $dependents: new Dependents( this ),\n      $savedState: false,\n      $saved: false,\n      $local: false\n    });\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        Class.prop( this, '$invalid', true );\n\n        return;\n      }\n\n      this.$db.addReference( this, key );\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.addReference( this, key );\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $sync: function(prop, removeUnrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.sync( this, removeUnrelated );\n    }\n  },\n\n  $relate: function(prop, relate, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate, remoteData );\n    }\n  },\n\n  $unrelate: function(prop, unrelated, remoteData)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated, remoteData );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    this.$savedState = false;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      delete db.all[ oldKey ];\n      db.addReference( this, newKey );\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model, true );\n\naddEventFunction( Model, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\nClass.create( Map,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nClass.create( Dependents,\n{\n\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n});\n\n\nfunction KeyHandler()\n{\n\n}\n\nClass.create( KeyHandler,\n{\n\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n\n});\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nClass.extend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nClass.extend( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredCollection.create( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return this.constructor.create( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return this.constructor.create();\n  }\n\n});\n\naddEventful( Collection );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    Class.props(this, {\n      onAdd:      bind( this, Filtering.handleAdd ),\n      onAdds:     bind( this, Filtering.handleAdds ),\n      onRemove:   bind( this, Filtering.handleRemove ),\n      onRemoves:  bind( this, Filtering.handleRemoves ),\n      onReset:    bind( this, Filtering.handleReset ),\n      onUpdates:  bind( this, Filtering.handleUpdates ),\n      onCleared:  bind( this, Filtering.handleCleared )\n    });\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      Class.prop( this, 'base', base );\n\n      this.connect();\n    }\n\n    Class.prop( this, 'filter', filter );\n\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return this.constructor.create( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nClass.extend( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page );\n\naddEventFunction( Page, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nClass.extend( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    Class.props(this, {\n      database: database,\n      map: new Map()\n    });\n\n    this.map.values = this;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return FilteredModelCollection.create( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return ModelCollection.create( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return ModelCollection.create( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nClass.extend( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    Class.props(this, {\n      onModelUpdated: bind( this, this.handleModelUpdate )\n    });\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  Class.props(this, {\n    model:    model,\n    relator:  relator\n  });\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nClass.extend( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input, remoteData)\n  {\n    this.relator.set( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input, remoteData)\n  {\n    this.relator.relate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @param {boolean} [remoteData=false] -\n   *    Whether this change is due to remote changes or changes that should not\n   *    trigger removes or saves.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input, remoteData)\n  {\n    this.relator.unrelate( this.model, input, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Syncrhonizes the related models in this collection by re-evaluating all\n   * models for a relationship.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {boolean} [removeUnrelated=false] -\n   *    Whether to remove models that are no longer related. The $remove\n   *    function is not called on these models.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  sync: function(removeUnrelated)\n  {\n    this.relator.sync( this.model, removeUnrelated );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return RelationCollection.create( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  Class.props( collection,\n  {\n    discriminator: discriminator,\n    discriminatorsToModel: discriminatorsToModel\n  });\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  Class.props( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\nClass.create( Search,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    Class.prop( this, '$db', database );\n\n    this.$append = false;\n    this.$url = url;\n    this.$set( props );\n    this.$results = ModelCollection.create( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nClass.extend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.cancelable = cancelable !== false;\n\n  Class.prop( this, 'results', null );\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promiseOrContext, contextOrCallback, callbackOrNull)\n  {\n    var promise = promiseOrContext;\n    var context = contextOrCallback;\n    var callback = callbackOrNull;\n\n    if (!(promise instanceof Promise))\n    {\n      promise = false;\n      context = promiseOrContext;\n      callback = contextOrCallback;\n    }\n\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      if (promise)\n      {\n        bindPromise( promise );\n      }\n\n      callback.call( context, singularity );\n    }\n\n    if (promiseCount === 0)\n    {\n      singularity.resolve();\n    }\n\n    return singularity;\n  };\n\n})();\n\nClass.create( Promise,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise );\n\n\nfunction Operation()\n{\n}\n\nClass.create( Operation,\n{\n\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved && this.canCascade( Cascade.Rest ) )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : this.grabAlways( db.saveAlways, changes, remote );\n    var publish = db.fullPublish ? remote : this.grabAlways( db.publishAlways, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  grabAlways: function(always, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( always.length )\n    {\n      for (var i = 0; i < always.length; i++)\n      {\n        var prop = always[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nClass.extend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.create( Relation,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      Class.props( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return RelationCollection.create( this.model.Database, model, this );\n  },\n\n  createCollection: function(initial)\n  {\n    return ModelCollection.create( this.model.Database, initial );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  clearForeignKey: function(related, remoteData)\n  {\n    var key = this.getTargetFields( related );\n\n    Rekord.debug( this.debugClearKey, this, related, key );\n\n    this.clearFields( related, key, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\nClass.extend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation, remoteData );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation, remoteData );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData, dontClear)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation, remoteData, dontClear );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation, remoteData, dontClear)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( !dontClear && !remoteData )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( relation.parent, remoteData );\n        }\n      }\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false || ignoreLoaded )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\nClass.extend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData, ignoreLoaded)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending || ignoreLoaded )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation, false, true );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          this.clearRelated( relation, false, true );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation, false, true );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.populateInitial( initialValue, relation, model );\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  populateInitial: function(initialValue, relation, model)\n  {\n    if ( isObject( initialValue ) && relation.child )\n    {\n      var src = toArray( this.local );\n      var dst = toArray( this.model.Database.key );\n\n      for (var k = 0; k < src.length; k++)\n      {\n        initialValue[ dst[ k ] ] = model[ src[ k ] ];\n      }\n    }\n  },\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n    var relatedValue = this.grabInitial( model, this.local );\n    var remoteData = true;\n    var ignoreLoaded = true;\n    var dontClear = true;\n\n    if ( relation )\n    {\n      if ( !isEmpty( relatedValue ) )\n      {\n        this.populateInitial( relatedValue, relation, model );\n        this.grabModel( relatedValue, this.handleModel( relation, remoteData, ignoreLoaded ), remoteData );\n      }\n      else if ( removeUnrelated )\n      {\n        this.clearRelated( relation, remoteData, dontClear );\n      }\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation, remoteData)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n\n      if ( this.clearKey )\n      {\n        this.clearForeignKey( relation.parent, remoteData );\n      }\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  clearKey:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, false, true );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      this.listenToModelAdded( this.handleModelAdded( relation ) );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.related;\n      var remoteData = true;\n      var dontClear = true;\n      var relator = this;\n\n      var onRelated = function(related)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( related );\n\n          existing.each(function(existingModel)\n          {\n            if ( !given.has( existingModel.$key() ) )\n            {\n              relator.removeModel( relation, existingModel, remoteData, dontClear );\n            }\n          });\n        }\n      };\n\n      this.ready( this.handleLazyLoad( relation, onRelated ) );\n    }\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, related );\n      }\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData, dontClear)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      related.$dependents.remove( model );\n\n      if ( !dontClear )\n      {\n        if ( this.clearKey )\n        {\n          this.clearForeignKey( related, remoteData );\n        }\n\n        if ( this.cascadeRemove )\n        {\n          if ( remoteData )\n          {\n            if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n            {\n              related.$remove( Cascade.Local );\n            }\n          }\n          else\n          {\n            related.$remove( this.cascadeRemove );\n          }\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  listenForRelated:     true,\n  loadRelated:          true,\n  where:                false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nClass.extend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, relator, model, this, relation );\n\n        relator.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    if ( this.listenForRelated )\n    {\n      throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n    }\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else if ( this.loadRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  sync: function(model, removeUnrelated)\n  {\n    var throughDatabase = this.through.Database;\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      var existing = relation.throughs.values;\n      var remoteData = true;\n      var relator = this;\n\n      var onRelated = function(throughs)\n      {\n        if ( removeUnrelated )\n        {\n          var given = this.createCollection();\n          given.reset( throughs );\n\n          for (var i = 0; i < existing.length; i++)\n          {\n            var existingThrough = existing[ i ];\n\n            if ( !given.has( existingThrough.$key() ) )\n            {\n              relator.removeModelFromThrough( relation, existingThrough, remoteData );\n            }\n          }\n        }\n      };\n\n      throughDatabase.ready( this.handleLazyLoad( relation, onRelated ), this );\n    }\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation, onRelated)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( onRelated )\n      {\n        onRelated.call( this, throughs );\n      }\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related && ( !this.where || this.where( related ) ) )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through, remoteData)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through, undefined, undefined, remoteData ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey, remoteData );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey, remoteData)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  where:                false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nClass.extend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      },\n\n      onChange: function()\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        if ( relator.where && !relator.where( this ) )\n        {\n          relator.removeModel( relation, this, true );\n        }\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() || (this.where && !this.where( related ) ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      if ( this.where )\n      {\n        related.$on( Model.Events.Change, relation.onChange );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n      related.$off( Model.Events.Change, relation.onChange );\n\n      this.sort( relation );\n      this.checkSave( relation, remoteData );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nClass.extend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\nfunction HasReference()\n{\n}\n\nRekord.Relations.hasReference = HasReference;\n\nHasReference.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  property:             true,\n  dynamic:              false\n};\n\nClass.extend( RelationSingle, HasReference,\n{\n\n  type: 'hasReference',\n\n  debugInit:          Rekord.Debugs.HASREFERENCE_INIT,\n  debugClearModel:    Rekord.Debugs.HASREFERENCE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASREFERENCE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASREFERENCE_LOADED,\n  debugQuery:         Rekord.Debugs.HASREFERENCE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASREFERENCE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasReference.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      related: null,\n      loaded: false,\n      dirty: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASREFERENCE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation, false, true );\n      }\n    };\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASREFERENCE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.$clone( properties );\n    }\n  },\n\n  isDependent: function(relation, related)\n  {\n    return false;\n  },\n\n  updateForeignKey: function()\n  {\n    // nothing\n  },\n\n  clearForeignKey: function()\n  {\n    // nothing\n  },\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( RelationCollection.create( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( ModelCollection.create(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    Class.props( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\nClass.create( Shard,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n  \n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.array = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.native( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model at the given index.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.at( 0 ); // t0\n   * ```\n   *\n   * @method at\n   * @memberof Rekord.Model\n   * @param {Number} index -\n   *    The index of the model to return.\n   * @return {Rekord.Model} -\n   *    The reference to the model at the given index.\n   */\n  model.at = function(index)\n  {\n    return db.models[ index ];\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return ModelCollection.create( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  \n  model.clear = function(removeListeners)\n  {\n    return db.clear( removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return ModelCollection.create( db, models );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      Class.replace( model, '$init', function($init)\n      {\n        return function()\n        {\n          $init.apply( this, arguments );\n\n          applyEventListeners( this, modelEvents );\n        };\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\naddPlugin(function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return win.File && win.FileReader && win.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof win.File )\n  {\n    return input;\n  }\n  else if ( input instanceof win.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof win.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in win.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new win.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\naddPlugin(function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\naddPlugin( function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  Class.method( Map, 'put', mapKeyChangePut );\n  Class.method( Map, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  Class.method( Map, 'put', Map_put );\n  Class.method( Map, 'remove', Map_remove );\n}\n\naddPlugin(function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    Class.methods( model, methods );\n  }\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.reset = function(failOnPendingChanges, removeListeners)\n  {\n    return db.reset( failOnPendingChanges, removeListeners );\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(model, db, options)\n{\n\n  model.searchAt = function(index, url, paging, options, props, success, failure)\n  {\n    var page = {page_index: index, page_size: 1};\n\n    var search = paging ?\n      new SearchPaged( db, url, collapse( options, page ), props ) :\n      new Search( db, url, options, props );\n\n    var promise = new Rekord.Promise();\n\n    promise.success( success );\n    promise.failure( failure );\n\n    search.$run().then(\n      function onSuccess(search, response, results) {\n        promise.resolve( results[ paging ? 0 : index ] );\n      },\n      function onFailure() {\n        promise.reject();\n      },\n      function onOffline() {\n        promise.noline();\n      }\n    );\n\n    return promise;\n  };\n\n});\n\naddPlugin(function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\naddPlugin(function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n  \n}, true );\n\naddPlugin(function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    Class.replace( model, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\naddPlugin(function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n  Rekord.addPlugin = addPlugin;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.array = collectArray;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.Settings = Settings;\n  Rekord.Class = Class;\n  Rekord.extend = Class.extend;\n  Rekord.extendArray = Class.extend;\n  Rekord.addMethod = Rekord.setProperty = Class.prop;\n  Rekord.addMethods = Rekord.setProperties = Class.props;\n  Rekord.replaceMethod = Class.replace;\n  Rekord.copyConstructor = Class.copyConstructor;\n  Rekord.factory = Class.factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}