{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","batch.js","Gate.js","Database.js","Model.js","Map.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Promise.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","dynamic.js","events.js","files.js","timestamps.js","util.js","rules/collection.js","rules/dates.js","rules/field_list.js","rules/fields.js","rules/foreign.js","rules/if.js","rules/list.js","rules/range.js","rules/regex.js","rules/sizes.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","validation.js","expressions/date.js","expressions/field.js","expressions/relative.js","expressions/today.js","expressions/tomorrow.js","expressions/yesterday.js","rules/accepted.js","rules/required.js","rules/types.js","transforms/abs.js","transforms/apply.js","transforms/base64.js","transforms/ceil.js","transforms/endOfDay.js","transforms/filter.js","transforms/floor.js","transforms/mod.js","transforms/null.js","transforms/round.js","transforms/startOfDay.js","transforms/trim.js","transforms/unbase64.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","parseDate","utc","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","splits","ae","joined","saveWhere","Wheres","createWhere","where","promise","get","isComplete","results","Events","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","tryParseFloat","tryParseInt","startOfDay","setHours","endOfDay","ruleGenerator","ruleName","defaultMessage","isInvalid","Validation","Rules","params","getAlias","message","checkNoParams","messageTemplate","determineMessage","setMessage","setValue","newValue","generateMessage","joinFriendly","lastSeparator","itemSeparator","last","pop","mapFromArray","alias","extra","$field","$alias","$value","collectionRuleGenerator","matchField","matchValue","comma","otherField","$matchField","$matchAlias","$matchValue","dateRuleGenerator","dateExpression","parseExpression","parsedTime","$date","fieldListRuleGenerator","matchValues","parts","shift","list","$params","$list","fieldsRuleGenerator","fieldNames","fieldAliases","$fields","$fieldAliases","foreignRuleGenerator","fieldName","$class","subRuleGenerator","otherRules","colon","rules","validators","parseRules","invalids","setInvalid","Stop","listRuleGenerator","inList","rangeRuleGenerator","defaultMessages","start","end","range","string","number","object","$start","$end","size","typeMessage","$size","regexRuleGenerator","regex","sizeRuleGenerator","$number","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","loadRelations","loadRemote","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","ready","persistent","hasData","saving","grabModel","checkModel","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","putRemoteData","instantiate","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","records","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","lastKey","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","add","intersect","complement","delaySort","insertAt","removed","removing","element","removeAll","removeWhere","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","$getDefaults","$append","$url","$results","$promise","$run","$encode","$handleSuccess","$handleFailure","isPending","offline","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","notLive","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","grabAll","searchPaged","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","aliases","validation","messages","required","validations","PreValidate","$valid","$validations","$validationMessages","chain","fieldValid","ValidatePass","ValidateFail","$validate","Expression","Expressions","Delimiter","Escape","RuleSeparator","rule","parseRule","ruleMessageOrData","ruleMessage","ruleInput","customValidator","ruleParams","validatorFactory","parsers","parser","expressionFunction","RELATIVE_REGEX","RELATIVE_UNITS","ms","millisecond","milliseconds","s","seconds","mins","minute","minutes","hr","hour","hours","day","days","wk","week","weeks","month","months","yr","year","years","relative","exec","amount","unit","unitScale","setTime","getter","today","tomorrow","setDate","getDate","yesterday","accepted","acceptable","valueString","toLowerCase","1","yes","y","true","m","validate","messageOption","invalid","confirmed","different","invalidCount","totalCount","numeric","yesno","false","no","0","abs","btoa","mod","round","trim","String","unbase64","atob"],"mappings":"CAAA,SAAAA,EAAAC,GCwBA,QAAAC,GAAAC,EAAAC,GAEA,MAAAD,aAAAE,OAEAF,EAEAG,EAAAH,GAEAA,EAAAI,MAAAH,GAEAI,EAAAL,IAEAA,MA+BA,QAAAM,GAAAC,EAAAP,EAAAQ,GAIA,IAAA,GAFAC,GAAAD,GAAAE,EAEAC,EAAA,EAAAC,EAAAL,EAAAM,OAAAD,EAAAD,EAAAA,IAEA,GAAAF,EAAAF,EAAAI,GAAAX,GAEA,MAAAW,EAIA,QAAA,EAqBA,QAAAG,GAAAC,GAEA,GAAAC,GAAAC,UAAAJ,OAAA,IAAAK,EAAAH,GAAAb,MAAAiB,UAAAC,MAAAC,KAAAJ,WAAAF,CAEA,OAAA,IAAAO,IAAAN,GAGA,QAAAO,GAAAR,EAAAJ,EAAAa,GAEA,GAAAC,GAAAV,EAAAJ,EACAI,GAAAJ,GAAAI,EAAAS,GACAT,EAAAS,GAAAC,EAGA,QAAAC,GAAAnB,GAKA,IAAA,GAHAK,GAAAL,EAAAM,OACAc,EAAAC,KAAAC,MAAAjB,EAAA,GAEAD,EAAA,EAAAgB,EAAAhB,EAAAA,IAEAY,EAAAhB,EAAAK,EAAAD,EAAA,EAAAA,EAGA,OAAAJ,GAGA,QAAAuB,GAAAtB,EAAAuB,GAEA,IAAAvB,EAEA,OAAA,CAGA,KAAA,GAAAG,GAAA,EAAAC,EAAAmB,EAAAlB,OAAA,EAAAD,EAAAD,EAAAA,IAEA,GAAAH,EAAAuB,EAAApB,GAAAoB,EAAApB,EAAA,IAAA,EAEA,OAAA,CAIA,QAAA,EAGA,QAAAqB,GAAAD,GAEA,IAAA,GAAApB,GAAA,EAAAA,EAAAoB,EAAAlB,OAAAF,IACA,CACA,GAAAsB,GAAAF,EAAApB,EAEA,IAAAN,EAAA4B,GAEA,OAAAC,EAAAD,GAIA,OAAA,EC5JA,QAAAE,GAAAC,EAAAC,EAAAC,GAGAF,EAAAG,EAAAH,GAEAC,EAAAlB,UAAA,GAAAiB,GAEAI,EAAAH,EAAAlB,UAAAmB,GAEAD,EAAAlB,UAAAsB,YAAAJ,EAGA,QAAAK,GAAAN,EAAAC,EAAAC,GAGAK,KAEAR,EAAAC,EAAAC,EAAAC,GACAD,EAAAO,OAAAC,EAAAR,KAMAD,EAAAG,EAAAH,GAGAC,EAAAO,OAAA,WAEA,GAAAE,GAAA,GAAAV,EAGA,OAFAC,GAAAU,MAAAD,EAAA7B,WACA+B,EAAAV,EAAAQ,GACAA,IAMA,QAAAH,KAIA,QAAAM,MAFA,GAAAN,EAAAO,YAAApD,EACA,CAEAmD,EAAA9B,YACA,IAAAgC,GAAA,GAAAF,EACAE,GAAAC,KAAA,GACAT,EAAAO,UAAA,IAAAC,EAAAtC,OAGA,MAAA8B,GAAAO,UA0BA,QAAAV,GAAAa,EAAAC,GAEA,IAAA,GAAAC,KAAAD,GAEAE,GAAAH,EAAAE,EAAAD,EAAAC,IAIA,QAAAE,GAAAJ,EAAAE,EAAAG,GAEAF,GAAAH,EAAAE,EAAAG,EAAAL,EAAAE,KAMA,QAAAhB,GAAAoB,GAEA,QAAAC,MAEA,MADAA,GAAAzC,UAAAwC,EAAAxC,UACAyC,EAIA,QAAAf,GAAAJ,GAEA,QAAAmB,GAAAC,GAEA,MAAApB,GAAAM,MAAAe,KAAAD,GAKA,MAFAD,GAAAzC,UAAAsB,EAAAtB,UAEA,WAEA,MAAA,IAAAyC,GAAA3C,YC7FA,QAAA8C,GAAA/D,GAEA,MAAAA,KAAAF,EAkBA,QAAAkE,GAAAhE,GAEA,SAAAA,GAAAA,EAAAyC,aAAAzC,EAAAqB,MAAArB,EAAA+C,OAsBA,QAAAkB,GAAAjE,GAEA,SAAAA,GAAAA,EAAAkE,UAAAF,EAAAhE,IAAAA,EAAAmB,oBAAAgD,KAkBA,QAAAhE,GAAAH,GAEA,MAAA,gBAAAA,GAqBA,QAAAoE,GAAApE,GAEA,MAAA,gBAAAA,KAAAqE,MAAArE,GAmBA,QAAAsE,GAAAtE,GAEA,MAAA,iBAAAA,GAoBA,QAAAuE,GAAAvE,GAEA,MAAAA,aAAAwE,MAoBA,QAAAC,GAAAzE,GAEA,MAAAA,aAAA0E,QAoBA,QAAAxD,GAAAlB,GAEA,MAAAA,aAAAE,OAsBA,QAAAgC,GAAAlC,GAEA,MAAA,QAAAA,GAAA,gBAAAA,GAuBA,QAAAK,GAAAL,GAEA,QAAAA,IAAAF,GAAA,OAAAE,GAQA,QAAA2E,MA2BA,QAAAC,GAAAC,EAAAlB,GAEA,MAAA,YAEAA,EAAAZ,MAAA8B,EAAA5D,YAWA,QAAA6D,KAEA,MAAAC,KAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,IAGA,QAAAA,KAEA,OAAA,OAAA,EAAAnD,KAAAoD,UAAA,GAAAC,SAAA,IAAAC,UAAA,GAKA,QAAAC,GAAAnF,GAEA,GAAAkB,EAAAlB,IAAAG,EAAAH,GAEA,MAAAA,GAAAa,MAEA,IAAAqB,EAAAlC,GACA,CACA,GAAAoF,GAAA,CAEA,KAAA,GAAAC,KAAArF,GAEAoF,GAGA,OAAAA,GAEA,MAAAhB,GAAApE,GAEAA,EAGA,EAGA,QAAAsF,GAAAtF,GAEA,GAAA,OAAAA,GAAA,SAAAA,GAAA,IAAAA,EAEA,OAAA,CAEA,IAAAkB,EAAAlB,IAAAG,EAAAH,GAEA,MAAA,KAAAA,EAAAa,MAEA,IAAA0D,EAAAvE,GAEA,MAAA,KAAAA,EAAAuF,WAAAlB,MAAArE,EAAAuF,UAEA,IAAArD,EAAAlC,GACA,CACA,IAAA,GAAAqF,KAAArF,GAEA,OAAA,CAEA,QAAA,EAGA,OAAA,EAGA,QAAAwF,GAAAxF,GAEA,MAAAK,GAAAL,GAKAiE,EAAAjE,GAEA,GAAAA,GAEAgE,EAAAhE,GAEAA,IAGAyF,EAAAzF,GAZAA,ECrVA,QAAA0F,GAAAC,EAAAnF,EAAAoF,GAEA,MAAAC,IAAAF,GAAAG,EAAAtF,EAAAoF,GAGA,QAAAG,GAAAC,EAAAxF,EAAAoF,GAEA,GAAAK,GAAAH,EAAAtF,EAAAoF,EAEA,OAAA5B,GAAAgC,GAKA,SAAAjF,EAAAmF,GAEA,GAAAC,GAAAF,EAAAlF,EAAAmF,EAEA,OAAA,KAAAC,EAAAA,EAAAH,EAAAjF,EAAAmF,IAPAD,EAqBA,QAAAH,GAAAtF,EAAAoF,GAEA,GAAA5B,EAAAxD,GAEA,MAAAA,EAEA,IAAAL,EAAAK,GACA,CACA,GAAAA,IAAAqF,IAEA,MAAAA,IAAArF,EAGA,IAAA,MAAAA,EAAA4F,OAAA,GACA,CACA,GAAAC,GAAAP,EAAAtF,EAAA0E,UAAA,IAAAU,EAEA,OAAA,UAAA7E,EAAAmF,GAEA,OAAAG,EAAAtF,EAAAmF,IAGA,MAAA,KAAA1F,EAAAF,QAAA,KAEA,SAAAS,EAAAmF,GAEA,GAAAI,GAAAC,GAAA/F,EAAAO,GACAyF,EAAAD,GAAA/F,EAAA0F,EAEA,OAAAI,GAAAG,cAAAD,IAGA,KAAAhG,EAAAF,QAAA,KAEA,SAAAS,EAAAmF,GAEA,GAAAQ,GAAAC,GAAAnG,EAAAO,GACA6F,EAAAD,GAAAnG,EAAA0F,EAEA,OAAAW,GAAAH,EAAAE,EAAAhB,IAKA,SAAA7E,EAAAmF,GAEA,GAAAY,GAAAzG,EAAAU,GAAAA,EAAAP,GAAAO,EACAgG,EAAA1G,EAAA6F,GAAAA,EAAA1F,GAAA0F,CAEA,OAAAW,GAAAC,EAAAC,EAAAnB,IAIA,GAAA1E,EAAAV,GACA,CAGA,IAAA,GAFA6F,MAEA1F,EAAA,EAAAA,EAAAH,EAAAK,OAAAF,IAEA0F,EAAA1F,GAAAmF,EAAAtF,EAAAG,GAAAiF,EAGA,OAAA,UAAA7E,EAAAmF,GAIA,IAAA,GAFAC,GAAA,EAEAxF,EAAA,EAAAA,EAAA0F,EAAAxF,QAAA,IAAAsF,EAAAxF,IAEAwF,EAAAE,EAAA1F,GAAAI,EAAAmF,EAGA,OAAAC,IAIA,MAAA,MCtFA,QAAAzF,GAAAK,EAAAmF,GAEA,MAAAnF,KAAAmF,EAGA,QAAAc,GAAAjG,EAAAmF,GAEA,MAAA,KAAAW,EAAA9F,EAAAmF,GAGA,QAAAe,GAAAlG,EAAAmF,GAEA,GAAAnF,IAAAmF,EAAA,OAAA,CACA,IAAA,OAAAnF,GAAA,OAAAmF,EAAA,OAAA,CACA,IAAAnF,IAAAA,GAAAmF,IAAAA,EAAA,OAAA,CAEA,IAAAgB,SAAAnG,GACAoG,QAAAjB,EACA,IAAAgB,IAAAC,EAAA,OAAA,CAEA,IAAAC,GAAAlG,EAAAH,GACAsG,EAAAnG,EAAAgF,EACA,IAAAkB,IAAAC,EAAA,OAAA,CAEA,IAAAD,EAAA,CACA,GAAArG,EAAAF,SAAAqF,EAAArF,OAAA,OAAA,CACA,KAAA,GAAAF,GAAA,EAAAA,EAAAI,EAAAF,OAAAF,IACA,IAAAsG,EAAAlG,EAAAJ,GAAAuF,EAAAvF,IACA,OAAA,CAGA,QAAA,EAGA,GAAA4D,EAAAxD,GACA,MAAAwD,GAAA2B,IAAAe,EAAAlG,EAAAwE,UAAAW,EAAAX,UAEA,IAAAd,EAAA1D,GACA,MAAA0D,GAAAyB,IAAAnF,EAAAkE,aAAAiB,EAAAjB,UAGA,IAAA,WAAAiC,EAAA,CACA,IAAA,GAAAI,KAAAvG,GACA,KAAA,MAAAuG,EAAAlB,OAAA,IAAApC,EAAAjD,EAAAuG,KACAA,IAAApB,IAAAe,EAAAlG,EAAAuG,GAAApB,EAAAoB,KACA,OAAA,CAIA,KAAA,GAAAA,KAAApB,GACA,KAAA,MAAAoB,EAAAlB,OAAA,IAAApC,EAAAkC,EAAAoB,KACAA,IAAAvG,IACA,OAAA,CAIA,QAAA,EAGA,OAAA,EAGA,QAAAwG,GAAAxG,EAAAmF,GAEA,MAAAnF,KAAAmF,EAAA,EAAAA,EAAAnF,EAAA,GAAA,EAGA,QAAA8F,GAAA9F,EAAAmF,EAAAN,GAEA,GAAA7E,GAAAmF,EAEA,MAAA,EAGA,IAAAY,GAAAzG,EAAAU,GACAgG,EAAA1G,EAAA6F,EAEA,OAAAY,KAAAC,EAEAD,IAAAlB,GAAAmB,GAAAnB,EAAA,GAAA,GAGArB,EAAAxD,KAEAA,EAAAA,EAAAwE,WAEAhB,EAAA2B,KAEAA,EAAAA,EAAAX,WAEAnB,EAAArD,IAAAqD,EAAA8B,GAEAqB,EAAAxG,EAAAmF,GAEAhF,EAAAH,IAAAG,EAAAgF,GAEAqB,EAAAxG,EAAAF,OAAAqF,EAAArF,QAEAyD,EAAAvD,IAAAuD,EAAA4B,GAEAnF,EAAA,GAAA,GAGAA,EAAA,IAAA0F,cAAAP,EAAA,KC9IA,QAAAsB,GAAAnE,EAAAoE,EAAAC,EAAAC,GAEA,GAAAC,GAAAD,EAAA,MAAA,KACAE,EAAAF,EAAA,OAAA,KAEAnE,IAAAH,EAAAoE,EAAA,SAAAK,EAAAjD,GAKA,QAAAkD,KAEA,GAAAC,GAAAF,EAAA/E,MAAA8B,GAAAoD,EAAAhH,UAEA+G,MAAA,GAEAE,IAIA,QAAAA,KAEAC,IAEAF,EAAAJ,GAAAH,EAAAK,GACAI,GAAA,GAlBA,GAAAF,GAAAnE,KACAqE,GAAA,CAuBA,OAFAF,GAAAL,GAAAF,EAAAK,GAEAG,IAgCA,QAAAE,GAAA/E,EAAAsE,GA4BA,QAAAU,GAAAC,EAAAC,EAAAb,EAAAI,EAAAjD,GAEA,IAAAb,EAAA8D,GAEA,MAAAnD,EAGA,IAAA+C,GAAA3H,EAAA2H,EAAA,KACAc,EAAAF,EAAAC,EAEAC,KAEAA,EAAAF,EAAAC,MAGA,KAAA,GAAA5H,GAAA,EAAAA,EAAA+G,EAAA7G,OAAAF,IACA,CACA,GAAA8H,GAAAf,EAAA/G,GACA+H,EAAAF,EAAAC,EAEAC,KAEAA,EAAAF,EAAAC,OAGAC,EAAAtF,MAAA0E,EAAAjD,GAAAyD,EAAA,IAGA,MAAA,YAEA,IAAA,GAAA3H,GAAA,EAAAA,EAAA+G,EAAA7G,OAAAF,IAEAgI,EAAAH,EAAAd,EAAA/G,GAAAmH,IAuCA,QAAAF,GAAAF,EAAAI,EAAAjD,GAEA,MAAAwD,GAAAvE,KAAA,OAAA4D,EAAAI,EAAAjD,GAqCA,QAAA+D,GAAAlB,EAAAI,EAAAjD,GAEA,MAAAwD,GAAAvE,KAAA,SAAA4D,EAAAI,EAAAjD,GAGA,QAAAgE,GAAAnB,EAAAI,EAAAjD,GAEA,MAAAwD,GAAAvE,KAAA,UAAA4D,EAAAI,EAAAjD,GAIA,QAAA8D,GAAAH,EAAAM,EAAAhB,GAEA,GAAAU,GAAAM,IAAAN,GAIA,IAAA,GAFAE,GAAAF,EAAAM,GAEAtH,EAAAkH,EAAA7H,OAAA,EAAAW,GAAA,EAAAA,IAEAkH,EAAAlH,GAAAuH,KAAAjB,GAEAY,EAAAM,OAAAxH,EAAA,GAOA,QAAAyH,GAAAC,EAAA7D,GAEA6D,GAAA7D,IAAA6D,UAEAA,GAAA7D,GAoBA,QAAAwC,GAAAH,EAAAI,GAGA,GAAA/D,EAAA2D,GAOA,CACA,GAAAA,GAAA3H,EAAA2H,EAAA,IAGA,IAAA1D,EAAA8D,GAYA,IAAA,GAAAnH,GAAA,EAAAA,EAAA+G,EAAA7G,OAAAF,IAEAgI,EAAA7E,KAAAqF,KAAAzB,EAAA/G,GAAAmH,GACAa,EAAA7E,KAAAsF,OAAA1B,EAAA/G,GAAAmH,GACAa,EAAA7E,KAAAuF,QAAA3B,EAAA/G,GAAAmH,OAdA,KAAA,GAAAnH,GAAA,EAAAA,EAAA+G,EAAA7G,OAAAF,IAEAsI,EAAAnF,KAAAqF,KAAAzB,EAAA/G,IACAsI,EAAAnF,KAAAsF,OAAA1B,EAAA/G,IACAsI,EAAAnF,KAAAuF,QAAA3B,EAAA/G,QAfAsI,GAAAnF,KAAA,QACAmF,EAAAnF,KAAA,UACAmF,EAAAnF,KAAA,UA4BA,OAAAA,MAIA,QAAAwF,GAAAd,EAAAM,EAAAjF,EAAA0F,GAEA,GAAAf,GAAAM,IAAAN,GACA,CAIA,IAAA,GAHAE,GAAAF,EAAAM,GACAU,IAAAC,EAEA9I,EAAA,EAAAA,EAAA+H,EAAA7H,OAAAF,IACA,CACA,GAAAmH,GAAAY,EAAA/H,EAEAmH,IAEAA,EAAA4B,KAAAF,IAEA1B,EAAA4B,GAAAF,EACA1B,EAAAiB,GAAAhG,MAAA+E,EAAA6B,GAAA9F,GAEAiE,IAAAY,EAAA/H,KAEAA,EAAA,KAMA4I,SAEAf,GAAAM,IAcA,QAAAc,GAAAlC,EAAA7D,GAIA,IAAA,GAFA6D,GAAA3H,EAAA2H,EAAA,KAEA/G,EAAA,EAAAA,EAAA+G,EAAA7G,OAAAF,IACA,CACA,GAAAkJ,GAAAnC,EAAA/G,EAEA2I,GAAAxF,KAAAqF,KAAAU,EAAAhG,GAAA,GACAyF,EAAAxF,KAAAsF,OAAAS,EAAAhG,GAAA,GACAyF,EAAAxF,KAAAuF,QAAAQ,EAAAhG,GAAA,GAGA,MAAAC,MAzRA,GAAAiF,GAAA,EACAY,EAAA,EACAD,EAAA,EAEAD,EAAA,CAwRA9B,IAEAnE,GAAAH,EAAA,MAAAuE,GACApE,GAAAH,EAAA,QAAAuF,GACApF,GAAAH,EAAA,SAAAwF,GACArF,GAAAH,EAAA,OAAAwE,GACArE,GAAAH,EAAA,WAAAuG,KAIApG,GAAAH,EAAA,KAAAuE,GACApE,GAAAH,EAAA,OAAAuF,GACApF,GAAAH,EAAA,QAAAwF,GACArF,GAAAH,EAAA,MAAAwE,GACArE,GAAAH,EAAA,UAAAuG,IC3WA,QAAAE,GAAAzG,EAAA0G,EAAAC,EAAArC,GAIA,QAAAsC,GAAA5E,EAAA6E,GAEAlG,EAAAkG,GAEA1G,GAAAH,EAAAgC,EAAA6E,GAIA7G,EAAAgC,GAAA6E,EAVAH,EAAAA,KAcA,KAAA,GAAA1E,KAAA2E,GACA,CACA,GAAAG,GAAAH,EAAA3E,GACA+E,EAAAL,EAAA1E,GACAgF,EAAAhK,EAAA+J,EAEA,KAAAC,GAAAF,IAAArK,EAEA,KAAAuF,GAAA,uBAEAgF,GAEAJ,EAAA5E,EAAA+E,GAIAH,EAAA5E,EAAAI,EAAA0E,IAIA,IAAA,GAAA9E,KAAA0E,GAEA1E,IAAA2E,IAEAC,EAAA5E,EAAA0E,EAAA1E,GAIAsC,GAEAtE,EAAAiH,SAAAP,EAIA1G,EAAA0G,QAAAA,EAwBA,QAAAQ,GAAAC,EAAAC,EAAAC,EAAAC,EAAA1D,GAEA,GAAA2D,GAAA3D,GAAA4D,GAAA5D,MAEA,IAAA9G,EAAAsK,GAEA,MAAAG,GAAAJ,EAAAC,GAAAC,EAAAC,GAIA,KAAA,GAAAhK,GAAA,EAAAA,EAAA8J,EAAA5J,OAAAF,IACA,CACA,GAAAmK,GAAAL,EAAA9J,GACAoK,EAAAJ,EAAAhK,EAEA,KAAAiK,EAAAJ,EAAAM,GAAAJ,EAAAK,IAEA,OAAA,EAIA,OAAA,EAOA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,GAAAjK,EAAAgK,GACA,CACA,IAAA,GAAAvK,GAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IAEA,IAAAwK,EAAAF,EAAAC,EAAAvK,KAEA,OAAA,CAIA,QAAA,EAIA,MAAAwK,GAAAF,EAAAC,IAKA,QAAAE,GAAAlC,EAAAmC,EAAAC,GAIA,IAAA,GAFAC,MAEA5K,EAAA,EAAAA,EAAA0K,EAAAxK,OAAAF,IACA,CACA,GAAA2G,GAAA+D,EAAA1K,EAEA2G,KAAA4B,KAEAqC,EAAAjE,GAAAgE,EAAA7F,EAAAyD,EAAA5B,IAAA4B,EAAA5B,IAIA,MAAAiE,GAGA,QAAAC,GAAAtC,EAAAmC,EAAAC,GAEA,GAAAnL,EAAAkL,GACA,CACA,GAAAI,GAAAvC,EAAAmC,EAEA,OAAAC,GAAA7F,EAAAgG,GAAAA,EAMA,IAAA,GAFAC,MAEA/K,EAAA,EAAAA,EAAA0K,EAAAxK,OAAAF,IACA,CACA,GAAA2G,GAAA+D,EAAA1K,GACA8K,EAAAvC,EAAA5B,EAEAoE,GAAAtI,KAAAkI,EAAA7F,EAAAgG,GAAAA,GAGA,MAAAC,GAIA,QAAA1I,GAAA2I,EAAAC,GAEA,IAAA,GAAAvG,KAAAsG,GAEAC,EAAAvG,GAAAsG,EAAAtG,EAGA,OAAAuG,GAGA,QAAAC,KAIA,IAAA,GAFAxI,MAEA1C,EAAA,EAAAA,EAAAM,UAAAJ,OAAAF,IACA,CACA,GAAAI,GAAAE,UAAAN,EAEA,IAAAuB,EAAAnB,GAEA,IAAA,GAAAsE,KAAAtE,GAEAsE,IAAAhC,KAEAA,EAAAgC,GAAAtE,EAAAsE,IAMA,MAAAhC,GAGA,QAAAyI,GAAA9L,GAEA,IAAA,GAAAqF,KAAArF,GAEA,MAAAqF,EAAAe,OAAA,UAEApG,GAAAqF,EAIA,OAAArF,GAGA,QAAA+L,GAAA/L,GAEA,IAAA,GAAAqF,KAAArF,GAEAgE,EAAAhE,EAAAqF,WAEArF,GAAAqF,EAIA,OAAArF,GAGA,QAAAyF,GAAAzF,EAAAgM,GAEA,GAAA,OAAAhM,GAAAA,IAAAF,GAAA,gBAAAE,IAAAgE,EAAAhE,IAAAyE,EAAAzE,GAEA,MAAAA,EAGA,IAAAkB,EAAAlB,GACA,CAGA,IAAA,GAFAiM,MAEAtL,EAAA,EAAAA,EAAAX,EAAAa,OAAAF,IAEAsL,EAAA7I,KAAAqC,EAAAzF,EAAAW,GAAAqL,GAGA,OAAAC,GAGA,GAAA1H,EAAAvE,GAEA,MAAA,IAAAwE,MAAAxE,EAAAuF,UAGA,IAAA0G,KAEA,KAAA,GAAA5G,KAAArF,IAEAgM,GAAA,MAAA3G,EAAAe,OAAA,MAEA6F,EAAA5G,GAAAI,EAAAzF,EAAAqF,GAAA2G,GAIA,OAAAC,GAGA,QAAAC,IAAAC,EAAAC,EAAAf,EAAA7K,GAIA,IAAA,GAFA2F,MAEAxF,EAAA,EAAAA,EAAA0K,EAAAxK,OAAAF,IACA,CACA,GAAA2G,GAAA+D,EAAA1K,EAEAH,GAAA2L,EAAA7E,GAAA8E,EAAA9E,MAEAnB,EAAAmB,GAAA7B,EAAA0G,EAAA7E,KAIA,MAAAnB,GCjRA,QAAAQ,IAAA0F,EAAAC,GAEA,GAAAC,IAAA,CAwCA,OAtCAF,GAAAG,QAAA7F,GAAA8F,MAAA,SAAApH,GAEA,GAAAkH,EAKA,GAAArL,EAAAoL,GACA,CACA,GAAA3L,GAAA+L,SAAArH,EAEAhB,OAAA1D,GAMA4L,GAAA,EAJAD,EAAAA,EAAA3L,OAOA,IAAAuB,EAAAoK,GAEA,GAAAjH,IAAAiH,GACA,CACA,GAAApC,GAAAoC,EAAAjH,EACAiH,GAAAtI,EAAAkG,GAAAA,IAAAA,MAIAqC,IAAA,MAKAA,IAAA,IAIAA,EAAAD,EAAA,OAKA,QAAA/F,IAAAoG,EAAAL,GAEA,MAAAK,GAAAH,QAAAjG,GAAAkG,MAAA,SAAAG,GAEA,MAAAjG,IAAAiG,EAAAN,KAMA,QAAAO,IAAAF,GAEA,MAAA,UAAAL,GAEA,MAAA/F,IAAAoG,EAAAL,IAIA,QAAAQ,IAAA9M,EAAA+M,GAYA,MAVA5M,GAAAH,KAEA+M,IAAA/M,GAAA,QAEAA,EAAAwE,KAAAmC,MAAAnC,KAAAmC,MAAA3G,GAAA,GAAAwE,MAAAxE,IAEAoE,EAAApE,KAEAA,EAAA,GAAAwE,MAAAxE,IAEAuE,EAAAvE,IAAAoE,EAAApE,EAAAuF,WAEAvF,GAGA,ECpDA,QAAAgN,IAAArH,EAAAsH,GAEA,MAAAC,IAAAvH,GAAAwH,GAAAF,GAGA,QAAAE,IAAAF,GAEA,GAAAG,GAAAC,GAAAJ,EAEA,OAAA9M,GAAA8M,IAAAA,IAAAC,IAEAA,GAAAD,GAGA,SAAAhC,GAEA,MAAAqC,YAAAF,EAAAnC,KAMA,QAAAsC,IAAA5H,EAAAP,EAAAoI,GAEA,MAAAC,IAAA9H,GAAA0H,GAAAjI,EAAAoI,GA0BA,QAAAH,IAAAjI,EAAAoI,GAEA,GAAAxJ,EAAAoB,GAEA,MAAAA,EAEA,IAAAjF,EAAAiF,GAEA,MAAAA,KAAAqI,IAEAA,GAAArI,GAGA,KAAAA,EAAA9E,QAAA,KAEA,SAAA2K,GAEA,MAAA1E,IAAAnB,EAAA6F,IAGA,KAAA7F,EAAA9E,QAAA,KAEA,SAAA2K,GAEA,MAAAtE,IAAAvB,EAAA6F,IAKA,SAAAA,GAEA,MAAAA,GAAAA,EAAA7F,GAAAtF,EAIA,IAAAoB,EAAAkE,GAEA,MAAA,UAAA6F,GAEA,MAAAO,GAAAP,EAAA7F,GAAAsI,KAAAF,GAGA,IAAAtL,EAAAkD,GACA,CACA,GAAAuI,MACAC,IAEA,KAAA,GAAAvI,KAAAD,GAEAuI,EAAAvK,KAAAiC,GACAuI,EAAAxK,KAAAiK,GAAAjI,EAAAC,GAAAmI,GAGA,OAAA,UAAAvC,GAIA,IAAA,GAFAS,MAEA/K,EAAA,EAAAA,EAAA0E,EAAAxE,OAAAF,IAEA+K,EAAAtI,KAAAwK,EAAAjN,GAAAsK,EAAA0C,EAAAhN,KAGA,OAAA+K,GAAAgC,KAAAF,IAKA,MAAA,UAAAvC,GAEA,MAAAA,ICvJA,QAAA4C,IAAAjB,GAEA,MAAA,KAAAA,EAAA/L,OAAA+L,EAAAkB,cAAAlB,EAAAxG,OAAA,GAAA0H,cAGA,QAAAC,IAAApI,GAEA,MAAAA,GAAA6G,QAAAuB,GAAAtB,MAAAoB,IAKA,QAAAzN,IAAAJ,EAAAC,EAAA+N,GAMA,IAJA,GAAAC,GAAAjO,EAAAI,MAAAH,GACAU,EAAA,EACAC,EAAAqN,EAAApN,OAAA,EAEAD,EAAAD,GACA,CACA,GAAAI,GAAAkN,EAAAtN,GACAuN,EAAAnN,EAAAF,OAAAmN,EAAAnN,MAEA,IAAAE,EAAAmE,UAAAgJ,KAAAF,EACA,CACA,GAAA9H,GAAA+H,EAAAtN,EAAA,GACAsL,EAAAgC,EAAAtN,EAAA,GACAwN,EAAApN,EAAAmE,UAAA,EAAAgJ,GAAAhI,EAAA+F,CAEAgC,GAAAjF,OAAArI,EAAA,EAAAwN,GACAvN,GAAA,MAIAD,IAAA,EACAsN,EAAAjF,OAAArI,EAAA,GACAC,GAAA,EAIA,MAAAqN,GC4BA,QAAAG,IAAAzI,EAAAP,EAAApE,EAAAiG,GAEA,MAAAoH,IAAA1I,GAAA2I,GAAAlJ,EAAApE,EAAAiG,GA+BA,QAAAqH,IAAAlJ,EAAA8E,EAAAjD,GAEA,GAAA2D,GAAA3D,GAAAvG,CAEA,IAAAsD,EAAAoB,GAEA,MAAAA,EAEA,IAAAlE,EAAAkE,GACA,CAGA,IAAA,GAFAiB,MAEA1F,EAAA,EAAAA,EAAAyE,EAAAvE,OAAAF,IACA,CACA,GAAA4N,GAAAnJ,EAAAzE,EAEA0F,GAAAjD,KAAAlC,EAAAqN,GAAAD,GAAAvL,MAAAe,KAAAyK,GAAAD,GAAAC,IAGA,MAAA,UAAAtD,GAEA,IAAA,GAAAtK,GAAA,EAAAA,EAAA0F,EAAAxF,OAAAF,IAEA,IAAA0F,EAAA1F,GAAAsK,GAEA,OAAA,CAIA,QAAA,GAGA,GAAA/I,EAAAkD,GAEA,MAAA,UAAA6F,GAEA,IAAA,GAAA5F,KAAAD,GAEA,IAAAwF,EAAAK,EAAA5F,GAAAD,EAAAC,IAEA,OAAA,CAIA,QAAA,EAGA,IAAAlF,EAAAiF,GACA,CACA,GAAAA,IAAAiJ,IAEA,MAAAA,IAAAjJ,EAGA,IAAAgI,GAAAC,GAAAjI,EAEA,OAAA/E,GAAA6J,GAEA,SAAAe,GAEA,MAAAL,GAAAwC,EAAAnC,GAAAf,IAKA,SAAAe,GAEA,MAAA5K,GAAA+M,EAAAnC,KAMA,MAAA,UAAAA,GAEA,OAAA,GCxKA,QAAAJ,IAAAd,GAEA,GAAAyE,GAAA3D,GAAA4D,IAAA1E,EAAApE,KAEA,IAAA6I,EAAAE,aAEA,MAAAF,GAAAG,QAAA,EAGA9D,IAAAjB,QAAAiB,GAAA+D,OAAAC,SAAA9E,GAEA,IAAA+E,GAAA,GAAA5K,IAAA6F,GAEAkB,EAAA,GAAA8D,UAAA,mBAAAD,EAAAE,UAAA,4DA8BA,OA7BA/D,GAAA9J,UAAA,GAAAgD,IAAA2K,GAEAA,EAAA3K,MAAA8G,EACAA,EAAA/G,SAAA4K,EAEAjE,GAAAoE,QAAAH,EAAAnJ,MAAAsF,EAEAJ,GAAAjB,QAAAiB,GAAA+D,OAAAM,SAAAjE,EAAA6D,EAAA/E,IAEAc,GAAAsE,SAEAL,EAAAM,UAAA,SAAAC,GAEAA,GAEAP,EAAAQ,eAMAzE,GAAA0E,SAAAnM,KAAA0L,GAGAjE,GAAA4D,IAAAK,EAAAnJ,MAAA6J,QAAAvE,GACAJ,GAAA4D,IAAAK,EAAAE,WAAAQ,QAAAvE,GAEAJ,GAAA4E,MAAA5E,GAAA6E,OAAAC,SAAAb,EAAA/E,GAEAkB,EA4GA,QAAA2E,IAAAC,EAAAC,GAEA,OAAA1L,EAAAyL,KAAAA,EAAAC,KAAAA,EC5JA,QAAAC,IAAAC,EAAAC,EAAAC,GAOA,IAAA,GALAC,GAAApQ,EAAAiQ,EAAA,UACAI,EAAArQ,EAAAkQ,EAAA,UACAI,EAAAC,GAAAlN,KAAA8M,GAAA,EACAH,EAAAQ,GAAAF,GAAA,GAAA/O,IAEAX,EAAA,EAAAA,EAAAwP,EAAAtP,OAAAF,IACA,CACA,GAAA6P,GAAAL,EAAAxP,GACA8P,EAAAC,GAAAN,EAAAL,EAEA,IAAA5P,EAAAqQ,GAEAA,IAAA3F,IAAAoE,QAEAwB,EAAA5F,GAAAoE,QAAAuB,KAIA,SAAA7K,EAAA8K,GAEA5F,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA6D,GAEAA,EAAAnJ,OAAAA,GAEA8K,EAAAxF,MAIAuF,EAAAC,OAGA,IAAAxM,EAAAuM,GAEAC,EAAAD,OAEA,CAAA,GAAAA,KAAA,EAWA,KAAAA,GAAA,oCATA,KAAA,GAAAG,KAAA9F,IAAAoE,QAEAwB,EAAA5F,GAAAoE,QAAA0B,GAGA9F,IAAAjD,GAAAiD,GAAA+D,OAAAM,QAAAuB,KASA,QAAAC,IAAAN,EAAAL,GAEA,MAAA,UAAAa,GAKA,IAAA,GAHAC,GAAAD,EAAA1M,SACA4M,EAAAD,EAAAC,KAEAnQ,EAAA,EAAAA,EAAAyP,EAAAvP,OAAAF,IACA,CACA,GAAAoQ,GAAAX,EAAAzP,EAIA,QAFAqQ,GAAA5N,KAAA0N,EAAAC,EAAAD,EAAAC,IAEAA,GAEA,IAAA,MACAD,EAAAG,IAAA,SAAA5B,EAAA6B,GAEAnB,EAAA3M,MACA0L,SAAA+B,EACAM,QAAAP,EACAQ,UAAA,MACA/B,QAAAA,EACA6B,QAAAA,IAGA,MACA,KAAA,MACAJ,EAAArC,IAAA,SAAAxD,EAAAoE,EAAA6B,GAEAnB,EAAA3M,MACA0L,SAAA+B,EACAM,QAAAP,EACAQ,UAAA,MACA/B,QAAAA,EACA6B,QAAAA,EACAjG,MAAAA,IAGA,MACA,KAAA,SACA6F,EAAAlO,OAAA,SAAAqI,EAAAoG,EAAAhC,EAAA6B,GAEAnB,EAAA3M,MACA0L,SAAA+B,EACAM,QAAAP,EACAQ,UAAA,SACA/B,QAAAA,EACA6B,QAAAA,EACAjG,MAAAA,EACAoG,QAAAA,IAGA,MACA,KAAA,SACAP,EAAAQ,OAAA,SAAArG,EAAAoG,EAAAhC,EAAA6B,GAEAnB,EAAA3M,MACA0L,SAAA+B,EACAM,QAAAP,EACAQ,UAAA,SACA/B,QAAAA,EACA6B,QAAAA,EACAjG,MAAAA,EACAoG,QAAAA,IAGA,MACA,KAAA,SACAP,EAAAS,OAAA,SAAAtG,EAAAoE,EAAA6B,GAEAnB,EAAA3M,MACA0L,SAAA+B,EACAM,QAAAP,EACAQ,UAAA,SACA/B,QAAAA,EACA6B,QAAAA,EACAjG,MAAAA,IAGA,MACA,KAAA,QACA6F,EAAAU,MAAA,SAAAC,EAAAD,EAAAnC,EAAA6B,GAEAnB,EAAA3M,MACA0L,SAAA+B,EACAM,QAAAP,EACAQ,UAAA,QACA/B,QAAAA,EACA6B,QAAAA,EACAO,IAAAA,EACAJ,QAAAG,IAGA,MACA,SACA,KAAAT,GAAA,6CAMA,QAAAW,MAEA,IAAA,GAAA/Q,GAAA,EAAAA,EAAA4P,GAAA1P,OAAAF,IACA,CACA,GAAAoP,GAAAQ,GAAA5P,GACAuP,EAAAI,GAAA3P,EAEAoP,GAAAlP,SAEAqP,EAAAH,GAEAA,EAAAxG,UAKA,QAAAoI,MAEAC,KAGA,QAAAC,MAEAD,KAEA,IAAAA,IAEAF,KAIA,QAAAI,MAEA,IAAA,GAAAnR,GAAA,EAAAA,EAAAqQ,GAAAnQ,OAAAF,GAAA,EACA,CACA,GAAAmQ,GAAAE,GAAArQ,EAAA,GACA0E,EAAA2L,GAAArQ,EAAA,GACAgD,EAAAqN,GAAArQ,EAAA,EAEAmQ,GAAAzL,GAAA1B,EAGA4M,GAAA1P,OAAA,EACAyP,GAAAzP,OAAA,EACAmQ,GAAAnQ,OAAA,EAGA,QAAAkR,IAAApO,EAAAkB,GAEA,IAEA8M,KAEAhO,EAAAZ,MAAA8B,GAEA,MAAAgF,GAEA,KAAAA,GAEA,QAEAgI,MC7NA,QAAAG,IAAAlK,GAEA,GAAAmK,IAAA,EACAC,KAEAC,EAAA,WAEAF,EAEAnK,EAAA/E,MAAAe,KAAA7C,WAIAiR,EAAA9O,KAAAU,KAAAsO,GAAAhR,MAAA2B,MAAA9B,YAqBA,OAjBAkR,GAAAE,KAAA,WAEA,IAAAJ,EACA,CACA,IAAA,GAAAtR,GAAA,EAAAA,EAAAuR,EAAArR,OAAAF,GAAA,EACA,CACA,GAAAkE,GAAAqN,EAAAvR,GACAkD,EAAAqO,EAAAvR,EAAA,EAEAmH,GAAA/E,MAAA8B,EAAAhB,GAGAqO,EAAArR,OAAA,EACAoR,GAAA,IAIAE,EC3BA,QAAAjO,IAAA6F,GAEA,GAAAC,GAAA9F,GAAAoO,QAGAxI,GAAAhG,KAAAiG,EAAAC,EAGA,KAAA,GAAA3E,KAAA0E,GAEA1E,IAAA2E,KAEAlG,KAAAuB,GAAA0E,EAAA1E,GAKA,IAAAkN,GAAAzO,KAAAyO,IACArH,EAAApH,KAAAoH,MACA,IAAAhK,EAAAqR,GAEA,IAAA,GAAA5R,GAAA4R,EAAA1R,OAAA,EAAAF,GAAA,EAAAA,IAEAL,EAAA4K,EAAAqH,EAAA5R,OAAA,GAEAuK,EAAAsH,QAAAD,EAAA5R,QAMAL,GAAA4K,EAAAqH,MAAA,GAEArH,EAAAsH,QAAAD,EAKAzO,MAAA2O,KAAA1S,EAAA+D,KAAAyO,KACAzO,KAAA4O,OAAA,GAAAC,IAAA7O,MACAA,KAAAmN,OACAnN,KAAA8O,UACA9O,KAAAkL,UAAAlL,KAAAkL,WAAAjB,GAAAjK,KAAA6B,MACA7B,KAAA+O,aAAA,EACA/O,KAAAgP,gBAAA,EACAhP,KAAAiP,aAAA,EACAjP,KAAAkP,cAAA,EACAlP,KAAAmP,cAAA,EACAnP,KAAAoP,kBAAA,EACApP,KAAAqP,aAAA,EACArP,KAAAsP,WAAA3N,EAAAyF,GACApH,KAAAuP,aAAA,GAAAC,IAAA,MAAA,GAGAxP,KAAAyP,QAAAzP,KAAAiG,GAGAjG,KAAAgN,KAAAhN,KAAA0P,WAAA1P,MACAA,KAAA2P,MAAA3P,KAAA4P,YAAA5P,MACAA,KAAA6P,KAAA7P,KAAA8P,WAAA9P,MAGAA,KAAA+P,cAAA/P,KAAAtD,WAAAsD,KAAAgQ,sBACAhQ,KAAAiQ,YAAAjQ,KAAAkQ,UACAlQ,KAAAmQ,aAAAnQ,KAAAoQ,WAGApQ,KAAAqQ,aACArQ,KAAAsQ,gBAEA,KAAA,GAAAC,KAAAtK,GAEA,GAAAsK,IAAAxJ,IAAAyJ,UAAA,CAKA,GAAAC,GAAA1J,GAAAyJ,UAAAD,EAEA,IAAAE,EAAApT,oBAAAqT,IAAA,CAKA,GAAAC,GAAA1K,EAAAsK,EAEA,KAAA,GAAA1O,KAAA8O,GACA,CACA,GAAAC,GAAAD,EAAA9O,GACAgP,EAAA,GAAAJ,EAEAI,GAAAC,KAAA9Q,KAAA6B,EAAA+O,GAEAC,EAAAE,MAEA/Q,KAAAsP,WAAAhQ,KAAAuC,GAGA7B,KAAAqQ,UAAAxO,GAAAgP,EACA7Q,KAAAsQ,cAAAhR,KAAAuC,MAKA,QAAAmP,IAAA7J,EAAA8J,EAAAC,GAEA,GAAAC,GAAAnR,KAAAmR,SAEA,KAAA,GAAA5P,KAAA0P,GAEA1P,IAAA4P,KAEAF,EAAA1P,GAAA4P,EAAA5P,GAAA0P,EAAA1P,GAAA4F,EAAA5F,EAAA2P,GAIA,OAAAD,GAGA,QAAAG,IAAAC,GAEA,GAAAC,GAAAtR,KAAAsR,SAEA,KAAA,GAAA/P,KAAA8P,GAEA9P,IAAA+P,KAEAD,EAAA9P,GAAA+P,EAAA/P,GAAA8P,EAAA9P,GAAA8P,EAAA9P,GAIA,OAAA8P,GAGA,QAAAE,IAAApK,GAEA,MAAAA,GAAAqK,OAGA,QAAAC,IAAAzG,GAEA,MAAAjE,IAAAiG,KAAAhC,GAGA,QAAA0G,IAAA1G,GAEA,MAAAjE,IAAA4I,MAAA3E,GAGA,QAAA2G,IAAA3G,GAEA,MAAAjE,IAAA8I,KAAA7E,GAGA,QAAA4G,IAAAC,GAEA,MAAAA,GAGA,QAAAC,IAAAD,GAEA,MAAAA,GC/JA,QAAAxR,IAAA0M,GAEA/M,KAAA+R,IAAAhF,EAytBA,QAAAiF,IAAA7K,EAAA4E,EAAAkG,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAA3H,GAAA,GAAA8E,IAAA,MAAA,EAEA,IAAA1D,GAAAC,EAAAuG,GAAAC,MAEA,GAAAC,GAAArL,EAAAsL,MAAAR,EAAA,SAAAhB,GACAyB,IACAC,IACAjI,EAAAgB,QAAAvE,EAAA8J,KAEAyB,EAAAvL,EAAAsL,MAAAP,EAAA,SAAAjB,EAAA2B,GACAJ,IACAG,IACAjI,EAAAmI,OAAA1L,EAAAyL,EAAA3B,KAEA0B,EAAAxL,EAAAsL,MAAAN,EAAA,WACAK,IACAE,IACAhI,EAAAoI,OAAA3L,SAGA,IAAA2E,GAAAC,EAAAuG,GAAAS,OAEA,GAAAP,GAAArL,EAAAsL,MAAAL,EAAA,SAAAnB,GAEAyB,IACAhI,EAAAgB,QAAAvE,EAAA8J,KAEAyB,EAAAvL,EAAAsL,MAAAJ,EAAA,SAAApB,EAAA2B,GAEAJ,IACA9H,EAAAmI,OAAA1L,EAAA8J,SAKAvG,GAAAgB,QAAAvE,EAGA,OAAAuD,GCnwBA,QAAAsI,MAMAhT,KAAA9C,UAMA8C,KAAA2O,QAMA3O,KAAAiT,WCTA,QAAAzV,IAAAN,GAEA8C,KAAAkT,OAAAhW,GAAA,GCdA,QAAAiW,IAAAC,EAAAC,EAAAC,GAEAtT,KAAAuT,UAAAzS,EAAAd,KAAAA,KAAAwT,eACAxT,KAAAqT,SAAAA,EACArT,KAAAsT,UAAAA,GAAA,EACAtT,KAAAyT,UAAA,EACAzT,KAAA0T,cAAAN,GCYA,QAAAO,IAAAnL,EAAAoL,GAEA5T,KAAAc,OACAd,KAAA8Q,KAAAtI,EAAAoL,GCTA,QAAA/E,IAAA7D,EAAA4D,EAAAiF,GAEA7T,KAAA8Q,KAAA9F,EAAA4D,EAAAiF,GCIA,QAAAC,IAAAtL,EAAAoL,GAEA5T,KAAAc,OACAd,KAAA8Q,KAAAtI,EAAAoL,GCRA,QAAAG,IAAA/I,EAAA7D,EAAA6M,EAAApF,EAAAiF,GAEA7T,KAAAmH,MAAAA,EACAnH,KAAAgU,QAAAA,EAEAhU,KAAA8Q,KAAA9F,EAAA4D,EAAAiF,GCXA,QAAAI,IAAAb,EAAAc,EAAAC,GAEAf,EAAAc,cAAAA,EACAd,EAAAe,sBAAAA,CAGA,IAEAC,IAFAhB,EAAAiB,kBACAjB,EAAAkB,WACAlB,EAAAgB,OACAG,EAAAnB,EAAAmB,UAoFA,OAlFA7V,GAAA0U,GAcAiB,kBAAA,SAAAG,GAEA,GAAApW,EAAAoW,GACA,CACA,GAAAC,GAAAD,EAAAxU,KAAAkU,eACA/M,EAAAnH,KAAAmU,sBAAAM,EAEA,IAAAtN,EAEA,MAAAA,GAAA/G,SAAAiU,kBAAAG,GAIA,MAAAA,IAcAF,WAAA,SAAAE,EAAAX,GAEA,GAAAW,YAAAnU,IAEA,MAAAmU,EAGA,IAAAC,GAAAlY,EAAAiY,GAAAA,EAAAxU,KAAAkU,eAAA,KACA/M,EAAAnH,KAAAmU,sBAAAM,EAEA,OAAAtN,GAAAA,EAAA/G,SAAAkU,WAAAE,EAAAX,GAAA,MAWAO,MAAA,WAEA,MAAAH,IAAAG,EAAAnV,MAAAe,MAAAkU,EAAAC,IAWAI,WAAA,WAEA,MAAAN,IAAAM,EAAAtV,MAAAe,MAAAkU,EAAAC,MAKAf,ECxFA,QAAAsB,IAAA1J,EAAA2C,EAAA1H,EAAAsB,EAAAoN,GAEA3U,KAAA4U,MAAA5J,EAAA2C,EAAA1H,EAAAsB,EAAAoN,GCaA,QAAAE,IAAA7J,EAAA2C,EAAA1H,EAAAsB,EAAAoN,GAEA3U,KAAA4U,MAAA5J,EAAA2C,EAAA1H,EAAAsB,EAAAoN,GCnCA,QAAAnF,IAAAsF,EAAAC,GAEA/U,KAAA4S,OAAApD,GAAAwF,OAAAC,QACAjV,KAAA6K,QAAA,KACA7K,KAAA+U,WAAAA,KAAA,EAEA7U,EAAA4U,IAEAA,EACAhU,EAAAd,KAAAA,KAAA0L,SACA5K,EAAAd,KAAAA,KAAA6S,QACA/R,EAAAd,KAAAA,KAAA8S,QACAhS,EAAAd,KAAAA,KAAAkV,SCZA,QAAAC,OCDA,QAAAC,IAAAjO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAAuJ,IAAAnO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAAwJ,IAAApO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAAyJ,IAAArO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAA0J,IAAAtO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAA2J,IAAAvO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAA4J,IAAAxO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAA6J,IAAAzO,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCFA,QAAA8J,IAAA1O,EAAA4E,GAEA/L,KAAAqV,MAAAlO,EAAA4E,GCDA,QAAA2E,OCDA,QAAAoF,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OCAA,QAAAC,OCeA,QAAAC,IAAArL,GAEAhL,KAAAgL,SAAAA,ECJA,QAAAsL,IAAAC,EAAA9R,EAAA+R,GAEA,GAAA7L,GAAAzK,EAAAsW,GAAAA,EACApY,EAAAoY,IAAAtW,EAAAsW,EAAA7L,KAAA6L,EAAA7L,IAAA9J,EACA4V,EAAArY,EAAAoY,IAAAtW,EAAAsW,EAAAC,KAAAD,EAAAC,IAAA5V,CAEA,IAAA6V,OAAAC,eAEAD,OAAAC,eAAAJ,EAAA9R,GAEAmS,cAAA,EACAC,YAAA,EACAlM,IAAAA,EACA8L,IAAAA,QAIA,CACA,GAAA7B,GAAA2B,EAAA3B,KAEA2B,GAAA3B,MAAA,WAEAA,EAAA3V,MAAAe,KAAA7C,UAEA,IAAA2Z,GAAA9W,KAAAyE,GAAAkG,EAAA1L,MAAAe,MAEA+W,EAAA,WAEA,GAAAC,GAAAhX,KAAAyE,EAEAuS,KAAAF,EAEAL,EAAAlZ,KAAAyC,KAAAgX,GAIAF,EAAA9W,KAAAyE,GAAAkG,EAAA1L,MAAAe,MAIAA,MAAAiX,OAAA5W,GAAAyK,OAAAoM,QAAAH,EAAA/W,QCRA,QAAAmX,IAAAvT,EAAAI,EAAAH,EAAAuT,GAEA,GAAAC,IACAvT,GAAAD,EAAA,MAAA,KACAiB,KAAAjB,EAAA,QAAA,OACAkB,MAAAlB,EAAA,SAAA,SAGAa,EAAA0S,KAEA,IAAAlX,EAAA8D,GAEAU,EAAApF,MAEAgY,KAAAD,EAAAvT,GACAF,OAAAA,EACA2T,OAAAvT,QAGA,IAAA5G,EAAA4G,IAAA,IAAAA,EAAAjH,QAAAmD,EAAA8D,EAAA,IAEAU,EAAApF,MAEAgY,KAAAD,EAAAvT,GACAF,OAAAA,EACA2T,OAAAvT,EAAA,GACAjD,QAAAiD,EAAA,SAGA,IAAA5F,EAAA4F,GAEA,IAAA,GAAAwT,KAAAxT,GAEA,GAAAwT,IAAAH,GACA,CACA,GAAAI,GAAAzT,EAAAwT,GACAF,EAAAD,EAAAG,EAEAtX,GAAAuX,GAEA/S,EAAApF,MAEAgY,KAAAA,EACA1T,OAAAA,EACA2T,OAAAE,IAGAra,EAAAqa,IAAA,IAAAA,EAAA1a,QAAAmD,EAAAuX,EAAA,KAEA/S,EAAApF,MAEAgY,KAAAA,EACA1T,OAAAA,EACA2T,OAAAE,EAAA,GACA1W,QAAA0W,EAAA,KAOA,MAAA/S,GAGA,QAAAgT,IAAAnY,EAAAmF,GAEA,IAAA,GAAA7H,GAAA,EAAAA,EAAA6H,EAAA3H,OAAAF,IACA,CACA,GAAA8a,GAAAjT,EAAA7H,EAEA0C,GAAAoY,EAAAL,MAAAK,EAAA/T,OAAA+T,EAAAJ,OAAAI,EAAA5W,UChDA,QAAA6W,MAEA,MAAA7b,GAAA8b,MAAA9b,EAAA+b,YAAA/b,EAAAgc,SAGA,QAAAC,IAAAxD,GAEA,MAAAA,aAAAzY,GAAA8b,KAEArD,EAEAA,YAAAzY,GAAAkc,KAEAzD,EAEAA,YAAAzY,GAAAgc,UAAAvD,EAAAzX,OAAA,EAEAyX,EAAA,IAGA,EAGA,QAAA0D,IAAAhc,GAEA,MAAAA,GAGA,QAAAic,IAAAjc,GAEA,GAAAW,GAAAR,EAAAH,GAAAA,EAAAM,QAAA,YAAA,EAEA,OAAA,KAAAK,EAAAX,EAAAA,EAAAkF,UAAAvE,EAAA,GAGA,QAAAub,IAAAjR,EAAAlB,GAEAA,EAAAoS,UAAAlR,EAAAmR,YAEAnR,EAAAoR,QAIA,QAAAC,IAAArR,EAAA1C,EAAA2B,EAAAqS,EAAAxS,GAEAkB,EAAAuR,OAAAvR,EAAAuR,WACAvR,EAAAuR,OAAAjU,IACA2B,MAAAA,EACAuS,KAAAvS,EACAqS,KAAAA,EACAxS,QAAAA,GAIA,QAAA2S,IAAAC,EAAAzS,EAAAe,EAAA1C,EAAAwB,GAEA,GAAA/B,GAAAlI,EACA8c,GAAA,CA0BA,OAxBAD,IAAAA,EAAAE,YAEAF,EAAAE,YAAA3S,EAAAe,EAAA1C,EAAA,SAAAkU,GAEAxR,EAAAuR,OAAAjU,GAAAkU,KAAAA,EAEAG,GAEA3R,EAAA1C,GAAAkU,EACAP,GAAAjR,EAAAlB,IAIA/B,EAAAyU,IAMAzU,EAAAkC,EAGA0S,GAAA,EAEA5U,EAGA,QAAA8U,IAAAC,EAAAC,EAAAjT,GAEA,GAAA4S,GAAA9R,GAAAoS,eAAAlT,EAAA4S,UAOA,OALAI,KAAAld,GAAA+b,WAAAza,WAEA0J,GAAAjB,QAAAiB,GAAA+D,OAAAsO,mBAGA,SAAA5E,EAAArN,EAAA1C,GAEA,GAAAgU,GAAAT,GAAAxD,EAEA,IAAAiE,KAAA,EACA,CACA,GAAAY,GAAA,GAAAtd,GAAA+b,WACA5T,EAAAlI,EACA8c,GAAA,CAqBA,OAnBAO,GAAAC,OAAA,SAAAvT,GAEA,GAAAK,GAAA8S,EAAAnT,EAAAxG,OAAA2E,OAEAsU,IAAArR,EAAA1C,EAAA2B,EAAAqS,EAAAxS,GAEA/B,EAAA0U,GAAAC,EAAAzS,EAAAe,EAAA1C,EAAAwB,GAEA6S,IAEA3R,EAAA1C,GAAAP,EACAkU,GAAAjR,EAAAlB,KAIAoT,EAAAJ,GAAAR,GAEAK,GAAA,EAEA5U,EAEA,GAAA9F,EAAAoW,IAAAA,EAAA+E,KACA,CACA,GAAArV,GAAAlI,EAEAwd,EAAA,SAAApT,GAEAlC,EAAAkC,EAKA,OAFAW,IAAAjB,QAAAiB,GAAA+D,OAAA2O,aAAAjF,EAAArN,EAAA1C,EAAA+U,IAEAtV,EAMA,MAFAsU,IAAArR,EAAA1C,EAAA+P,EAAA,KAAAvO,GAEA2S,GAAAC,EAAArE,EAAArN,EAAA1C,EAAAwB,IAiFA,QAAAyT,IAAAlF,EAAArN,EAAAwS,EAAAzI,GAEA,GAAA/J,EAAAuR,QAAAiB,IAAAxS,GAAAuR,OACA,CACA,GAAAkB,GAAAzS,EAAAuR,OAAAiB,EAEA,IAAAzI,GAAA0I,EAAA7I,QAAA,IAAAG,GAAA0I,EAAAjK,SAAA,EAEA,MAAA3T,EAGA,KAAAkV,GAAA0I,EAAAnB,KACA,CACA,GAAAlR,GAAAD,EAAAsS,EAAAnB,KAAA1R,GAAA8S,gBAAA,EAIA,OAFAtS,GAAAgS,MAAA,EAEAhS,EAGA,GAAAiN,IAAAoF,EAAAjB,KAYA,MAVAzH,IAAA0I,EAAAnB,MAEAtR,EAAAsL,MAAApS,GAAAyK,OAAAgP,WAAA,iBAEAF,GAAAnB,KAEAtR,EAAA4S,cAAApE,GAAArD,GAAAS,SAIA6G,EAAAxT,MAIA,MAAAoO,GCxMA,QAAAwF,IAAA9d,EAAA4L,EAAAmB,GAEA,GAAAgR,GAAAjR,GAAA9M,EAAA+M,EAEA,IAAAgR,KAAA,EAEA,OAAA,CAGA,KAAAnS,EAEA,MAAAmS,EAGA,QAAAnS,GAEA,IAAAoS,IAAAxZ,KACA,MAAAuZ,EACA,KAAAC,IAAAC,OACA,MAAAF,GAAAxY,SACA,KAAAyY,IAAAE,QACA,MAAAtc,MAAAC,MAAAkc,EAAAxY,UAAA,IACA,SACA,MAAAsF,IAAAsT,WAAAJ,EAAAnS,ICtJA,QAAAwS,IAAApe,GAEA,GAAAqG,GAAAiH,WAAAtN,EAOA,OALAqE,OAAAgC,KAEArG,EAAAqG,GAGArG,EAGA,QAAAqe,IAAAre,GAEA,GAAAqG,GAAAqG,SAAA1M,EAOA,OALAqE,OAAAgC,KAEArG,EAAAqG,GAGArG,EAGA,QAAAse,IAAAnY,GAWA,MATA5B,GAAA4B,GAEAA,EAAAoY,SAAA,EAAA,EAAA,EAAA,GAEAna,EAAA+B,KAEAA,GAAAA,EAAA,OAGAA,EAGA,QAAAqY,IAAArY,GAWA,MATA5B,GAAA4B,GAEAA,EAAAoY,SAAA,GAAA,GAAA,GAAA,KAEAna,EAAA+B,KAEAA,EAAAA,EAAAA,EAAA,MAAA,MAAA,GAGAA,EAGA,QAAAsY,IAAAC,EAAAC,EAAAC,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEAC,GAAAR,EAAAjB,EAAAsB,EAEA,IAAAI,GAAAC,GAAAV,EAAAO,EAEA,OAAA,UAAA/U,EAAAe,EAAAoU,GAEA,QAAAC,GAAAC,GAEArV,EAAAqV,EAQA,MALAX,GAAA1U,EAAAe,EAAAqU,IAEAD,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,IAGAjV,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAAN,EAGA,QAAAS,IAAAV,EAAAO,GAEA,MAAAA,IAAAJ,GAAAC,MAAAJ,GAAAO,QAGA,QAAAQ,IAAAlf,EAAAmf,EAAAC,EAAAX,GAEA,GAAAvZ,GAAAlF,EAAAa,OAEA,IAAA4d,EAEA,IAAA,GAAAre,GAAA,EAAAA,EAAA8E,EAAA5E,OAAAF,IAEA8E,EAAA9E,GAAAqe,EAAAvZ,EAAA9E,GAIA,IAAAif,GAAAna,EAAAoa,MACAH,EAAAA,GAAA,MACAC,EAAAA,GAAA,IAEA,QAAAla,EAAA5E,QACA,IAAA,GACA,MAAA+e,EACA,KAAA,GACA,MAAAna,GAAA,GAAA,IAAAia,EAAA,IAAAE,CACA,SACA,MAAAna,GAAAiI,KAAAiS,GAAAA,EAAAD,EAAA,IAAAE,GAIA,QAAAE,IAAAvf,EAAA2J,GAIA,IAAA,GAFAiR,MAEAxa,EAAA,EAAAA,EAAAJ,EAAAM,OAAAF,IAEAwa,EAAA5a,EAAAI,IAAAuJ,CAGA,OAAAiR,GAGA,QAAA+D,IAAAR,EAAAjB,EAAAsB,GAEA,GAAAA,EAEA,KAAA,YAAAL,EAAA,cAAAjB,EAAA,oBAIA,QAAA+B,IAAA/B,EAAAsC,EAAA7V,EAAAe,EAAAgU,EAAAe,GAEAhc,EAAAib,KAEAA,EAAAA,EAAAxB,EAAAsC,EAAA7V,EAAAe,EAAA+U,GAGA,IAAA1T,KAYA,OAXAA,GAAA2T,OAAAxC,EACAnR,EAAA4T,OAAAH,EACAzT,EAAA6T,OAAAjW,EAEAlH,EAAAiI,EAAAqB,GAEApK,EAAA8d,IAEAhd,EAAAgd,EAAA1T,GAGA/F,GAAA0Y,EAAA3S,GC7HA,QAAA8T,IAAA1B,EAAAC,EAAAC,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,IAAAF,EAEA,KAAAL,GAAA,mDAGA,IAAA2B,GAAAC,EAAA1V,CAEA,IAAAzK,EAAA4e,GACA,CACA,GAAAwB,GAAAxB,EAAAze,QAAA,IAEA,IAAA,KAAAigB,EAEA,KAAA7B,GAAA,mDAGA2B,GAAAtB,EAAA7Z,UAAA,EAAAqb,GACAD,EAAAvB,EAAA7Z,UAAAqb,EAAA,OAEArf,GAAA6d,IAEAsB,EAAAtB,EAAA,GACAuB,EAAAvB,EAAA,GACAnU,EAAAmU,EAAA,IAEA7c,EAAA6c,KAEAsB,EAAAtB,EAAAtB,MACA6C,EAAAvB,EAAA7U,MACAU,EAAAmU,EAAA9X,OAQA,IALAjD,EAAA4G,KAEAA,EAAA5D,GAGA,KAAA1G,EAAAwO,EAAA5D,OAAAmV,GAEA,KAAAG,YAAA,iCAAA9B,EAAA,OAGA,IAAAS,GAAAC,GAAAV,EAAAO,GACAe,GACAS,YAAAJ,EACAK,YAAA1B,EAAAqB,GACAM,YAAAL,EAGA,OAAA,UAAApW,EAAAe,EAAAoU,GAOA,MALAT,GAAA1U,EAAAe,EAAAoV,EAAAC,EAAA1V,IAEAyU,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,EAAAa,IAGA9V,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAAN,EC3CA,QAAAiC,IAAAlC,EAAAC,EAAAC,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,IAAAF,EAEA,KAAAL,GAAA,sDAGA,IAAAmC,EAEA,IAAA1gB,EAAA4e,GAEA8B,EAAAhC,GAAAiC,gBAAA/B,EAAAjQ,OAEA,IAAA9K,EAAA+a,GAEA8B,EAAA9B,MAGA,CACA,GAAA1Y,GAAAyG,GAAAiS,EAEA,IAAA1Y,KAAA,EACA,CACA,GAAA0a,GAAA1a,EAAAd,SAEAsb,GAAA,WAEA,MAAAE,KAKA,IAAAF,GAAAA,IAAAlc,EAEA,KAAAoa,GAAA,2CAAAL,EAAA,OAGA,IAAAS,GAAAC,GAAAV,EAAAO,GACAe,GACAgB,MAAAjC,EAGA,OAAA,UAAA7U,EAAAe,EAAAoU,GAEA,GAAAhZ,GAAAyG,GAAA5C,EAEA,IAAA7D,KAAA,EACA,CACA6D,EAAA7D,EAAAd,SAEA,IAAAwY,GAAA8C,EAAA3W,EAAAe,EAEA7G,GAAA2Z,IAAAa,EAAA1U,EAAA6T,IAEAsB,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,EAAAa,IAIA,MAAA9V,KAIA2U,GAAAC,MAAAJ,GAAAO,QAAAN,ECxFA,QAAAsC,IAAAvC,EAAAC,EAAAC,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,IAAAF,EAEA,KAAAL,GAAA,sDAGA,IAAA2B,GAAAa,CAEA,IAAA/gB,EAAA4e,GACA,CACA,GAAAoC,GAAA/gB,GAAA2e,EAAA,MAAA,KAEAsB,GAAAc,EAAAC,QACAF,EAAAC,MAEAjgB,GAAA6d,IAEAsB,EAAAtB,EAAAqC,QACAF,EAAAnC,GAEA7c,EAAA6c,KAEAsB,EAAAtB,EAAAtB,MACAyD,EAAAnC,EAAA/d,OAGA,IAAAV,EAAAwO,EAAA5D,OAAAmV,MAAA,EAEA,KAAAA,GAAA,iCAAA3B,EAAA,OAGA,IAAAS,GAAAC,GAAAV,EAAAO,GACAoC,EAAA5B,GAAAyB,GACAlB,GACAsB,QAAAvC,EACA0B,YAAAJ,EACAK,YAAA1B,EAAAqB,GACAkB,MAAAF,GAEAlG,EAAA2E,GAAAoB,GAAA,EAEA,OAAA,UAAAhX,EAAAe,EAAAoU,GAOA,MALAT,GAAA1U,EAAAe,EAAAoV,EAAAa,EAAA/F,IAEAkE,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,EAAAa,IAGA9V,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAAN,EC2DA,QAAA6C,IAAA9C,EAAAC,EAAAC,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,IAAAF,EAEA,KAAAL,GAAA,uDAKA,KAAA,GAFAxT,GAAA9K,GAAA2e,EAAA,YAAA,MAEApe,EAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IAEA,GAAA,KAAAL,EAAAwO,EAAA5D,OAAAA,EAAAvK,IAEA,KAAAuK,GAAAvK,GAAA,iCAAA+d,EAAA,OAIA,IAAAS,GAAAC,GAAAV,EAAAO,GACAwC,EAAAhC,GAAAvU,GACAwW,EAAAjC,GAAAvU,GAAA,GAAA,EAAA8T,GACAgB,GACA2B,QAAAF,EACAG,cAAAF,EAGA,OAAA,UAAAxX,EAAAe,EAAAoU,GAEA,QAAAC,GAAAC,GAEArV,EAAAqV,EAQA,MALAX,GAAA1U,EAAAe,EAAAC,EAAAoU,IAEAD,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,EAAAa,IAGA9V,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAAN,EC/IA,QAAAkD,IAAAnD,EAAAC,EAAAC,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,GAAAzO,GAAAkC,EAAAoP,CAEA,KAAAzhB,EAAA0e,IAAA5e,EAAA4e,GACA,CACA,GAAAoC,GAAA/gB,GAAA2e,GAAA,GAAA,YAAA,KACAvO,GAAA2Q,EAAA,IAAArS,EAAAnJ,KACAmc,EAAAX,EAAA,IAAA1D,EACA/K,EAAA,SAEAxR,GAAA6d,IAEAvO,EAAArQ,EAAA4e,EAAA,IAAAA,EAAAqC,QAAAtS,EAAAnJ,KACAmc,EAAA3hB,EAAA4e,EAAA,IAAAA,EAAAqC,QAAA3D,EACA/K,EAAA,GAAAC,IAAA7D,EAAAiQ,IAEA7c,EAAA6c,KAEAvO,EAAAuO,EAAA9T,OAAA6D,EAAAnJ,KACAmc,EAAA/C,EAAAtB,OAAAA,EACA/K,EAAAqM,EAAArM,OAGA,KAAAA,EACA,CACA,IAAAlC,EAEA,KAAA,iDAAAkO,EAAA,OAGAve,GAAAqQ,GAEA3F,GAAA4D,IAAA+B,GAAAnB,QAAA,SAAAuB,GAEA8B,EAAA9B,EAAAK,QAGAhN,EAAAuM,KAEAkC,EAAAlC,EAAAS,OAIA,GAAA3Q,EAAAwO,EAAA5D,OAAA4W,MAAA,EAEA,KAAAA,GAAA,iCAAApD,EAAA,OAGA,IAAAS,GAAAC,GAAAV,EAAAO,GACAe,GACA+B,OAAAvR,EACAiQ,YAAAqB,EACApB,YAAA1B,EAAA8C,GAGA,OAAA,UAAA5X,EAAAe,EAAAoU,GAUA,MARA3M,IAAArS,EAAA6J,IAEA0U,EAAA1U,EAAAe,EAAAyH,EAAAoP,IAEAzC,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,EAAAa,IAIA9V,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAAN,EClFA,QAAAqD,IAAAtD,EAAAE,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,IAAAF,EAEA,KAAAL,GAAA,sDAGA,IAAA8B,GAAAyB,CAEA,IAAA9hB,EAAA4e,GACA,CACA,GAAAmD,GAAAnD,EAAAze,QAAA,IAEA,IAAA,KAAA4hB,EAEA,KAAAnD,GAAA,oCAAAL,EAAA,OAGA8B,GAAAzB,EAAA7Z,UAAA,EAAAgd,IAAAzE,EACAwE,EAAAlD,EAAA7Z,UAAAgd,EAAA,OAEAhhB,GAAA6d,IAEAyB,EAAAzB,EAAAqC,SAAA3D,EACAwE,EAAAlD,GAEA7c,EAAA6c,KAEAyB,EAAAzB,EAAAtB,OAAAA,EACAwE,EAAAlD,EAAAoD,MAGA,IAAA,KAAA7hB,EAAAwO,EAAA5D,OAAAsV,GAEA,KAAAA,GAAA,iCAAA9B,EAAA,OAGA,KAAAuD,EAEA,KAAA,8BAAAvD,EAAA,OAGA,IAAA0D,GAAAvD,GAAAwD,WAAAJ,EAAAzB,EAAA1R,EAAAkQ,EAEA,OAAA,UAAA9U,EAAAe,EAAAoU,GAYA,IAAA,GAVAiD,GAAA,EAEAC,EAAA,SAAAtD,GAEAA,GAEAqD,KAIA3hB,EAAA,EAAAA,EAAAyhB,EAAAvhB,OAAAF,IAEAyhB,EAAAzhB,GAAAuJ,EAAAe,EAAAsX,EAGA,OAAA3D,GAAA0D,EAAAF,EAAAvhB,QAAAge,GAAA2D,KAAAtY,ICtEA,QAAAuY,IAAA/D,EAAAC,EAAAC,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,IAAAF,EAEA,KAAAL,GAAA,2CAGA,IAAA1d,GAAA0hB,GAAA,CAeA,IAbAviB,EAAA4e,GAEA/d,EAAAZ,GAAA2e,EAAA,MAAA,MAEA7d,EAAA6d,GAEA/d,EAAA+d,EAEA/a,EAAA+a,KAEA/d,EAAA0hB,GAGAA,KAAA,KAEA1hB,GAAA,IAAAA,EAAAH,QAEA,KAAAke,GAAA,0CAAAL,EAAA,OAIA,IAAA1c,EAAAhB,GACA,CACA,GAAAma,GAAA2E,GAAA9e,GAAA,EAEA0hB,GAAA,SAAAxY,GAEA,MAAAiR,GAAAjR,QAKAwY,GAAA,SAAAxY,GAEA,MAAA5J,GAAAU,EAAAkJ,EAAAjD,GAIA,IAAAkY,GAAAC,GAAAV,EAAAO,GACAoC,EAAA5B,GAAAze,EAAA,MACAgf,GACAsB,QAAAvC,EACAwC,MAAAF,EAGA,OAAA,UAAAnX,EAAAe,EAAAoU,GAOA,MALAT,GAAA1U,EAAAe,EAAAyX,IAEArD,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,EAAAa,IAGA9V,IAKA2U,GAAAC,MAAAJ,GAAAO,QAAAN,EChEA,QAAAgE,IAAAjE,EAAAkE,EAAAhE,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,IAAAF,EAEA,KAAAL,GAAA,4CAGA,IAAAmE,GAAAC,CAEA,IAAA3iB,EAAA4e,GACA,CACA,GAAAgE,GAAA3iB,GAAA2e,EAAA,YAAA,KAEA8D,GAAAvV,WAAAyV,EAAA,IACAD,EAAAxV,WAAAyV,EAAA,QAEA7hB,GAAA6d,IAEA8D,EAAA9D,EAAA,GACA+D,EAAA/D,EAAA,IAEA7c,EAAA6c,KAEA8D,EAAA9D,EAAA8D,MACAC,EAAA/D,EAAA+D,IAGA,IAAAze,MAAAwe,IAAAxe,MAAAye,GAEA,KAAA/D,GAAA,4CAAAL,EAAA,OAGAve,GAAA8e,KAEAA,GACA+D,OAAA/D,EACAgE,OAAAhE,EACAiE,OAAAjE,GAIA,IAAAE,GAAAC,GAAAV,EAAAO,GACAe,GACAmD,OAAAN,EACAO,KAAAN,EAGA,OAAA,UAAA5Y,EAAAe,EAAAoU,GAEA,GAAAgE,GAAAle,EAAA+E,GACA4F,QAAA,GACAwT,EAAAnE,EAAArP,EASA,OAPAwT,IAAA1E,EAAAyE,EAAAR,EAAAC,KAEA9C,EAAAuD,MAAAF,EAEAhE,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAqY,EAAAtD,KAGA9V,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAA2D,ECnDA,QAAAY,IAAA9E,EAAAC,EAAA8E,GAEA5E,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEAC,GAAAR,EAAAjB,EAAAsB,EAEA,IAAAI,GAAAC,GAAAV,EAAAO,EAEA,OAAA,UAAA/U,EAAAe,EAAAoU,GAOA,MALAoE,GAAAjZ,KAAAN,IAEAmV,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,IAGAjV,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAAN,ECUA,QAAA+E,IAAAhF,EAAAkE,EAAAhE,GAEAC,GAAAC,MAAAJ,GAAA,SAAAjB,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,GAAAgE,EAWA,IATA9iB,EAAA4e,GAEAkE,EAAA3V,WAAAyR,GAEA3a,EAAA2a,KAEAkE,EAAAlE,GAGA1a,MAAA4e,GAEA,KAAA,IAAAlE,EAAA,mCAAAL,EAAA,OAGAve,GAAA8e,KAEAA,GACA+D,OAAA/D,EACAgE,OAAAhE,EACAiE,OAAAjE,GAIA,IAAAE,GAAAC,GAAAV,EAAAO,GACAe,GACA2D,QAAA5E,EAGA,OAAA,UAAA7U,EAAAe,EAAAoU,GAEA,GAAAgE,GAAAle,EAAA+E,GACA4F,QAAA,GACAwT,EAAAnE,EAAArP,EASA,OAPAwT,IAAA1E,EAAAyE,EAAAJ,KAEAjD,EAAAuD,MAAAF,EAEAhE,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAqY,EAAAtD,KAGA9V,IAIA2U,GAAAC,MAAAJ,GAAAO,QAAA2D,E5DpHA,GAAAxQ,IAAAlS,MAAAiB,UCoDAqC,GAAA,WAEA,MAAAgX,QAAAC,eAEA,SAAApX,EAAAE,EAAAwZ,GAEAvC,OAAAC,eAAApX,EAAAE,GACAmX,cAAA,EACAC,YAAA,EACAzQ,MAAA6S,KAMA,SAAA1Z,EAAAE,EAAAwZ,GAEA1Z,EAAAE,GAAAwZ,MErDAlX,KI+BAc,IAAA8F,MAAA,YAUAlG,GAAAkG,MAAA,aC3BA,IAAAS,OAsBAO,KC1CAM,IAAAtB,MAAA,UC8BA,IAAA4B,MCcAxD,IAAAoE,WAEApE,GAAAsE,UAAA,EAEAtE,GAAA0E,YAEA1E,GAAA+Y,YAAA,KAEA/Y,GAAAgZ,KAAA,SAAA/b,EAAAjD,GAWA,QAAAif,GAAAzU,EAAAwB,GAKA,GAHAkT,EAAA3gB,KAAAiM,GACAuD,EAAAxP,KAAAyN,GAEA+B,EAAA/R,SAAAmjB,EAAAnjB,OACA,CACA,IAAA,GAAAW,GAAA,EAAAA,EAAAoR,EAAA/R,OAAAW,IACA,CACA,GAAAqP,GAAA+B,EAAApR,GACA6N,EAAA0U,EAAAviB,EAEA6N,IAEAwB,EAAAvB,aAIAd,EAAA2K,QAAA3J,WA3BA,GAAAhB,GAAA3D,GAAA+Y,YAAA/Y,GAAA+Y,aAAA,GAAAtQ,IAAA,MAAA,GACA0Q,EAAAnZ,GAAA0E,SAAAnO,QACAwR,KACAmR,IAEAvV,GAAAa,QAAAvH,EAAAjD,GAAAf,MAEA+G,GAAA0E,SAAA1O,OAAA,CAwBA,KAAA,GAAAF,GAAA,EAAAA,EAAAqjB,EAAAnjB,OAAAF,IAEAqjB,EAAArjB,GAAAyO,UAAA0U,EAGA,OAAAtV,IAGA3D,GAAAoZ,YAEApZ,GAAA4D,IAAA,SAAA9I,GAEA,MAAAkF,IAAAoZ,SAAAte,GAAAkF,GAAAoZ,SAAAte,IAAA,GAAA2N,IAAA,MAAA,IA6BAlL,EAAAyC,IAEAA,GAAA+D,QAEAsV,YAAA,cACAhV,QAAA,UACAL,QAAA,UACAsV,OAAA,SACAC,QAAA,UAGA,IAAAhO,KAEAiO,KAAA,EACAxN,MAAA,EACAR,KAAA,EACAiO,OAAA,EACAC,KAAA,EACAC,OAAA,EACAC,OAAA,EACAC,IAAA,GAQAC,IAEAN,KAAA,OACAtL,QAAA,UACA2L,IAAA,OAGAE,IAEAP,KAAA,EACAlgB,MAAA,EACA0gB,IAAA,EACAC,KAAA,GAGAC,IAEAV,KAAA,EACAlgB,MAAA,EACA0gB,IAAA,EACAC,KAAA,EkDxLAja,IAAA4E,MAAA,SAAA3G,EAAAkc,KAiBAna,GAAAoa,SAAA,SAAApiB,EAAAqiB,KAEAra,GAAAsa,UAAAD,KAEAra,GAAA4E,MAAA5M,EACAgI,GAAAsa,UAAA,IAIAta,GAAA6E,QAEAC,SAAA,EAEAyV,KAAA,EACAC,aAAA,GAEAC,cAAA,EACAC,cAAA,EACAC,cAAA,EACAC,YAAA,EACAC,oBAAA,EACAC,kBAAA,EACAC,mBAAA,EACAC,mBAAA,GAEAC,WAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,iBAAA,GAEAC,cAAA,GACAC,gBAAA,GAEAC,YAAA,GACAC,aAAA,GACAC,cAAA,GACAC,iBAAA,GACAC,WAAA,GACAC,aAAA,GACAC,YAAA,GACAC,YAAA,GACAC,aAAA,GAEAC,kBAAA,GAEAC,WAAA,GACAC,iBAAA,GACAC,mBAAA,GACAC,mBAAA,GAEAC,oBAAA,GACAC,oBAAA,GAEAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,aAAA,GACAC,eAAA,GACAC,cAAA,GACAC,cAAA,GACAC,mBAAA,GAEAN,aAAA,GACAO,mBAAA,GACAC,qBAAA,GACAC,kBAAA,GACAC,qBAAA,GAEAC,sBAAA,GAEAC,kBAAA,IACAC,UAAA,IACAC,gBAAA,IACAC,WAAA,IACAC,iBAAA,IAEAC,OAAA,GACAC,QAAA,GAEAC,eAAA,GAEAC,YAAA,GACAC,oBAAA,GACAC,sBAAA,GACAC,eAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,eAAA,GACAC,kBAAA,GACAC,iBAAA,GACAC,kBAAA,GACAC,cAAA,GACAC,aAAA,IACAC,qBAAA,IAEAC,eAAA,GACAC,uBAAA,GACAC,qBAAA,GACAC,yBAAA,GACAC,kBAAA,GACAC,sBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,oBAAA,GACAC,qBAAA,GACAC,iBAAA,GACAC,gBAAA,IACAC,wBAAA,IAEAC,aAAA,GACAC,qBAAA,GACAC,mBAAA,GACAC,gBAAA,GACAC,uBAAA,GACAC,eAAA,GACAC,aAAA,GACAC,YAAA,GACAC,kBAAA,GACAC,wBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,iBAAA,GACAC,cAAA,IACAC,sBAAA,IAEAC,iBAAA,GACAC,yBAAA,GACAC,uBAAA,GACAC,8BAAA,GACAC,oBAAA,GACAC,2BAAA,GACAC,mBAAA,GACAC,iBAAA,GACAC,gBAAA,GACAC,sBAAA,GACAC,4BAAA,GACAC,sBAAA,GACAC,sBAAA,IACAC,sBAAA,IACAC,qBAAA,IACAC,qBAAA,IACAC,wBAAA,GACAC,kBAAA,IACAC,0BAAA,IAEAC,eAAA,GACAC,eAAA,IACAC,uBAAA,IACAC,qBAAA,IACAC,gBAAA,IACAC,wBAAA,KCtKA9hB,GAAAiG,KAAA,SAAAhC,GAGA,OAIAmC,IAAA,SAAA5B,EAAA6B,GAEA7B,OAKAZ,IAAA,SAAAxD,EAAAoE,EAAA6B,GAEAA,EAAA,KAAA,KAKAtO,OAAA,SAAAqI,EAAAoG,EAAAhC,EAAA6B,GAEA7B,OAKAiC,OAAA,SAAArG,EAAAoG,EAAAhC,EAAA6B,GAEA7B,OAKAkC,OAAA,SAAAtG,EAAAoE,EAAA6B,GAEA7B,OAKAmC,MAAA,SAAAC,EAAAD,EAAAnC,EAAA6B,GAEA7B,SAmBAxE,GAAA+hB,QAAA,SAAA/pB,EAAAqiB,KAEAra,GAAAgiB,SAAA3H,KAEAra,GAAAiG,KAAAjO,EACAgI,GAAAgiB,SAAA,IC9DAhiB,GAAA4I,MAAA,SAAA3E,GAEA,OAkBAge,IAAA,SAAAva,EAAAwa,EAAA1d,EAAA6B,GAEA7B,EAAAkD,EAAAwa,IAIAte,IAAA,SAAA8D,EAAAlD,EAAA6B,GAEAA,EAAAqB,EAAA,SAiBAhB,OAAA,SAAAgB,EAAAlD,EAAA6B,GAEA7B,EAAAkD,IAYAtB,IAAA,SAAA5B,EAAA6B,GAEA7B,YAmBAxE,GAAAmiB,SAAA,SAAAnqB,EAAAqiB,KAEAra,GAAAoiB,UAAA/H,KAEAra,GAAA4I,MAAA5Q,EACAgI,GAAAoiB,UAAA,ICjFApiB,GAAA8I,KAAA,SAAA7E,GAEA,OAEA+F,KAAA,SAAA5J,EAAA8J,KAKAxD,OAAA,SAAAtG,OAoBAJ,GAAAqiB,QAAA,SAAArqB,EAAAqiB,KAEAra,GAAAsiB,SAAAjI,KAEAra,GAAA8I,KAAA9Q,EACAgI,GAAAsiB,SAAA,IC7CAtiB,GAAAuiB,OAAAC,OAAAC,UAAAC,UAAA,EAEA1iB,GAAA2iB,cAAA,EAGA3iB,GAAA4iB,UAAA,WAEA5iB,GAAAuiB,QAAA,EACAviB,GAAA4E,MAAA5E,GAAA6E,OAAA4Y,QACAzd,GAAAjB,QAAAiB,GAAA+D,OAAAuV,SAIAtZ,GAAA6iB,WAAA,WAEA7iB,GAAAuiB,QAAA,EACAviB,GAAA4E,MAAA5E,GAAA6E,OAAA6Y,SACA1d,GAAAjB,QAAAiB,GAAA+D,OAAAwV,UAKAvZ,GAAA8iB,sBAAA,WAEAN,OAAAO,kBAEAP,OAAAO,iBAAA/iB,GAAA+D,OAAAuV,OAAAtZ,GAAA4iB,WAAA,GACAJ,OAAAO,iBAAA/iB,GAAA+D,OAAAwV,QAAAvZ,GAAA6iB,YAAA,KAIAG,SAAAC,KAAAC,SAAAljB,GAAA4iB,UACAI,SAAAC,KAAAE,UAAAnjB,GAAA6iB,aAKA7iB,GAAAojB,mBAAA,WAEA,GAAAb,GAAAC,OAAAC,UAAAC,MAEA1iB,IAAA2iB,eAEAJ,GAAA,GAGAA,KAAA,GAAAviB,GAAAuiB,UAAA,EAEAviB,GAAA4iB,YAGAL,KAAA,GAAAviB,GAAAuiB,UAAA,GAEAviB,GAAA6iB,arDtDA,IAAA9b,IAAA,EACArB,MACAD,MACAU,KA8NAnG,IAAAkF,MAAAA,GACAlF,GAAA6G,SAAAA,GACA7G,GAAA8G,WAAAA,GACA9G,GAAAgH,SAAAA,GACAhH,GAAAiH,WAAAA,GACAjH,GAAAkH,aAAAA,GACAlH,GAAA+G,WAAA,WAAA,MAAAA,KE5DA1N,GAAA0K,QAEAsf,OAAA,UACAC,WAAA,cACAC,UAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,gBACAC,aAAA,gBACAC,kBAAA,qBACAC,mBAAA,sBACAC,MAAA,iCACA3T,QAAA,WAGA9W,GAAAoO,UAEA3M,KAAA7F,EACAkP,UAAA,KACAuD,IAAA,KACAqc,aAAA,IACA1jB,UACA2jB,iBACA7kB,YACAxJ,WAAA,KACAsT,qBAAA,KACAE,SAAA,KACA8a,eAAA,EACAC,YAAA,EACAC,aAAA,EACAC,MAAAtK,GAAAD,IACAwK,UAAA,EACAC,aAAA,EACAla,aACAG,aACA7B,QAAA5O,EACAyqB,OAAAta,GACAua,OAAAna,GACAoa,aAAA5Z,GACA6Z,cAAA3Z,GACA1B,UAAAmB,GACA7B,WAAA+B,GACA7B,YAAA8B,GACA5B,WAAA6B,IAGAjT,EAAA0B,GAAA/C,WAIAquB,MAAA,SAAA1nB,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAAuP,aAAAhE,QAAAvH,EAAAjD,EAAA4qB,IAIAC,QAAA,SAAAC,GAEA,IAAAztB,EAAAytB,GAEA,OAAA,CAGA,KAAA,GAAAtqB,KAAAsqB,GAEA,IAAA7rB,KAAA+qB,cAAAxpB,GAEA,OAAA,CAIA,QAAA,GAIAuqB,UAAA,SAAAtX,EAAAxQ,EAAAjD,EAAA8S,GAOA,QAAAkY,KAEA,GAAA7nB,GAAA6I,EAAAuH,WAAAE,EAAAX,EAgCA,OA9BA3P,MAAA,GAAAwG,EAAAE,eAEAmC,EAAAke,YAAAle,EAAAmC,cAAA,OAAAhL,GAAAA,EAAAoU,WAwBA5N,EAAAgB,QAAAxH,IAtBAA,IAEAA,EAAA6I,EAAAif,mBAAAjf,EAAAsH,kBAAAG,KAGAtQ,EAAAuO,MAAApS,GAAAyK,OAAAmhB,WAAA,WAEAvhB,EAAAE,eAEAxM,EAAAoW,IAEAtQ,EAAAgoB,KAAA1X,GAGA9J,EAAAgB,QAAAxH,EAAAoU,WAAApU,EAAA,SAIAA,EAAAioB,aAQAzhB,EAAAE,cAAA,GAAA,EAvCA,GAAAmC,GAAA/M,KACA0K,EAAA,GAAA8E,GA8CA,OA5CA9E,GAAAa,QAAAvH,EAAAjD,GAAAgM,GAuCAgf,KAEAhf,EAAA2e,MAAAK,EAAAhf,GAAA,GAGArC,GAgBA4J,WAAA,SAAAE,EAAAX,GAEA,GAAA9G,GAAA/M,KACAosB,EAAArf,EAAAmC,eAAAnC,EAAAke,UAEA,KAAA1uB,EAAAiY,GAEA,MAAA4X,GAAA,MAAA,CAGAjsB,GAAAqU,KAEAA,EAAA,GAAAA,IAEAtU,EAAAsU,KAEAA,EAAAA,IAGA,IAAA/F,GAAA1B,EAAAsH,kBAAAG,EAEA,IAAAA,YAAAzH,GAAA1M,MAEA,MAAAmU,EAEA,IAAA/F,IAAA1B,GAAAI,IACA,CACA,GAAAhG,GAAA4F,EAAAI,IAAAsB,EAcA,OAZArQ,GAAAoW,KAEAX,EAEA9G,EAAAsf,cAAA7X,EAAA/F,EAAAtH,GAIAA,EAAA+kB,KAAA1X,IAIArN,EAEA,MAAA/I,GAAAoW,GAEAX,EAEA9G,EAAAsf,cAAA7X,GAIAzH,EAAAuf,YAAAvf,EAAAwe,OAAA/W,IAGA4X,EAEA,MAGA,GAIAG,UAAA,SAAAplB,GAEA,GAAAzJ,GAAAsC,KAAAyO,GAEA,IAAArR,EAAAM,GAEA,IAAA,GAAAb,GAAA,EAAAA,EAAAa,EAAAX,OAAAF,UAEAsK,GAAAzJ,EAAAb,eAKAsK,GAAAzJ,IAKA8uB,SAAA,SAAArlB,EAAAC,GAEA,GAAAqH,GAAAzO,KAAAysB,UAAAtlB,EAAAC,EAOA,OALAhK,GAAAqR,KAEAA,EAAAA,EAAA7E,KAAA5J,KAAA8qB,eAGArc,GAIAge,UAAA,SAAAtlB,EAAAC,GAEA,GAAAqH,GAAA,IAEA,IAAArR,EAAAgK,GACA,CACAqH,IAEA,KAAA,GAAA5R,GAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IAEA4R,EAAAnP,KAAA6H,EAAAC,EAAAvK,SAKA4R,GAAAtH,EAAAC,GAEAqH,IAEAA,EAAAtH,EAAAC,GAAApG,IAIA,OAAAyN,IAIA4F,kBAAA,SAAAG,GAEA,MAAAA,aAAAxU,MAAAK,MAEAmU,EAAAhD,OAEApU,EAAAoX,GAEAxU,KAAA0sB,kBAAAlY,GAEApW,EAAAoW,GAEAxU,KAAAwsB,SAAAhY,EAAAxU,KAAAyO,KAGA+F,GAIAkY,kBAAA,SAAAjwB,GAEA,MAAAA,GAAAmN,KAAA5J,KAAA8qB,eAIA6B,OAAA,SAAAxlB,EAAAylB,GAEA,GAAAne,GAAAzO,KAAAyO,IACAoe,EAAA7sB,KAAAwsB,SAAArlB,EAAAsH,EAEA,IAAAvH,EAAAC,EAAAsH,EAAAlS,GAEA,MAAAswB,EAEA,KAAAD,EAEA,KAAA,6BAGA,QAAA,GAIAE,QAAA,SAAA3lB,GAEA,MAAAnH,MAAAysB,UAAAtlB,EAAAnH,KAAAyO,MAGAud,mBAAA,SAAAvd,GAEA,GAAA1B,GAAA/M,KAEAuH,IAEA,IAAAnK,EAAA2P,EAAA0B,KACA,CACApS,EAAAoS,KAEAA,EAAAA,EAAAnS,MAAAyQ,EAAA+d,cAGA,KAAA,GAAAjuB,GAAA,EAAAA,EAAAkQ,EAAA0B,IAAA1R,OAAAF,IAEA0K,EAAAwF,EAAA0B,IAAA5R,IAAA4R,EAAA5R,OAKA0K,GAAAwF,EAAA0B,KAAAA,CAGA,OAAA1B,GAAAuf,YAAA/kB,IAIAwlB,QAAA,WAEA/sB,KAAAgtB,OACAhtB,KAAA8F,QAAA1F,GAAA0K,OAAAyf,UAMAta,YAAA,SAAAC,GAEAhQ,EAAAgQ,GAEAlQ,KAAAitB,iBAAA/c,EAEA7T,EAAA6T,GAEAlQ,KAAAitB,iBAAA,SAAAhwB,EAAAmF,GAEA,GAAA8qB,GAAA9uB,EAAAnB,IAAAiT,IAAAjT,GAAAA,EAAAiT,GAAAlU,EACAmxB,EAAA/uB,EAAAgE,IAAA8N,IAAA9N,GAAAA,EAAA8N,GAAAlU,CAEA,OAAAkxB,KAAAlxB,GAAAmxB,IAAAnxB,GAAA,EAAA+G,EAAAmqB,EAAAC,GAAA,GAKAntB,KAAAitB,iBAAA,SAAAhwB,EAAAmF,GAEA,OAAA,IAOA2N,cAAA,SAAArT,EAAAoF,GAEA9B,KAAA4O,OAAAmB,cAAArT,EAAAoF,IAGAG,cAAA,SAAAvF,EAAAoF,GAEA9B,KAAA4O,OAAA3M,cAAAvF,EAAAoF,IAGAqO,aAAA,SAAAC,GAEAlQ,EAAAkQ,GAEApQ,KAAAoQ,UAAAA,EAEA/T,EAAA+T,GAEA5T,EAAAwD,KAAAoH,OAAAgJ,MAAA,EAEApQ,KAAAoQ,UAAA,SAAAjJ,GAEA,MAAA5K,GAAA4K,GAAAA,EAAAiJ,GAAAjJ,GAKAnH,KAAAoQ,UAAArH,GAAAqH,GAKApQ,KAAAoQ,UAAA,SAAAjJ,GAEA,MAAAA,GAAAqK,SAMAwb,KAAA,WAEAhtB,KAAA4O,OAAAoe,QAIAhvB,SAAA,WAEA,MAAAgC,MAAA4O,OAAA5Q,YAGAgK,MAAA,WAEA,GAAA+E,GAAA/M,KACA2O,EAAA5B,EAAA6B,OAAAD,KACAC,EAAA7B,EAAA6B,MAEA7B,GAAAI,MAEA,KAAA,GAAAtQ,GAAA,EAAAA,EAAA8R,EAAA5R,OAAAF,IAEAkQ,EAAAI,IAAAwB,EAAA9R,IAAA+R,EAAA/R,IAMAwvB,cAAA,SAAA9e,EAAAkB,EAAAtH,EAAAia,GAEA,IAAAhjB,EAAAmP,GAEA,MAAApG,EAGA,IAAA4F,GAAA/M,KACAyO,EAAAA,GAAA1B,EAAA4f,OAAApf,GACApG,EAAAA,GAAA4F,EAAAI,IAAAsB,GACA2e,EAAArgB,EAAAwe,OAAA5pB,EAAA4L,GAGA,IAAApG,EACA,CACA,GAAAkmB,GAAArtB,KAAAitB,iBAAA9lB,EAAAoG,EAEA,IAAA8f,EAIA,MAFAtmB,IAAA4E,MAAA5E,GAAA6E,OAAAmX,kBAAAhW,EAAA5F,EAAAoG,GAEApG,EAKA,GAAAA,EACA,CAGA,IAAA,GAFAmmB,GAAAvgB,EAAA4B,KAEA9R,EAAA,EAAAA,EAAAywB,EAAAvwB,OAAAF,IACA,CACA,GAAAa,GAAA4vB,EAAAzwB,GACA0wB,EAAApmB,EAAAzJ,GACA8vB,EAAAJ,EAAA1vB,EAEA,IAAAnB,EAAAgxB,IAAAhxB,EAAAixB,IAAAD,IAAAC,EAEA,KAAA,IAAAC,OAAA,gCAIA1gB,EAAAI,IAAAsB,GAAAtH,EAEAA,EAAAumB,SAEAvmB,EAAAumB,UAGA,IAAA1W,GAAA7P,EAAAwmB,SAAA,GACAC,KACAC,GAAA,EACAd,KACAe,EAAAtsB,EAAA2F,EAAAumB,QACArd,EAAAtD,EAAAsD,SAEA,KAAA,GAAA9O,KAAAgM,GAEA,GAAA,MAAAhM,EAAAe,OAAA,GAKA,GAAAf,IAAA8O,GAEAlJ,EAAA+kB,KAAA3qB,EAAAgM,EAAAhM,IAAA,OAFA,CAOA,GAAAwsB,GAAA/W,EAAAzV,GACAysB,EAAA7mB,EAAAumB,OAAAnsB,EAEAusB,IAAA1M,GAAAje,EAAA4qB,EAAAC,IAEA7mB,EAAA5F,GAAA6rB,EAAA7rB,GACAwrB,EAAAxrB,GAAAgM,EAAAhM,GAEA4F,EAAA8mB,SAEA9mB,EAAA8mB,OAAA1sB,GAAAgM,EAAAhM,MAKAqsB,EAAArsB,GAAAgM,EAAAhM,GACAssB,GAAA,GAGA1mB,EAAAumB,OAAAnsB,GAAAI,EAAA4L,EAAAhM,IAGAssB,EAEA1mB,EAAA+mB,SAAA7tB,GAAAyK,OAAAqjB,eAAA5gB,EAAAqgB,IAIAzmB,EAAA+mB,SAAA7tB,GAAAyK,OAAAsjB,YAAA7gB,EAAAwf,IAGA5lB,EAAA+mB,SAAA7tB,GAAAyK,OAAAujB,cAAA9gB,IAEApG,EAAA4S,cAAAnE,IAEA7I,EAAA6B,OAAA0f,IAAA7f,KAEA1B,EAAA6B,OAAAoa,IAAAva,EAAAtH,GACA4F,EAAAjH,QAAA1F,GAAA0K,OAAA0f,YAAArjB,GAAA,SAMAA,GAAA4F,EAAAwhB,YAAAnB,GAAA;AAEArgB,EAAAoe,QAAAtK,GAAAD,KAEAzZ,EAAA8mB,OAAA9mB,EAAAwmB,SAAA,GACAxmB,EAAA8mB,OAAAO,QAAArnB,EAAAqnB,QACArnB,EAAAumB,OAAAvmB,EAAA8mB,OAAAP,OAAAvmB,EAAAwmB,SAAA,GAEAxmB,EAAA4S,cAAAnE,KAIAzO,EAAAumB,OAAAvmB,EAAAwmB,SAAA,EAIA,OAAAxmB,IAGAonB,YAAA,SAAAnB,EAAAvZ,GAEA,GAAA9G,GAAA/M,KACAmH,EAAA4F,EAAAuf,YAAAc,EAAAvZ,GACApF,EAAAtH,EAAAqK,MAQA,OANAzE,GAAA6B,OAAA0f,IAAA7f,KAEA1B,EAAA6B,OAAAoa,IAAAva,EAAAtH,GACA4F,EAAAjH,QAAA1F,GAAA0K,OAAA0f,YAAArjB,EAAA0M,KAGA1M,GAGAsnB,aAAA,SAAAtnB,EAAA0lB,GAEA,GAAA9f,GAAA/M,KACAyO,EAAAoe,GAAA1lB,EAAAqK,aAEAzE,GAAAI,IAAAsB,GAEA1B,EAAA6B,OAAAnB,OAAAgB,GACA1B,EAAAjH,QAAA1F,GAAA0K,OAAA4f,cAAAvjB,IAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA4jB,iBAEA3nB,GAAA4E,MAAA5E,GAAA6E,OAAA8V,cAAA3U,EAAA5F,IAGAwnB,0BAAA,SAAAxnB,EAAAsH,GAEA,GAAA1B,GAAA/M,IAEA,OAAAmH,GAEAA,EAAAynB,qBAEAznB,GAAAumB,OAEA3gB,EAAAwf,UAAAplB,GAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA+jB,SAEA,IAGA9hB,EAAA0hB,aAAAtnB,EAAAsH,IAEA,IAGA,GAGAqgB,wBAAA,SAAA3nB,EAAAsH,GAEA,GAAA1B,GAAA/M,IAEA,OAAAmH,GAGAA,EAAAynB,qBAGAznB,GAAAumB,OAEA3gB,EAAAwf,UAAAplB,GAEAA,EAAA8mB,eAEA9mB,GAAA8mB,OAAAP,OAEA3gB,EAAAwf,UAAAplB,EAAA8mB,SAGA9mB,EAAA+mB,SAAA7tB,GAAAyK,OAAA+jB,QAEA1nB,EAAA4S,cAAAnE,KAEA,IAGAzO,EAAA4S,cAAAtE,IAEA1I,EAAA0hB,aAAAtnB,EAAAsH,IAgBA,IAZA1B,EAAA4C,MAAAlC,OAAAgB,EAAA,SAAAsgB,GAEAA,GAEAhoB,GAAA4E,MAAA5E,GAAA6E,OAAA8V,cAAA3U,EAAAgiB,MAKA,IAOAC,kBAAA,SAAAvgB,GAEA,GAAA1B,GAAA/M,KACAmH,EAAA4F,EAAAI,IAAAsB,EAEA,OAAA1B,GAAAoe,QAAAtK,GAAAD,IAEA7T,EAAA+hB,wBAAA3nB,EAAAsH,GAIA1B,EAAA4hB,0BAAAxnB,EAAAsH,IAIAjD,WAAA,WAEA,GAAAuB,GAAA/M,IAEAiO,IAAA,WAEA,IAAA,GAAAQ,KAAA1B,GAAA+B,OACA,CACA,GAAA3H,GAAA4F,EAAA+B,OAAAL,EAEAtH,GAAAqnB,UAAAnuB,GAAA2U,OAAAia,eAEAloB,GAAA4E,MAAA5E,GAAA6E,OAAAqW,oBAAAlV,EAAA5F,GAEAA,EAAA4S,cAAArE,MAIAvO,EAAAqnB,UAAAnuB,GAAA2U,OAAAka,aAEAnoB,GAAA4E,MAAA5E,GAAA6E,OAAAsW,kBAAAnV,EAAA5F,GAEAA,EAAA4S,cAAAlE,KAIA9O,GAAA4E,MAAA5E,GAAA6E,OAAAuW,iBAAApV,EAAA5F,GAGA4F,EAAA6B,OAAAoa,IAAAva,EAAAtH,GAAA,OAKA4F,EAAA+B,UACA/B,EAAAggB,UAEAhgB,EAAAke,aAEA,IAAAle,EAAAqC,kBAEArC,EAAAoiB,UAIApiB,EAAAoC,cAAA,IAKA7D,UAAA,SAAA8jB,GAIA,QAAAC,GAAAC,EAAA3gB,GAEA5H,GAAA4E,MAAA5E,GAAA6E,OAAAoW,WAAAjV,EAAAuiB,EAEA,KAAA,GAAAzyB,GAAA,EAAAA,EAAAyyB,EAAAvyB,OAAAF,IACA,CACA,GAAA0Q,GAAA+hB,EAAAzyB,GACA4R,EAAAE,EAAA9R,GACAuwB,EAAArgB,EAAAwe,OAAA5pB,EAAA4L,GAAA,IACApG,EAAA4F,EAAAuf,YAAAc,GAAA,EAEAjmB,GAAA8mB,OAAA1gB,EACApG,EAAAumB,OAAAngB,EAAAmgB,OAEAvmB,EAAAqnB,UAAAnuB,GAAA2U,OAAAua,UAEAxiB,EAAA+B,OAAAL,GAAAtH,EACA4F,EAAAI,IAAAsB,GAAAtH,GAIA4F,EAAAkC,aAAA,EACAlC,EAAAyiB,YAAApvB,GAAA0K,OAAAwf,WAEA8E,GAAA,EAAAriB,GAGA,QAAA0iB,KAEA1iB,EAAA2iB,WAEAN,GAAA,EAAAriB,GAjCA,GAAAA,GAAA/M,IAoCA+M,GAAAke,YAAAle,EAAAme,aAEAnkB,GAAAhC,MAAAgC,GAAA+D,OAAAuV,OAAAtT,EAAA4iB,SAAA5iB,GAGAA,EAAAoe,QAAAtK,GAAAN,MAEAxT,EAAA2iB,WAEAN,GAAA,EAAAriB,IAIAA,EAAA4C,MAAAxC,IAAAkiB,EAAAI,IAIAD,YAAA,SAAAI,EAAAC,GAEA,GAAA9iB,GAAA/M,IAEA+M,GAAAgC,aAAA,EACAhC,EAAAjH,QAAA8pB,GAAA7iB,GAAA+iB,OAAAD,QACA9iB,EAAAwC,aAAA8F,QAAA3J,QAAAqB,IAGA2iB,SAAA,WAEA,GAAA3iB,GAAA/M,IAEA+M,GAAAke,WAEAle,EAAAoiB,UAIApiB,EAAAyiB,YAAApvB,GAAA0K,OAAAsf,SAIAuF,SAAA,WAEA,GAAA5iB,GAAA/M,IAEA+M,GAAAsC,aAAA,EAEA,IAAAtC,EAAAqC,mBAEArC,EAAAgjB,mBAIAA,gBAAA,WAEA,GAAAhjB,GAAA/M,MAEA+M,EAAAme,aAAAne,EAAAmC,cAAAnC,EAAAsC,aAAAtC,EAAAoC,gBAEApC,EAAAsC,aAAA,EACAtC,EAAAoC,cAAA,EAEApI,GAAA4E,MAAA5E,GAAA6E,OAAA2V,aAAAxU,GAEAA,EAAAoiB,YAKAA,QAAA,SAAAnrB,EAAAjD,GAOA,QAAAivB,GAAAne,GAKA,IAAA,GAHAjD,GAAA7B,EAAA0e,cAAA5Z,GACAoe,KAEApzB,EAAA,EAAAA,EAAA+R,EAAA7R,OAAAF,IACA,CACA,GAAAsK,GAAA4F,EAAAsf,cAAAzd,EAAA/R,GAEA,IAAAsK,EACA,CACA,GAAAsH,GAAAtH,EAAAqK,MAEAye,GAAAxhB,GAAAtH,GAMA,IAAA,GAFAwH,GAAA5B,EAAA6B,OAAAD,OAEA9R,EAAA,EAAAA,EAAA8R,EAAA5R,OAAAF,IACA,CACA,GAAAa,GAAAiR,EAAA9R,EAEA,MAAAa,IAAAuyB,IACA,CACA,GAAA3nB,GAAAyE,EAAA6B,OAAAjE,IAAAjN,EAEA4K,GAAAolB,SAEA3mB,GAAA4E,MAAA5E,GAAA6E,OAAAkW,mBAAA/U,EAAArP,GAEAqP,EAAAiiB,kBAAAtxB,KAKAqP,EAAAmC,cAAA,EACAnC,EAAAyiB,YAAApvB,GAAA0K,OAAAuf,YAEAtd,EAAAggB,UAEAhmB,GAAA4E,MAAA5E,GAAA6E,OAAA+V,YAAA5U,EAAA6B,GAEAlE,EAAAgB,QAAAqB,EAAA6B,QAGA,QAAAshB,GAAAre,EAAAe,GAEA,IAAAA,GAEA7L,GAAAojB,qBAEApjB,GAAAuiB,SAEAvc,EAAAiC,gBAAA,EAEAjI,GAAAjC,KAAAiC,GAAA+D,OAAAuV,OAAAtT,EAAAojB,gBAAApjB,IAGAhG,GAAA4E,MAAA5E,GAAA6E,OAAAgW,oBAAA7U,KAIAhG,GAAA4E,MAAA5E,GAAA6E,OAAAiW,kBAAA9U,EAAA6F,GAEA7F,EAAAyiB,YAAApvB,GAAA0K,OAAAsf,QAAAvY,KAGAnH,EAAAmI,OAAA9F,EAAA6B,QAzEA,GAAA7B,GAAA/M,KACA0K,EAAA,GAAA8E,GAgFA,OA9EA9E,GAAA0lB,SAAApsB,EAAAjD,GAAAgM,GAyEAkB,GAAA,WAEAlB,EAAAC,KAAAG,IAAA6iB,EAAAE,KAGAxlB,GAGAylB,gBAAA,WAEA,GAAApjB,GAAA/M,IAEA+G,IAAA4E,MAAA5E,GAAA6E,OAAAmW,mBAAAhV,GAEAA,EAAAiC,iBAEAjC,EAAAiC,gBAAA,EAEAjC,EAAAoiB,YAKAxkB,IAAA,SAAA8D,GAEA,MAAAzO,MAAAmN,IAAAnN,KAAAqU,kBAAA5F,KAGAmF,OAAA,SAAAyc,GAEA,GAAAljB,GAAAnN,KAAAmN,IACAmjB,IAEA,KAAA,GAAA7hB,KAAAtB,GACA,CACA,GAAAhG,GAAAgG,EAAAsB,EAEA4hB,GAAAlpB,IAEAmpB,EAAAhxB,KAAA6H,GAIA,MAAAmpB,IAGAC,SAAA,SAAA9hB,EAAAlB,GAEAvN,KAAAqsB,cAAA9e,EAAAkB,GACAzO,KAAA+sB,UAEAhmB,GAAA4E,MAAA5E,GAAA6E,OAAAwW,cAAApiB,KAAAuN,EAAAkB,IAGA+hB,WAAA,SAAA/hB,GAEAzO,KAAAgvB,kBAAAvgB,IAEAzO,KAAA+sB,UAGAhmB,GAAA4E,MAAA5E,GAAA6E,OAAAyW,gBAAAriB,KAAAyO,IAIA6d,YAAA,SAAArb,EAAA4C,GAEA,MAAA,IAAA7T,MAAAK,MAAA4Q,EAAA4C,IAGA4c,aAAA,SAAAtpB,GAEAnH,KAAAmN,IAAAhG,EAAAqK,QAAArK,GAIA4J,KAAA,SAAA5J,EAAA4E,GAEA,GAAAgB,GAAA/M,IAEA,IAAAmH,EAAAupB,aAIA,WAFA3pB,IAAA4E,MAAA5E,GAAA6E,OAAAkX,aAAA/V,EAAA5F,EAKA,IAAAsH,GAAAtH,EAAAqK,OACAmf,EAAA5jB,EAAA6B,OAAA0f,IAAA7f,EAEAkiB,IAEA5jB,EAAAjH,QAAA1F,GAAA0K,OAAA2f,cAAAtjB,IAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA8lB,iBAIA7jB,EAAA6B,OAAAoa,IAAAva,EAAAtH,GACA4F,EAAAjH,QAAA1F,GAAA0K,OAAA0f,YAAArjB,IACA4F,EAAAggB,UAEA5lB,EAAA+mB,SAAA7tB,GAAAyK,OAAA+lB,gBAGA1pB,EAAA4S,cAAApE,GAAA5J,IAIA0B,OAAA,SAAAtG,EAAA4E,GAEA,GAAAgB,GAAA/M,IAGAA,MAAA8wB,iBAAA3pB,GAGAA,EAAAqnB,UAAAnuB,GAAA2U,OAAAka,aAEAnoB,GAAA4E,MAAA5E,GAAA6E,OAAAiY,mBAAA9W,EAAA5F,GAGAA,EAAAqnB,QAAAnuB,GAAA2U,OAAAia,cAEA9nB,EAAA4S,cAAAvE,GAAAzJ,IAGA+kB,iBAAA,SAAA3pB,GAEA,GAAA4F,GAAA/M,KACAyO,EAAAtH,EAAAqK,MAEAzE,GAAA6B,OAAA0f,IAAA7f,KAEA1B,EAAA6B,OAAAnB,OAAAgB,GACA1B,EAAAjH,QAAA1F,GAAA0K,OAAA4f,cAAAvjB,IACA4F,EAAAggB,UAEA5lB,EAAA+mB,SAAA7tB,GAAAyK,OAAAykB,aAMAjrB,EAAAlE,GAAA/C,WACAqG,EAAAtD,GAAA/C,UAAA,SAAA+C,GAAA0K,OAAAoM,SCrrCA7W,GAAAyK,QAEAimB,QAAA,UACAC,MAAA,QACAC,QAAA,WACAC,SAAA,YACAC,UAAA,aACAC,WAAA,cACAjD,cAAA,iBACAC,WAAA,cACA7D,QAAA,UACAsE,OAAA,SACAwC,OAAA,SACAR,cAAA,gBACAD,cAAA,gBACAU,UAAA,aACAC,eAAA,kBACAhC,QAAA,UACAlB,aAAA,gBACAmD,UAAA,aACAC,iBAAA,qBACAC,WAAA,gCACA5X,WAAA,cACA6X,kBAAA,sBACAC,kBAAA,sBACAC,YAAA,sDACAC,YAAA,eACAC,mBAAA,uBACAC,aAAA,oCACAC,aAAA,gBACAC,oBAAA,wBACAC,oBAAA,wBACAC,cAAA,4DACAC,SAAA,YACAC,gBAAA,oBACAC,UAAA,8BACAC,UAAA,aACAC,iBAAA,qBACAC,iBAAA,qBACAzG,WAAA,mDACAyC,gBAAA,wBACAiE,kBAAA,sBACAhI,kBAAA,qBACAC,mBAAA,sBACA1T,QAAA,iEAGA7W,GAAA2U,QAEA4d,OAAA,EACA1D,YAAA,EACAD,cAAA,EACAM,QAAA,GAGAlvB,GAAAwyB,SAEA1xB,UAAA,EACA2xB,SAAA,GAGAp0B,EAAA2B,GAAAhD,WAGAuX,MAAA,SAAArN,EAAAsM,GAOA,GALA7T,KAAAwuB,QAAAnuB,GAAA2U,OAAA4d,OACA5yB,KAAA+yB,WAAA,KACA/yB,KAAAgzB,cACAhzB,KAAAizB,eAEApf,EACA,CACA,GAAApF,GAAAzO,KAAA+R,IAAA4a,OAAAplB,EAEAvH,MAAA+R,IAAA5E,IAAAsB,GAAAzO,KACAA,KAAAksB,KAAA3kB,EAAA,OAAAsM,OAIA7T,MAAAkzB,OAAA3rB,EAGA,IAAAvH,KAAA+R,IAAAiZ,cACA,CACA,GAAAmI,GAAAnzB,KAAA+R,IAAA1B,SAEA,KAAA,GAAAxO,KAAAsxB,GACA,CACA,GAAAtiB,GAAAsiB,EAAAtxB,EAEAgP,GAAAuiB,MAEApzB,KAAAqzB,aAAAxxB,EAAA,OAAAgS,MAMAyf,MAAA,SAAAjjB,GAEA,GAAAjT,EAAAiT,GAEA,IAAA,GAAAxT,GAAA,EAAAA,EAAAwT,EAAAtT,OAAAF,IAEAmD,KAAAqzB,aAAAhjB,EAAAxT,QAGA,IAAAR,EAAAgU,GAEArQ,KAAAqzB,aAAAhjB,OAGA,CACA,GAAA8iB,GAAAnzB,KAAA+R,IAAA1B,SAEA,KAAA,GAAAxO,KAAAsxB,GAEAnzB,KAAAqzB,aAAAxxB,KAKAqxB,OAAA,SAAA3rB,GAEA,GAAAgsB,GAAAvzB,KAAA+R,IAAA7L,SACAkB,EAAApH,KAAA+R,IAAA3K,OACAiJ,EAAArQ,KAAA+R,IAAA1B,UACAid,EAAAttB,KAAA+R,IAAAtD,GAEA,IAAArQ,EAAAm1B,GACA,CACA,IAAA,GAAA12B,GAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IACA,CACA,GAAA0E,GAAA6F,EAAAvK,GACAwJ,EAAAktB,EAAAhyB,GACAiyB,EAAA9xB,EAAA2E,EAEArG,MAAAuB,GAAAiyB,EAGA,IAAA,GAAAjyB,KAAA8O,GAEA,GAAA9O,IAAAgyB,GACA,CACA,GAAAltB,GAAAktB,EAAAhyB,GACAiyB,EAAA9xB,EAAA2E,GACAwK,EAAA7Q,KAAAqzB,aAAA9xB,EAEAsP,GAAA4F,IAAAzW,KAAAwzB,QAMA,KAAA,GAAA32B,GAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IACA,CACA,GAAA0E,GAAA6F,EAAAvK,EAEAmD,MAAAuB,GAAAvF,EAIA,GAAAyS,IAAA,CASA,IANAlH,IAEAkH,EAAAzO,KAAA+R,IAAA4a,OAAAplB,GAAA,IAIAkH,KAAA,EAEAA,EAAAzO,KAAA+R,IAAA4a,OAAA3sB,MAAA,OAKA,IAAA3D,EAAAixB,GAEAttB,KAAAstB,GAAA7e,MAIA,KAAA,GAAA5R,GAAA,EAAAA,EAAAywB,EAAAvwB,OAAAF,IACA,CACA,GAAAa,GAAA4vB,EAAAzwB,EAEAmD,MAAAtC,GAAA6J,EAAA7J,GAOA+Q,KAAA,IAEAzO,KAAA+R,IAAA5E,IAAAsB,GAAAzO,KACAA,KAAAyzB,MAAAhlB,GAIAzO,KAAAksB,KAAA3kB,IAGA2kB,KAAA,SAAA3kB,EAAAnB,EAAAyN,EAAA6f,GAEA,GAAAt1B,EAAAmJ,GAEA,IAAA,GAAAhG,KAAAgG,GAEAvH,KAAAksB,KAAA3qB,EAAAgG,EAAAhG,GAAAsS,GAAA,OAGA,IAAAxX,EAAAkL,GACA,CACA,GAAAlH,GAAAwyB,QAAAtrB,GAEA,MAGA,IAAAsJ,GAAA7Q,KAAAqzB,aAAA9rB,EAAAnB,EAAAyN,EAEAhD,GAEAA,EAAA4F,IAAAzW,KAAAoG,EAAAyN,GAIA7T,KAAAuH,GAAAnB,GAIAstB,GAAAn3B,EAAAgL,IAEAvH,KAAAkuB,SAAA7tB,GAAAyK,OAAAumB,QAAA9pB,EAAAnB,KAIAutB,KAAA,SAAApsB,EAAAC,GAEA,GAAApK,EAAAmK,GAEA,MAAAD,GAAAtH,KAAAuH,EAAAC,EAEA,IAAApJ,EAAAmJ,GACA,CACA,IAAA,GAAA/D,KAAA+D,GAEAA,EAAA/D,GAAAgE,EAAA7F,EAAA3B,KAAAwD,IAAAxD,KAAAwD,EAGA,OAAA+D,GAEA,GAAAlL,EAAAkL,GACA,CACA,GAAAlH,GAAAwyB,QAAAtrB,GAEA,MAGA,IAAAsJ,GAAA7Q,KAAAqzB,aAAA9rB,EAEA,IAAAsJ,EACA,CACA,GAAA3T,GAAA2T,EAAAlG,IAAA3K,KAEA,OAAAwH,GAAA7F,EAAAzE,GAAAA,EAIA,MAAAsK,GAAA7F,EAAA3B,KAAAuH,IAAAvH,KAAAuH,KAKAqsB,QAAA,WAEA5zB,KAAA+R,IAAAwZ,OAAAvrB,OAGA6zB,mBAAA,SAAAC,EAAAC,GAUA,QAAAC,KAEAF,EAAA70B,MAAA80B,GAAA/zB,KAAA7C,WACA4G,IAXA,GAAAkwB,GAAAj0B,KAAAizB,WAEA,KAAA,GAAAiB,KAAAD,GACA,CACA,GAAAE,GAAAF,EAAAC,EAEA,KAAAC,EAAA7b,WACA,CAOA,GAAAvU,GAAAowB,EAAA1hB,MAAApS,GAAAyK,OAAA+mB,YAAAmC,EAEA,QAAA,GAIA,OAAA,GAGAI,QAAA,SAAA7yB,EAAA8yB,GAEA,GAAAxjB,GAAA7Q,KAAAqzB,aAAA9xB,EAEAsP,IAEAA,EAAAwjB,OAAAr0B,KAAAq0B,IAIAC,UAAA,SAAA/yB,EAAAgzB,GAEA,GAAA1jB,GAAA7Q,KAAAqzB,aAAA9xB,EAEAsP,IAEAA,EAAA2jB,SAAAx0B,KAAAu0B,IAIAE,WAAA,SAAAlzB,EAAAmzB,GAEA,GAAA7jB,GAAA7Q,KAAAqzB,aAAA9xB,EAEA,OAAAsP,IAAAA,EAAA8jB,UAAA30B,KAAA00B,IAGArB,aAAA,SAAA9xB,EAAAqzB,EAAA/gB,GAEA,GAAAsf,GAAAnzB,KAAA+R,IAAA1B,UACAQ,EAAAsiB,EAAA5xB,EAEA,OAAAsP,IAEAtP,IAAAvB,MAAAgzB,YAEAniB,EAAAkP,KAAA/f,KAAA40B,EAAA/gB,GAGAhD,IAGA,GAGA0H,MAAA,SAAAsc,EAAArZ,EAAAzP,GAEA,GAAAA,GACA,IAAA5O,UAAAJ,OAAAgP,EACA,IAAA5O,UAAAJ,QAAAqB,EAAAy2B,IAAAv0B,EAAAkb,GAAAA,EACA,IAAAre,UAAAJ,QAAAuD,EAAAu0B,GAAAA,EAAAviB,GAAAsO,GAEA,IAAA5gB,KAAA0wB,aAIA,MAFA3pB,IAAA4E,MAAA5E,GAAA6E,OAAAkX,aAAA9iB,KAAA+R,IAAA/R,MAEAwP,GAAA9D,QAAA1L,KAGA,IAAA0K,GAAAsH,GAAAhS,KAAA+L,EACA1L,GAAAyK,OAAAgP,WACAzZ,GAAAyK,OAAA6mB,kBACAtxB,GAAAyK,OAAA8mB,kBACAvxB,GAAAyK,OAAA0mB,UACAnxB,GAAAyK,OAAA2mB,iBAGA,OAAAjiB,IAAAslB,YAAApqB,EAAA1K,KAAA,SAAA80B,GAEA7mB,GAAA,WAEAjO,KAAA+R,IAAA0e,aAAAzwB,MAEAA,KAAAksB,KAAA2I,EAAArZ,GAEAxb,KAAAkuB,SAAA7tB,GAAAyK,OAAAmmB,SAAAjxB,OAEAA,KAAA+R,IAAAhB,KAAA/Q,KAAA+L,GAEA/L,KAAAkuB,SAAA7tB,GAAAyK,OAAAomB,UAAAlxB,QAEAA,SAIA+0B,QAAA,SAAAhpB,GAEA,GAAAA,GAAAzL,EAAAyL,GAAAA,EAAAuG,GAAAsO,GAEA,KAAA5gB,KAAAg1B,UAEA,MAAAxlB,IAAA9D,QAAA1L,KAGA,IAAA0K,GAAAsH,GAAAhS,KAAA+L,EACA1L,GAAAyK,OAAAmnB,aACA5xB,GAAAyK,OAAAonB,oBACA7xB,GAAAyK,OAAAqnB,oBACA9xB,GAAAyK,OAAAgnB,YACAzxB,GAAAyK,OAAAinB,mBAGA,OAAAviB,IAAAslB,YAAApqB,EAAA1K,KAAA,SAAA80B,GAEA7mB,GAAA,WAEAjO,KAAAkuB,SAAA7tB,GAAAyK,OAAAqmB,WAAAnxB,OAEAA,KAAA+R,IAAAtE,OAAAzN,KAAA+L,GAEA/L,KAAAkuB,SAAA7tB,GAAAyK,OAAAsmB,YAAApxB,QAEAA,SAIAmsB,SAAA,SAAApgB,GAEA,GAAArB,GAAAsH,GAAAhS,KAAA+L,EACA1L,GAAAyK,OAAA0nB,UACAnyB,GAAAyK,OAAA2nB,iBACApyB,GAAAyK,OAAA4nB,iBACAryB,GAAAyK,OAAAunB,SACAhyB,GAAAyK,OAAAwnB,gBAgBA,OAbAxmB,IAAAC,EAAAuG,GAAAC,MAEAvS,KAAA+Z,cAAAzE,GAAAvJ,GAEAD,GAAAC,EAAAuG,GAAAS,OAEA/S,KAAA+Z,cAAA3E,GAAArJ,GAIArB,EAAAgB,QAAA1L,MAGA0K,GAGAuqB,aAAA,WAIA,MAFAluB,IAAAjD,GAAAiD,GAAA+D,OAAAuV,OAAArgB,KAAAmsB,SAAAnsB,MAEAA,MAGAk1B,QAAA,SAAA7f,GAEArV,KAAA0tB,OAEA1tB,KAAAuY,MAAAvY,KAAA0tB,QAEArY,GAEArV,KAAAkzB,UAIAiC,OAAA,SAAA7zB,GAWA,IAAA,GANAyL,GAAA/M,KAAA+R,IACAtD,EAAA1B,EAAA0B,IACArH,EAAA2F,EAAA3F,OACAiJ,EAAAtD,EAAAsD,UACAnT,KAEAL,EAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IACA,CACA,GAAAu4B,GAAAhuB,EAAAvK,EAEAyE,IAAA8zB,IAAA9zB,GAEApE,EAAAk4B,GAAA1zB,EAAAJ,EAAA8zB,IAEAA,IAAAp1B,QAEA9C,EAAAk4B,GAAAzzB,EAAA3B,KAAAo1B,KAIA/4B,EAAAoS,UAEAvR,GAAAuR,EAGA,IAAA4mB,GAAAtoB,EAAA4f,OAAAzvB,GACA2vB,EAAA7sB,KAAAwR,MAEA,IAAA6jB,IAAAxI,EAEA,KAAA,yDAGA,KAAA,GAAAyI,KAAAjlB,GAEA/O,GAAAg0B,IAAAh0B,IAEA+O,EAAAilB,GAAAC,SAAAv1B,KAAA9C,EAAAoE,EAAAg0B,GAIA,IAAAlhB,GAAArH,EAAAuf,YAAApvB,GACAs4B,IAEA,KAAA,GAAAF,KAAAjlB,GAEA/O,GAAAg0B,IAAAh0B,IAEA+O,EAAAilB,GAAAG,UAAAz1B,KAAAw1B,EAAAl0B,EAAAg0B,GAMA,OAFAlhB,GAAA8X,KAAAsJ,GAEAphB,GAGAshB,MAAA,SAAAtuB,GAEApH,KAAA21B,YAAA31B,KAAA+R,IAAAuZ,OAAAtrB,KAAAsH,EAAAtH,KAAAoH,GAAApH,KAAA+R,IAAA3K,QAAA,IAAA,IAGAwuB,KAAA,SAAAC,GAEAz3B,EAAA4B,KAAA21B,eAEA31B,KAAAksB,KAAAlsB,KAAA21B,aAEAE,GAEA71B,KAAA81B,aAKAA,SAAA,iBAEA91B,MAAA21B,aAGAX,QAAA,WAEA,OAAAh1B,KAAA0wB,cAAA1wB,KAAA+R,IAAAnD,OAAA0f,IAAAtuB,KAAAwR,SAGAuI,cAAA,SAAAgc,EAAAhqB,GAEA,GAAAuB,GAAA,GAAAyoB,GAAA/1B,KAAA+L,EAEA/L,MAAA+yB,WAOA/yB,KAAA+yB,WAAAiD,MAAA1oB,IALAtN,KAAA+yB,WAAAzlB,EACAtN,KAAA+yB,WAAAkD,YAQAtI,QAAA,SAAAzc,GAEA,GAAA3D,GAAAvN,KAAA+R,IAAAuZ,OAAAtrB,KAAAsH,EAAAtH,KAAAA,KAAA+R,IAAA3K,QAAA,GAAA8J,GAEAiiB,EAAAnzB,KAAA+R,IAAA1B,UACAA,EAAArQ,KAAAgzB,UAEA,KAAA,GAAAnxB,KAAAwO,GAEA8iB,EAAAtxB,GAAAypB,OAAAtrB,KAAAuN,EAAA2D,EAGA,OAAA3D,IAGA2oB,SAAA,WAEAl2B,KAAAkuB,SAAA7tB,GAAAyK,OAAAumB,SAGA7f,KAAA,SAAAob,GAOA,MALA5sB,MAAAyzB,QAEAzzB,KAAAyzB,MAAAzzB,KAAA+R,IAAA4a,OAAA3sB,KAAA4sB,IAGA5sB,KAAAyzB,OAGA0C,MAAA,WAEA,MAAAn2B,MAAA+R,IAAA+a,QAAA9sB,OAGAo2B,KAAA,WAEA,MAAAp2B,MAAA+R,IAAAlQ,KAAA,IAAA7B,KAAAwR,QAGA6kB,QAAA,WAEA,MAAAnvB,GAAAlH,KAAAA,KAAA+R,IAAAtD,IAAAlS,IAGA+5B,UAAA,WAEA,MAAAt2B,MAAAwuB,UAAAnuB,GAAA2U,OAAA4d,QAGA2D,UAAA,WAEA,MAAAv2B,MAAAwuB,UAAAnuB,GAAA2U,OAAAka,aAGAsH,WAAA,WAEA,MAAAx2B,MAAAwuB,UAAAnuB,GAAA2U,OAAAka,aAAAlvB,KAAAwuB,UAAAnuB,GAAA2U,OAAAia,eAGAyB,WAAA,WAEA,MAAA1wB,MAAAwuB,SAAAnuB,GAAA2U,OAAAia,eAGA3W,SAAA,WAEA,QAAAtY,KAAA0tB,QAGA+I,gBAAA,WAEA,QAAAz2B,KAAAiuB,QAGAyI,OAAA,WAEA,QAAA12B,KAAA0tB,QAAA1tB,KAAAiuB,SAGA0I,YAAA,SAAAC,GAEA,GAAAC,GAAA72B,KAAA0tB,OACAngB,EAAAqpB,GAAA52B,KAAA2tB,SAAA,GACAvmB,EAAApH,KAAA+R,IAAAzC,UAEA,OAAAunB,GAAAzuB,GAAAmF,EAAAspB,EAAAzvB,EAAAjE,GAAAoK,GAGAqhB,YAAA,WAEA,IAAA5uB,KAAA0tB,OAEA,OAAA,CAGA,IAAAoJ,GAAA92B,KAAA+R,IAAAgZ,cACAxd,EAAAvN,KAAA2tB,SAAA,GACAkJ,EAAA72B,KAAA0tB,MAEA,KAAA,GAAAnsB,KAAAgM,GACA,CACA,GAAAwgB,GAAAxgB,EAAAhM,GACAysB,EAAA6I,EAAAt1B,EAEA,KAAAu1B,EAAAv1B,KAKA4B,EAAA4qB,EAAAC,GAEA,OAAA,EAIA,OAAA,GAGA7sB,SAAA,WAEA,MAAAnB,MAAA+R,IAAA7G,UAAA,IAAA6rB,KAAAC,UAAAh3B,KAAA2tB,cAKArpB,EAAAjE,GAAAhD,WAAA,GAEAqG,EAAArD,GAAAhD,UAAA,UAAAgD,GAAAyK,OAAAoM,SAAA,GCpsBAxY,EAAAsU,GAAA3V,WASAgY,MAAA,WAMA,MAJArV,MAAA9C,OAAAH,OAAA,EACAiD,KAAA2O,KAAA5R,OAAA,EACAiD,KAAAiT,WAEAjT,MAWAgpB,IAAA,SAAAva,EAAArI,GAaA,MAXAqI,KAAAzO,MAAAiT,QAEAjT,KAAA9C,OAAA8C,KAAAiT,QAAAxE,IAAArI,GAIApG,KAAAiT,QAAAxE,GAAAzO,KAAA9C,OAAAH,OACAuR,GAAAhP,KAAA/B,KAAAyC,KAAA9C,OAAAkJ,GACAkI,GAAAhP,KAAA/B,KAAAyC,KAAA2O,KAAAF,IAGAzO,MASA2K,IAAA,SAAA8D,GAEA,MAAAzO,MAAA9C,OAAA8C,KAAAiT,QAAAxE,KAUAhB,OAAA,SAAAgB,GAEA,GAAAwoB,GAAAj3B,KAAAiT,QAAAxE,EAOA,OALAnO,GAAA22B,IAEAj3B,KAAAk3B,SAAAD,GAGAj3B,MAUAk3B,SAAA,SAAAD,GAEA,GAAAxoB,GAAAzO,KAAA2O,KAAAsoB,GACAE,EAAA7oB,GAAAyN,IAAA9c,MAAAe,KAAA9C,QACAk6B,EAAA9oB,GAAAyN,IAAA9c,MAAAe,KAAA2O,KAWA,OATAsoB,GAAAj3B,KAAA9C,OAAAH,SAEAiD,KAAA9C,OAAA+5B,GAAAE,EACAn3B,KAAA2O,KAAAsoB,GAAAG,EACAp3B,KAAAiT,QAAAmkB,GAAAH,SAGAj3B,MAAAiT,QAAAxE,GAEAzO,MASAsuB,IAAA,SAAA7f,GAEA,MAAAA,KAAAzO,MAAAiT,SAQAsM,KAAA,WAEA,MAAAvf,MAAA9C,OAAAH,QAGAs6B,SAAA,SAAAhgB,EAAAigB,GAOA,IAAA,GALAlgB,GAAAkgB,GAAA,GAAAtkB,IACAlW,EAAAkD,KAAAuf,OACAriB,EAAA8C,KAAA9C,OACAyR,EAAA3O,KAAA2O,KAEA9R,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAA06B,GAAAr6B,EAAAL,GACAa,EAAAiR,EAAA9R,EAEAwa,GAAAiX,IAAA5wB,IAEA0Z,EAAA4R,IAAAtrB,EAAA65B,GAIA,MAAAngB,IAWAxD,OAAA,SAAA5P,EAAAszB,GAOA,IAAA,GALAlgB,GAAAkgB,GAAA,GAAAtkB,IACAlW,EAAAkD,KAAAuf,OACAriB,EAAA8C,KAAA9C,OACAyR,EAAA3O,KAAA2O,KAEA9R,EAAA,EAAAC,EAAAD,EAAAA,IACA,CACA,GAAA06B,GAAAr6B,EAAAL,GACAa,EAAAiR,EAAA9R,EAEAmH,GAAAuzB,EAAA75B,IAEA0Z,EAAA4R,IAAAtrB,EAAA65B,GAIA,MAAAngB,IASAxZ,QAAA,WAOA,MALAA,GAAAoC,KAAA9C,QACAU,EAAAoC,KAAA2O,MAEA3O,KAAAw3B,eAEAx3B,MAQAhC,SAAA,SAAAtB,GAEA,MAAAsB,GAAAtB,EAAAsD,KAAA9C,SAeA8vB,KAAA,SAAAtwB,GAKA,QAAA+6B,GAAAC,EAAAC,GAMA,IAJA,GAAAC,GAAAvgB,EAAAna,OAAAY,KAAAC,OAAA45B,EAAAD,GAAA,IACA76B,EAAA66B,EACAG,EAAAF,EAEAE,GAAAh7B,GACA,CACA,KAAAH,EAAA2a,EAAAna,OAAAL,GAAA+6B,GAAA,GAAA/6B,GACA,MAAAH,EAAA2a,EAAAna,OAAA26B,GAAAD,GAAA,GAAAC,GAEAA,IAAAh7B,IACAY,EAAA4Z,EAAAna,OAAAL,EAAAg7B,GACAp6B,EAAA4Z,EAAA1I,KAAA9R,EAAAg7B,GACAh7B,IACAg7B,KAIA,MAAAh7B,GAIA,QAAAi7B,GAAAJ,EAAAC,GAEA,GAAAV,GAAAQ,EAAAC,EAAAC,EAEAV,GAAA,EAAAS,GAEAI,EAAAJ,EAAAT,EAAA,GAGAU,EAAAV,GAEAa,EAAAb,EAAAU,GArCA,GAAAtgB,GAAArX,KAyCA23B,EAAA33B,KAAAuf,OAAA,CAUA,OAPAoY,GAAA,IAEAG,EAAA,EAAAH,GAEA33B,KAAAw3B,gBAGAx3B,MASAw3B,aAAA,WAEAx3B,KAAAiT,UAEA,KAAA,GAAApW,GAAA,EAAA8a,EAAA3X,KAAA2O,KAAA5R,OAAA4a,EAAA9a,EAAAA,IAEAmD,KAAAiT,QAAAjT,KAAA2O,KAAA9R,IAAAA,CAGA,OAAAmD,SCtQAxC,GAAAsN,QAeAitB,IAAA,MAaAC,KAAA,OAYAC,KAAA,OAgBAC,OAAA,SAaAC,QAAA,UAaAC,QAAA,UAcAC,MAAA,QAUAC,QAAA,UASAphB,QAAA,sDAIAtY,EAAAxC,MAAAoB,IAiBAuS,cAAA,SAAArT,EAAAoF,GAKA,MAHA9B,MAAAtD,WAAAsF,EAAAtF,EAAAoF,GACA9B,KAAAgtB,OAEAhtB,MAmBAiC,cAAA,SAAAvF,EAAAoF,GAKA,MAHA9B,MAAAtD,WAAAuF,EAAAjC,KAAAtD,WAAAA,EAAAoF,GACA9B,KAAAgtB,OAEAhtB,MAiBAhC,SAAA,SAAAtB,EAAAoF,GAEA,GAAAnF,GAAAD,EAAAsF,EAAAtF,EAAAoF,GAAA9B,KAAAtD,UAEA,OAAAsB,GAAArB,EAAAqD,OAyBAgtB,KAAA,SAAAtwB,EAAAoF,EAAAy2B,GAEA,GAAA57B,GAAAD,EAAAsF,EAAAtF,EAAAoF,GAAA9B,KAAAtD,UASA,SAPAsB,EAAArB,EAAAqD,QAAAu4B,IAAA57B,GAAAuB,EAAA8B,SAEAsO,GAAA0e,KAAAzvB,KAAAyC,KAAArD,GAEAqD,KAAA8F,QAAAtI,GAAAsN,OAAAmtB,MAAAj4B,QAGAA,MAcAqV,MAAA,SAAAnY,GAgBA,MAdA8C,MAAAjD,OAAA,EAEAK,EAAAF,GAEAoR,GAAAhP,KAAAL,MAAAe,KAAA9C,GAEAX,EAAAW,IAEAoR,GAAAhP,KAAA/B,KAAAyC,KAAA9C,GAGA8C,KAAA8F,QAAAtI,GAAAsN,OAAAutB,OAAAr4B,OACAA,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAEAgE,MAkBAw4B,KAAA,SAAAnlB,EAAAC,GAEA,MAAA,IAAAH,IAAAnT,KAAAqT,EAAAC,IAuBAgd,SAAA,SAAAmI,EAAAC,EAAAC,GAEA,GAAA/kB,GAAApJ,GAAAiuB,EAAAC,EAAAC,EAEA,OAAA,IAAAhlB,IAAA3T,KAAA4T,IA6BAnJ,MAAA,SAAAguB,EAAAC,EAAAC,EAAAvhB,GAKA,IAAA,GAHA3M,GAAAD,GAAAiuB,EAAAC,EAAAC,GACAp5B,EAAA6X,GAAApX,KAAAuU,aAEA1X,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAI,GAAA+C,KAAAnD,EAEA4N,GAAAxN,IAEAsC,EAAAq5B,IAAA37B,GAIA,MAAAsC,IA6BA83B,SAAA,SAAAjkB,EAAAgE,EAAAjU,GAKA,IAAA,GAHA5D,GAAA6X,GAAApX,KAAAuU,aACAzN,EAAA3D,GAAAvG,EAEAC,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CAIA,IAAA,GAHAI,GAAA+C,KAAAnD,GACAwK,GAAA,EAEAwwB,EAAA,EAAAA,EAAAzkB,EAAArW,SAAAsK,EAAAwwB,IAEAxwB,EAAAP,EAAA7J,EAAAmW,EAAAykB,GAGAxwB,IAEA9H,EAAAD,KAAArC,GAIA,MAAAsC,IA4BAs5B,UAAA,SAAAzlB,EAAAgE,EAAAjU,GAKA,IAAA,GAHA5D,GAAA6X,GAAApX,KAAAuU,aACAzN,EAAA3D,GAAAvG,EAEAC,EAAA,EAAAA,EAAAuW,EAAArW,OAAAF,IACA,CAIA,IAAA,GAHAI,GAAAmW,EAAAvW,GACAwK,GAAA,EAEAwwB,EAAA,EAAAA,EAAA73B,KAAAjD,SAAAsK,EAAAwwB,IAEAxwB,EAAAP,EAAA7J,EAAA+C,KAAA63B,GAGAxwB,IAEA9H,EAAAD,KAAArC,GAIA,MAAAsC,IA6BAu5B,WAAA,SAAA1lB,EAAAgE,EAAAjU,GAKA,IAAA,GAHA5D,GAAA6X,GAAApX,KAAAuU,aACAzN,EAAA3D,GAAAvG,EAEAC,EAAA,EAAAA,EAAAuW,EAAArW,OAAAF,IACA,CAIA,IAAA,GAHAI,GAAAmW,EAAAvW,GACAwK,GAAA,EAEAwwB,EAAA,EAAAA,EAAA73B,KAAAjD,SAAAsK,EAAAwwB,IAEAxwB,EAAAP,EAAA7J,EAAA+C,KAAA63B,GAGAxwB,IAEA9H,EAAAD,KAAArC,GAIA,MAAAsC,IAiBAkG,MAAA,WAKA,MAHAzF,MAAAjD,OAAA,EACAiD,KAAA8F,QAAAtI,GAAAsN,OAAAwtB,SAAAt4B,OAEAA,MA0BA44B,IAAA,SAAAxyB,EAAA2yB,GAWA,MATAzqB,IAAAhP,KAAA/B,KAAAyC,KAAAoG,GAEApG,KAAA8F,QAAAtI,GAAAsN,OAAAitB,KAAA/3B,KAAAoG,IAEA2yB,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAGAgE,MAsBAV,KAAA,WAEA,GAAApC,GAAAC,SAQA,OANAmR,IAAAhP,KAAAL,MAAAe,KAAA9C,GAEA8C,KAAA8F,QAAAtI,GAAAsN,OAAAktB,MAAAh4B,KAAAsO,GAAAhR,MAAA2B,MAAA/B,KAEA8C,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAEAgE,KAAAjD,QAsBA2R,QAAA,WAEA,GAAAxR,GAAAC,SAQA,OANAmR,IAAAI,QAAAzP,MAAAe,KAAA9C,GAEA8C,KAAA8F,QAAAtI,GAAAsN,OAAAktB,MAAAh4B,KAAAsO,GAAAhR,MAAA2B,MAAA/B,KAEA8C,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAEAgE,KAAAjD,QAyBAmW,OAAA,SAAAhW,EAAA67B,GAcA,MAZA37B,GAAAF,IAAAA,EAAAH,SAEAuR,GAAAhP,KAAAL,MAAAe,KAAA9C,GAEA8C,KAAA8F,QAAAtI,GAAAsN,OAAAktB,MAAAh4B,KAAA9C,IAEA67B,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,IAIAgE,MA4BAg5B,SAAA,SAAAn8B,EAAAuJ,EAAA2yB,GAUA,MARAzqB,IAAApJ,OAAA3H,KAAAyC,KAAAnD,EAAA,EAAAuJ,GACApG,KAAA8F,QAAAtI,GAAAsN,OAAAitB,KAAA/3B,KAAAoG,IAEA2yB,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAGAgE,MAuBA+b,IAAA,SAAAgd,GAEA,GAAAE,GAAA3qB,GAAAyN,IAAA9c,MAAAe,MACAnD,EAAAmD,KAAAjD,MASA,OAPAiD,MAAA8F,QAAAtI,GAAAsN,OAAAotB,QAAAl4B,KAAAi5B,EAAAp8B,IAEAk8B,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAGAi9B,GAuBA3b,MAAA,SAAAyb,GAEA,GAAAE,GAAA3qB,GAAAgP,MAAAre,MAAAe,KASA,OAPAA,MAAA8F,QAAAtI,GAAAsN,OAAAotB,QAAAl4B,KAAAi5B,EAAA,IAEAF,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAGAi9B,GA2BA/B,SAAA,SAAAr6B,EAAAk8B,GAEA,GAAAG,EAeA,OAbAr8B,IAAA,GAAAA,EAAAmD,KAAAjD,SAEAm8B,EAAAl5B,KAAAnD,GAEAyR,GAAApJ,OAAA3H,KAAAyC,KAAAnD,EAAA,GACAmD,KAAA8F,QAAAtI,GAAAsN,OAAAotB,QAAAl4B,KAAAk5B,EAAAr8B,IAEAk8B,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,IAIAk9B,GA8BAzrB,OAAA,SAAArH,EAAA2yB,EAAA51B,GAEA,GAAAtG,GAAAmD,KAAAxD,QAAA4J,EAAAjD,GACAg2B,EAAAn5B,KAAAnD,EAOA,OALA,KAAAA,GAEAmD,KAAAk3B,SAAAr6B,EAAAk8B,GAGAI,GA6BAC,UAAA,SAAAl8B,EAAA67B,EAAA51B,GAEA,GAAA81B,KAEA,IAAA77B,EAAAF,IAAAA,EAAAH,OACA,CACA,IAAA,GAAAF,GAAA,EAAAA,EAAAK,EAAAH,OAAAF,IACA,CACA,GAAAuJ,GAAAlJ,EAAAL,GACAa,EAAAsC,KAAAxD,QAAA4J,EAAAjD,EAEA,MAAAzF,IAEA4Q,GAAApJ,OAAA3H,KAAAyC,KAAAtC,EAAA,GACAu7B,EAAA35B,KAAA8G,IAIApG,KAAA8F,QAAAtI,GAAAsN,OAAAqtB,SAAAn4B,KAAAi5B,IAEAF,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAIA,MAAAi9B,IAkCAI,YAAA,SAAAZ,EAAAC,EAAAC,EAAAvhB,EAAA2hB,GAKA,IAAA,GAHAtuB,GAAAD,GAAAiuB,EAAAC,EAAAC,GACAM,EAAA7hB,GAAApX,KAAAuU,aAEA1X,EAAAmD,KAAAjD,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAuJ,GAAApG,KAAAnD,EAEA4N,GAAArE,KAEAkI,GAAApJ,OAAA3H,KAAAyC,KAAAnD,EAAA,GACAo8B,EAAA35B,KAAA8G,IAWA,MAPApG,MAAA8F,QAAAtI,GAAAsN,OAAAqtB,SAAAn4B,KAAAi5B,IAEAF,GAEA/4B,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAGAi9B,GA6BA/zB,OAAA,SAAA6Z,EAAAua,GAEA,GAAAC,GAAAjrB,GAAAhR,MAAAC,KAAAJ,UAAA,GACA87B,EAAA3qB,GAAApJ,OAAAjG,MAAAe,KAAA7C,UAcA,OAZAm8B,IAEAt5B,KAAA8F,QAAAtI,GAAAsN,OAAAqtB,SAAAn4B,KAAAi5B,IAGAM,EAAAx8B,QAEAiD,KAAA8F,QAAAtI,GAAAsN,OAAAktB,MAAAh4B,KAAAu5B,IAGAv5B,KAAAgtB,KAAAhxB,EAAAA,GAAA,GAEAi9B,GAiBAr7B,QAAA,WAaA,MAXA0Q,IAAA1Q,QAEA0Q,GAAA1Q,QAAAqB,MAAAe,MAIApC,EAAAoC,MAGAA,KAAA8F,QAAAtI,GAAAsN,OAAAstB,SAAAp4B,OAEAA,MA0BAxD,QAAA,SAAA4J,EAAAjD,GAIA,IAAA,GAFA2D,GAAA3D,GAAAvG,EAEAC,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IAEA,GAAAiK,EAAAV,EAAApG,KAAAnD,IAEA,MAAAA,EAIA,OAAA,IAwBA28B,SAAA,SAAA98B,EAAA+8B,GAKA,IAAA,GAHA98B,GAAAqF,EAAAtF,GAAAsD,KAAAtD,YAAA,GACAg9B,EAAAD,EAEA58B,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IAEAF,EAAA+8B,EAAA15B,KAAAnD,IAAA,IAEA68B,EAAA15B,KAAAnD,GAIA,OAAA68B,IAwBAC,SAAA,SAAAj9B,EAAA+8B,GAKA,IAAA,GAHA98B,GAAAqF,EAAAtF,GAAAsD,KAAAtD,YAAA,GACAk9B,EAAAH,EAEA58B,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IAEAF,EAAAi9B,EAAA55B,KAAAnD,IAAA,IAEA+8B,EAAA55B,KAAAnD,GAIA,OAAA+8B,IA4BAF,IAAA,SAAAp4B,EAAAoI,EAAA+vB,GAKA,IAAA,GAHAnwB,GAAAC,GAAAjI,EAAAoI,GACAgwB,EAAAD,EAEA58B,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAg9B,GAAAvwB,EAAAtJ,KAAAnD,GAEAkG,GAAA22B,EAAAG,GAAA,GAAA,IAEAH,EAAAG,GAIA,MAAAH,IA4BAE,IAAA,SAAAt4B,EAAAoI,EAAA+vB,GAKA,IAAA,GAHAnwB,GAAAC,GAAAjI,EAAAoI,GACAkwB,EAAAH,EAEA58B,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAg9B,GAAAvwB,EAAAtJ,KAAAnD,GAEAkG,GAAA62B,EAAAC,GAAA,GAAA,IAEAD,EAAAC,GAIA,MAAAD,IA2BAE,WAAA,SAAArB,EAAAC,EAAAC,GAIA,IAAA,GAFAluB,GAAAD,GAAAiuB,EAAAC,EAAAC,GAEA97B,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,EAEA,IAAA4N,EAAAtD,GAEA,MAAAA,GAIA,MAAA,OAwBAhF,MAAA,SAAAb,EAAAoI,GAIA,IAAA,GAFAJ,GAAAC,GAAAjI,EAAAoI,GAEA7M,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAg9B,GAAAvwB,EAAAtJ,KAAAnD,GAEA,IAAAN,EAAAs9B,GAEA,MAAAA,KA6BAE,UAAA,SAAAz4B,EAAA8E,EAAAjD,GAIA,IAAA,GAFAsH,GAAAD,GAAAlJ,EAAA8E,EAAAjD,GAEAtG,EAAAmD,KAAAjD,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,EAEA,IAAA4N,EAAAtD,GAEA,MAAAA,GAIA,MAAA,OAwBA2U,KAAA,SAAAxa,EAAAoI,GAIA,IAAA,GAFAJ,GAAAC,GAAAjI,EAAAoI,GAEA7M,EAAAmD,KAAAjD,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAg9B,GAAAvwB,EAAAtJ,KAAAnD,GAEA,IAAAN,EAAAs9B,GAEA,MAAAA,KA4BAG,UAAA,SAAA1wB,EAAA2wB,EAAAC,EAAAC,GAEA,IAAA,GAAAt9B,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAg9B,GAAAvwB,EAAAtJ,KAAAnD,GAEAo9B,GAAAJ,IAEAK,EAAAL,GAIA,MAAAM,MAsBAC,IAAA,SAAAjxB,GAKA,QAAA+wB,GAAAh+B,GAEAgI,GAAAhI,EAGA,QAAAi+B,KAEA,MAAAj2B,GAVA,GAAAoF,GAAAD,GAAAF,GACAjF,EAAA,CAYA,OAAAlE,MAAAg6B,UAAA1wB,EAAAhJ,EAAA45B,EAAAC,IAsBAE,IAAA,SAAAlxB,GAMA,QAAA+wB,GAAAh+B,GAEAgI,GAAAhI,EACAo+B,IAGA,QAAAH,KAEA,MAAA,KAAAG,EAAA,EAAAp2B,EAAAo2B,EAZA,GAAAhxB,GAAAD,GAAAF,GACAjF,EAAA,EACAo2B,EAAA,CAaA,OAAAt6B,MAAAg6B,UAAA1wB,EAAAhJ,EAAA45B,EAAAC,IA6BAI,WAAA,SAAAj5B,EAAA8E,EAAAjD,GAKA,IAAA,GAHAsH,GAAAD,GAAAlJ,EAAA8E,EAAAjD,GACAq3B,EAAA,EAEA39B,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,EAEA4N,GAAAtD,IAEAqzB,IAIA,MAAAA,IAuBAC,MAAA,SAAAn5B,GAEA,IAAA/E,EAAA+E,GAEA,MAAAtB,MAAAjD,MAMA,KAAA,GAHAuM,GAAAC,GAAAjI,GACA4C,EAAA,EAEArH,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAg9B,GAAAvwB,EAAAtJ,KAAAnD,GAEAN,GAAAs9B,IAEA31B,IAIA,MAAAA,IAgCAw2B,MAAA,SAAAx9B,EAAAyR,EAAAgsB,EAAAC,GAEA,GAAAC,GAAAtxB,GAAArM,EAAAy9B,EAEA,IAAAhsB,EACA,CAIA,IAAA,GAHAmsB,GAAAvxB,GAAAoF,EAAAisB,GACA12B,KAEArH,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,GACAuJ,EAAAy0B,EAAA1zB,GACAsH,EAAAqsB,EAAA3zB,EAEAjD,GAAAuK,GAAArI,EAGA,MAAAlC,GAMA,IAAA,GAFAA,MAEArH,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,GACAuJ,EAAAy0B,EAAA1zB,EAEAjD,GAAA5E,KAAA8G,GAGA,MAAAlC,IAkBA62B,KAAA,SAAA/2B,EAAAjD,GAIA,IAAA,GAAAlE,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsB,GAAA6B,KAAAnD,EAEAmH,GAAAzG,KAAAwD,EAAA5C,EAAAtB,GAEAmD,KAAAnD,KAAAsB,GAEAtB,IAIA,MAAAmD,OAsBAg7B,UAAA,SAAAh3B,EAAA1C,EAAApE,EAAAiG,GAIA,IAAA,GAFAsH,GAAAD,GAAAlJ,EAAApE,EAAAiG,GAEAtG,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsB,GAAA6B,KAAAnD,EAEA4N,GAAAtM,KAEA6F,EAAAzG,KAAAyC,KAAA7B,EAAAtB,GAEAmD,KAAAnD,KAAAsB,GAEAtB,KAKA,MAAAmD,OA0BAi7B,OAAA,SAAAC,EAAAtG,GAEA,IAAA,GAAA/3B,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IAEA+3B,EAAAsG,EAAAtG,EAAA50B,KAAAnD,GAGA,OAAA+3B,IAWA1zB,OAAA,WAEA,GAAArE,GAAAiB,KAAAC,MAAAD,KAAAoD,SAAAlB,KAAAjD,OAEA,OAAAiD,MAAAnD,IAqBAs+B,MAAA,SAAAC,EAAAhkB,GAOA,IAAA,GALAikB,GAAAjkB,MACAkkB,EAAA,EACAC,EAAAF,EAAAC,GAAAD,EAAAC,OACAE,EAAA,EAEA3+B,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IAEA0+B,EAAAC,GAAAx7B,KAAAnD,KAEA2+B,GAAAJ,IAEAI,EAAA,EACAF,IACAC,EAAAx+B,OAAAq+B,EACAG,EAAAF,EAAAC,GAAAD,EAAAC,OAYA,OARA,KAAAE,GAEAF,IAGAC,EAAAx+B,OAAAy+B,EACAH,EAAAt+B,OAAAu+B,EAEAD,GA8BAI,SAAA,SAAAn6B,EAAA8E,EAAAjD,GAIA,IAAA,GAFAsH,GAAAD,GAAAlJ,EAAA8E,EAAAjD,GAEAtG,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,EAEA,IAAA4N,EAAAtD,GAEA,OAAA,EAIA,OAAA,GAwDAu0B,MAAA,SAAAC,GAEA,GAAAC,GAAAryB,GAAAoyB,EAAAC,GAAAD,EAAAE,aAAA,KACAC,EAAAtxB,GAAAmxB,EAAAG,OAAAH,EAAAI,YAAAJ,EAAAK,cACAC,EAAAN,EAAAM,WACA5kB,IAEA,IAAAhb,EAAAs/B,EAAAC,IAEAD,EAAAC,KAAAK,KAEAA,EAAAN,EAAAC,IAAA,aAGA,IAAAx+B,EAAAu+B,EAAAC,IAEA,IAAA,GAAAr6B,KAAAo6B,GAAAC,GAEAr6B,IAAA06B,KAEAA,EAAA16B,GAAA,QAKA,KAAA,GAAA1E,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,GACA4R,EAAAmtB,EAAAz0B,GACAu0B,EAAArkB,EAAA5I,EAEAitB,KAEAA,EAAArkB,EAAA5I,GAAAzO,KAAAuU,cAGAmnB,EAAA9C,IAAAzxB,GAAA,GAGA,GAAA+0B,GAAAl8B,KAAAuU,YAEA2nB,GAAAnsB,cAAA4rB,EAAAj/B,WAAAi/B,EAAA3rB,qBAEA,KAAA,GAAAvB,KAAA4I,GACA,CACA,GAAA8kB,MACAC,EAAA/kB,EAAA5I,EAEA,KAAA,GAAA4tB,KAAAJ,GACA,CACA,GAAAK,GAAAL,EAAAI,EAEAhgC,GAAAigC,GAEAH,EAAAE,GAAAD,EAAAE,GAAAD,GAEAn8B,EAAAo8B,KAEAH,EAAAE,GAAAC,EAAAF,EAAAC,IAIAV,EAAAY,SAAA,IAEAJ,EAAAK,OAAAJ,GAGAT,EAAAlB,SAAA,IAEA0B,EAAAM,OAAAL,EAAAr/B,QAGA++B,EAAAK,EAAAC,IAEAF,EAAA58B,KAAA68B,GAMA,MAFAD,GAAAlP,OAEAkP,GAWAjgC,QAAA,WAEA,MAAA+D,MAAA1C,SAWA8W,MAAA,WAEA,MAAA,IAAApU,MAAArB,YAAAqB,OAWAuU,WAAA,WAEA,MAAA,IAAAvU,MAAArB,eAKA2F,EAAA9G,GAAAH,WAeAqG,EAAAlG,GAAAH,UAAA,SAAAG,GAAAsN,OAAAoM,QiDzjEA,IAAAwlB,KAEA57B,KAAA,WAEAd,KAAA28B,MAAA77B,EAAAd,KAAA08B,GAAAE,WACA58B,KAAA68B,OAAA/7B,EAAAd,KAAA08B,GAAAI,YACA98B,KAAA+8B,SAAAj8B,EAAAd,KAAA08B,GAAAM,cACAh9B,KAAAi9B,UAAAn8B,EAAAd,KAAA08B,GAAAQ,eACAl9B,KAAAm9B,QAAAr8B,EAAAd,KAAA08B,GAAAU,aACAp9B,KAAAq9B,UAAAv8B,EAAAd,KAAA08B,GAAAY,eACAt9B,KAAAu9B,UAAAz8B,EAAAd,KAAA08B,GAAAc,gBAGA1sB,KAAA,SAAAtI,EAAAoL,GAgBA,MAdA5T,MAAAwI,OAAAA,IAEAxI,KAAAwI,MAEAxI,KAAAy9B,aAGAz9B,KAAAwI,KAAAA,EACAxI,KAAA09B,WAGA19B,KAAA4T,OAAAA,EACA5T,KAAA29B,OAEA39B,MAGA49B,UAAA,SAAAnF,EAAAC,EAAAC,GAKA,MAHA34B,MAAA4T,OAAApJ,GAAAiuB,EAAAC,EAAAC,GACA34B,KAAA29B,OAEA39B,MAGA09B,QAAA,WAUA,MARA19B,MAAAwI,KAAA1E,GAAAtG,GAAAsN,OAAAitB,IAAA/3B,KAAA28B,OACA38B,KAAAwI,KAAA1E,GAAAtG,GAAAsN,OAAAktB,KAAAh4B,KAAA68B,QACA78B,KAAAwI,KAAA1E,GAAAtG,GAAAsN,OAAAotB,OAAAl4B,KAAA+8B,UACA/8B,KAAAwI,KAAA1E,GAAAtG,GAAAsN,OAAAqtB,QAAAn4B,KAAAi9B,WACAj9B,KAAAwI,KAAA1E,GAAAtG,GAAAsN,OAAAutB,MAAAr4B,KAAAm9B,SACAn9B,KAAAwI,KAAA1E,GAAAtG,GAAAsN,OAAAstB,QAAAp4B,KAAAq9B,WACAr9B,KAAAwI,KAAA1E,GAAAtG,GAAAsN,OAAAwtB,QAAAt4B,KAAA69B,SAEA79B,MAGAy9B,WAAA,WAUA,MARAz9B,MAAAwI,KAAAzE,IAAAvG,GAAAsN,OAAAitB,IAAA/3B,KAAA28B,OACA38B,KAAAwI,KAAAzE,IAAAvG,GAAAsN,OAAAktB,KAAAh4B,KAAA68B,QACA78B,KAAAwI,KAAAzE,IAAAvG,GAAAsN,OAAAotB,OAAAl4B,KAAA+8B,UACA/8B,KAAAwI,KAAAzE,IAAAvG,GAAAsN,OAAAqtB,QAAAn4B,KAAAi9B,WACAj9B,KAAAwI,KAAAzE,IAAAvG,GAAAsN,OAAAutB,MAAAr4B,KAAAm9B,SACAn9B,KAAAwI,KAAAzE,IAAAvG,GAAAsN,OAAAstB,QAAAp4B,KAAAq9B,WACAr9B,KAAAwI,KAAAzE,IAAAvG,GAAAsN,OAAAwtB,QAAAt4B,KAAA69B,SAEA79B,MAGA29B,KAAA,WAMA,IAAA,GAJAn1B,GAAAxI,KAAAwI,KACAoL,EAAA5T,KAAA4T,OACAkqB,KAEAjhC,EAAA,EAAAA,EAAA2L,EAAAzL,OAAAF,IACA,CACA,GAAAuJ,GAAAoC,EAAA3L,EAEA+W,GAAAxN,IAEA03B,EAAAx+B,KAAA8G,GAIA,MAAApG,MAAAqV,MAAAyoB,IAGAlB,UAAA,SAAAxpB,EAAAhN,GAEA,GAAAwN,GAAA5T,KAAA4T,MAEAA,GAAAxN,IAEApG,KAAA44B,IAAAxyB,IAIA02B,WAAA,SAAA1pB,EAAAlW,GAKA,IAAA,GAHA0W,GAAA5T,KAAA4T,OACA0c,KAEAzzB,EAAA,EAAAA,EAAAK,EAAAH,OAAAF,IACA,CACA,GAAAuJ,GAAAlJ,EAAAL,EAEA+W,GAAAxN,IAEAkqB,EAAAhxB,KAAA8G,GAIApG,KAAAkT,OAAAod,IAGA0M,aAAA,SAAA5pB,EAAAhN,GAEApG,KAAAyN,OAAArH,IAGA82B,cAAA,SAAA9pB,EAAAlW,GAEA8C,KAAAo5B,UAAAl8B,IAGAkgC,YAAA,SAAAhqB,GAEApT,KAAA29B,QAGAL,cAAA,SAAAlqB,EAAA2qB,GAIA,IAAA,GAFAnqB,GAAA5T,KAAA4T,OAEA/W,EAAA,EAAAA,EAAAkhC,EAAAhhC,OAAAF,IACA,CACA,GAAAuJ,GAAA23B,EAAAlhC,EAEA+W,GAAAxN,GAEApG,KAAA44B,IAAAxyB,GAAA,GAIApG,KAAAyN,OAAArH,GAAA,GAIApG,KAAAgtB,QAGAwQ,cAAA,SAAApqB,GAEApT,KAAAyF,SAGA2O,MAAA,WAEA,MAAA,IAAApU,MAAArB,YAAAqB,KAAAwI,KAAAxI,KAAA4T,SAGAW,WAAA,WAEA,MAAA,IAAAvU,MAAArB,YAAAqB,KAAAwI,KAAAxI,KAAA4T,ShDnJAT,IAAArI,QAEAumB,OAAA,SACAna,QAAA,UAGAtY,EAAAxC,MAAA+W,IAGA6qB,YAAA,SAAA3qB,GAEArT,KAAAqT,SAAAA,EACArT,KAAAwT,iBAGAyqB,aAAA,SAAA3qB,GAEAtT,KAAAA,QAAAsT,IAGAI,cAAA,SAAAN,GAEAA,IAAApT,KAAAoT,aAEApT,KAAAoT,YAEApT,KAAAy9B,aAGAz9B,KAAAoT,WAAAA,EACApT,KAAA09B,UACA19B,KAAAwT,eAAA,KAIAkqB,QAAA,WAEA19B,KAAAoT,WAAAtP,GAAAtG,GAAAsN,OAAAoM,QAAAlX,KAAAuT,YAGAkqB,WAAA,WAEAz9B,KAAAoT,WAAArP,IAAAvG,GAAAsN,OAAAoM,QAAAlX,KAAAuT,YAGA2qB,OAAA,SAAA5qB,GAEA,GAAA6qB,GAAArgC,KAAA87B,IAAA,EAAA97B,KAAA47B,IAAApmB,EAAAtT,KAAAyT,UAAA,GAEA0qB,KAAAn+B,KAAAsT,YAEAtT,KAAAsT,UAAA6qB,EACAn+B,KAAAwN,SACAxN,KAAA8F,QAAAqN,GAAArI,OAAAumB,QAAArxB,SAIAo+B,KAAA,WAEAp+B,KAAAA,QAAAA,KAAAsT,UAAA,IAGA+qB,KAAA,WAEAr+B,KAAAA,QAAAA,KAAAsT,UAAA,IAGAgrB,KAAA,SAAAx2B,GAEA9H,KAAAA,QAAA8H,IAGA3F,MAAA,WAEAnC,KAAAA,QAAA,IAGA8b,KAAA,WAEA9b,KAAAA,QAAAA,KAAAyT,UAAA,IAGAD,cAAA,SAAA+qB,GAEA,GAAAzhC,GAAAkD,KAAAoT,WAAArW,OACA0W,EAAA3V,KAAA0gC,KAAA1hC,EAAAkD,KAAAqT,UACAC,EAAAxV,KAAA87B,IAAA,EAAA97B,KAAA47B,IAAA15B,KAAAsT,UAAAG,EAAA,IACAxU,EAAAs/B,GAAAv+B,KAAAsT,YAAAA,GAAAtT,KAAAjD,SAAAiD,KAAAqT,SACAorB,EAAAx/B,GAAAe,KAAAyT,YAAAA,CAEAzT,MAAAsT,UAAAA,EACAtT,KAAAyT,UAAAA,EAEAxU,GAEAe,KAAAwN,SAEAixB,GAEAz+B,KAAA8F,QAAAqN,GAAArI,OAAAumB,QAAArxB,QAIAwN,OAAA,WAEA,GAAA0T,GAAAlhB,KAAAoT,WACAtW,EAAAokB,EAAAnkB,OACAgiB,EAAA/e,KAAAsT,UAAAtT,KAAAqT,SACA2L,EAAAlhB,KAAA47B,IAAA3a,EAAA/e,KAAAqT,SAAAvW,GACAC,EAAAiiB,EAAAD,CAEA/e,MAAAjD,OAAA,CAEA,KAAA,GAAAF,GAAA,EAAAE,EAAAF,EAAAA,IAEAmD,KAAAV,KAAA4hB,EAAAnC,OAIA2f,KAAA,SAAAC,GAWA,IATA,GAAAzd,GAAAlhB,KAAAoT,WACAwrB,EAAA1d,EAAAnkB,OACA0W,EAAAkrB,GAAA,EACAE,EAAA7+B,KAAAsT,UAAAtT,KAAAqT,SACA0L,EAAA8f,EAAA7+B,KAAAjD,OACAw8B,EAAAv5B,KAAAqT,SAAAI,EACAqrB,EAAA/f,EAAAwa,EACAwF,EAAAjhC,KAAA47B,IAAAkF,EAAAE,GAEAC,EAAAhgB,GAEA/e,KAAAV,KAAA4hB,EAAAnC,OAIA9iB,QAAA,WAEA,MAAA+D,MAAA1C,WAKAgH,EAAA6O,GAAA9V,WACAqG,EAAAyP,GAAA9V,UAAA,SAAA8V,GAAArI,OAAAoM,SClHAtY,EAAApB,GAAAmW,IAWA7S,KAAA47B,GAAA57B,KAiBAgQ,KAAA4rB,GAAA5rB,KAmBA8sB,UAAAlB,GAAAkB,UAUAF,QAAAhB,GAAAgB,QAUAD,WAAAf,GAAAe,WAcAE,KAAAjB,GAAAiB,KAUAvpB,MAAAsoB,GAAAtoB,MAUAG,WAAAmoB,GAAAnoB,aC7GA3V,EAAApB,GAAAqR,IAqBAiC,KAAA,SAAA9F,EAAA4D,EAAAiF,GAOA,MALA7T,MAAAqX,IAAA,GAAArE,IACAhT,KAAAqX,IAAAna,OAAA8C,KACAA,KAAAgL,SAAAA,EACAhL,KAAAqV,MAAAzG,EAAAiF,GAEA7T,MAMAgtB,KAAA,SAAAtwB,EAAAsT,GAEA,GAAArT,GAAAD,EAAAsF,EAAAtF,EAAAsT,GAAAhQ,KAAAtD,UASA,OAPAsB,GAAArB,EAAAqD,QAEAA,KAAAqX,IAAA2V,KAAArwB,GAEAqD,KAAA8F,QAAAtI,GAAAsN,OAAAmtB,MAAAj4B,QAGAA,MAcAqU,kBAAA,SAAAG,GAEA,MAAAxU,MAAAgL,SAAAqJ,kBAAAG,IAmBAF,WAAA,SAAAE,EAAAX,GAEA,MAAA7T,MAAAgL,SAAAsJ,WAAAE,EAAAX,IAuBAyc,SAAA,SAAAmI,EAAAC,EAAAC,GAEA,GAAA/kB,GAAApJ,GAAAiuB,EAAAC,EAAAC,EAEA,OAAA,IAAA7kB,IAAA9T,KAAA4T,IAQAyjB,SAAA,SAAAzoB,EAAAwI,GAIA,IAAA,GAFA7X,GAAA6X,GAAApX,KAAAuU,aAEA1X,EAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAI,GAAA+C,KAAAnD,GACA4R,EAAAxR,EAAAuU,OACAnK,GAAA,CAEA,IAAAuH,YAAAC,IAEAxH,EAAAuH,EAAA0f,IAAA7f,OAIA,KAAA,GAAA/Q,GAAA,EAAAA,EAAAkR,EAAA7R,SAAAsK,EAAA3J,IACA,CACA,GAAAmvB,GAAA7sB,KAAAqU,kBAAAzF,EAAAlR,GAEA2J,GAAAoH,IAAAoe,EAIAxlB,GAEA9H,EAAAD,KAAArC,GAIA,MAAAsC,IAMAs5B,UAAA,SAAAjqB,EAAAwI,GAIA,IAAA,GAFA7X,GAAA6X,GAAApX,KAAAuU,aAEA1X,EAAA,EAAAA,EAAA+R,EAAA7R,OAAAF,IACA,CACA,GAAAI,GAAA2R,EAAA/R,GACA4R,EAAAzO,KAAAqU,kBAAApX,EAEA+C,MAAAsuB,IAAA7f,IAEAlP,EAAAD,KAAArC,GAIA,MAAAsC,IAMAu5B,WAAA,SAAAlqB,EAAAwI,GAIA,IAAA,GAFA7X,GAAA6X,GAAApX,KAAAuU,aAEA1X,EAAA,EAAAA,EAAA+R,EAAA7R,OAAAF,IACA,CACA,GAAAI,GAAA2R,EAAA/R,GACA4R,EAAAzO,KAAAqU,kBAAApX,EAEA+C,MAAAsuB,IAAA7f,IAEAlP,EAAAD,KAAArC,GAIA,MAAAsC,IAMAkG,MAAA,WAEA,MAAAzF,MAAAqX,IAAAhC,SAmBAA,MAAA,SAAAzG,EAAAiF,GAEA,GAAAwD,GAAArX,KAAAqX,GAIA,IAFAA,EAAAhC,QAEAjY,EAAAwR,GAEA,IAAA,GAAA/R,GAAA,EAAAA,EAAA+R,EAAA7R,OAAAF,IACA,CACA,GAAAsK,GAAAyH,EAAA/R,GACA0F,EAAAvC,KAAAsU,WAAAnN,EAAA0M,EAEAtR,IAEA8U,EAAA2R,IAAAzmB,EAAAiP,OAAAjP,OAIA,IAAAnE,EAAAwQ,GACA,CACA,GAAArM,GAAAvC,KAAAsU,WAAA1F,EAAAiF,EAEAtR,IAEA8U,EAAA2R,IAAAzmB,EAAAiP,OAAAjP,GAOA,MAHAvC,MAAA8F,QAAAtI,GAAAsN,OAAAutB,OAAAr4B,OACAA,KAAAgtB,OAEAhtB,MAcAsuB,IAAA,SAAA7f,GAEA,MAAAzO,MAAAqX,IAAAiX,IAAA7f,IAcA9D,IAAA,SAAA8D,GAEA,MAAAzO,MAAAqX,IAAA1M,IAAA8D,IAoBAua,IAAA,SAAAva,EAAAtH,EAAA4xB,GAEA/4B,KAAAqX,IAAA2R,IAAAva,EAAAtH,GACAnH,KAAA8F,QAAAtI,GAAAsN,OAAAitB,KAAA/3B,KAAAmH,IAEA4xB,GAEA/4B,KAAAgtB,QAyBA4L,IAAA,SAAApkB,EAAAukB,EAAAllB,GAEA,GAAA1M,GAAAnH,KAAAsU,WAAAE,EAAAX,EAUA,OARA7T,MAAAqX,IAAA2R,IAAA7hB,EAAAqK,OAAArK,GACAnH,KAAA8F,QAAAtI,GAAAsN,OAAAitB,KAAA/3B,KAAAmH,IAEA4xB,GAEA/4B,KAAAgtB,OAGAhtB,MAgBAV,KAAA,WAIA,IAAA,GAFApC,GAAAC,UAEAN,EAAA,EAAAA,EAAAK,EAAAH,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAsU,WAAApX,EAAAL,GAEAmD,MAAAqX,IAAA2R,IAAA7hB,EAAAqK,OAAArK,GAMA,MAHAnH,MAAA8F,QAAAtI,GAAAsN,OAAAktB,MAAAh4B,KAAAsO,GAAAhR,MAAA2B,MAAA/B,KACA8C,KAAAgtB,OAEAhtB,KAAAjD,QAcA2R,QAAA,WAEA,MAAA1O,MAAAV,KAAAL,MAAAe,KAAA7C,YAwBA+V,OAAA,SAAAtE,EAAAmqB,EAAAllB,GAEA,GAAAzW,EAAAwR,GACA,CACA,IAAA,GAAA/R,GAAA,EAAAA,EAAA+R,EAAA7R,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAsU,WAAA1F,EAAA/R,GAAAgX,EAEA7T,MAAAqX,IAAA2R,IAAA7hB,EAAAqK,OAAArK,GAGAnH,KAAA8F,QAAAtI,GAAAsN,OAAAktB,MAAAh4B,KAAA4O,IAEAmqB,GAEA/4B,KAAAgtB,SAcAgM,SAAA,SAAAn8B,EAAAuJ,EAAA2yB,GAEA,MAAA/4B,MAAA44B,IAAAxyB,EAAA2yB,IAkBAhd,IAAA,SAAAgd,GAEA,GAAAl8B,GAAAmD,KAAAjD,OAAA,EACAk8B,EAAAj5B,KAAAnD,EAUA,OARAmD,MAAAqX,IAAA6f,SAAAr6B,GACAmD,KAAA8F,QAAAtI,GAAAsN,OAAAotB,QAAAl4B,KAAAi5B,EAAAp8B,IAEAk8B,GAEA/4B,KAAAgtB,OAGAiM,GAuBA3b,MAAA,SAAAyb,GAEA,GAAAE,GAAAj5B,KAAA,EAUA,OARAA,MAAAqX,IAAA6f,SAAA,GACAl3B,KAAA8F,QAAAtI,GAAAsN,OAAAotB,QAAAl4B,KAAAi5B,EAAA,IAEAF,GAEA/4B,KAAAgtB,OAGAiM,GAoBA/B,SAAA,SAAAr6B,EAAAk8B,GAEA,GAAAG,EAeA,OAbAr8B,IAAA,GAAAA,EAAAmD,KAAAjD,SAEAm8B,EAAAl5B,KAAAnD,GAEAmD,KAAAqX,IAAA6f,SAAAr6B,GACAmD,KAAA8F,QAAAtI,GAAAsN,OAAAotB,QAAAl4B,KAAAk5B,EAAAr8B,IAEAk8B,GAEA/4B,KAAAgtB,QAIAkM,GAuBAzrB,OAAA,SAAA+G,EAAAukB,GAEA,GAAAtqB,GAAAzO,KAAAqU,kBAAAG,GACA0kB,EAAAl5B,KAAAqX,IAAA1M,IAAA8D,EAaA,OAXAyqB,KAEAl5B,KAAAqX,IAAA5J,OAAAgB,GACAzO,KAAA8F,QAAAtI,GAAAsN,OAAAotB,QAAAl4B,KAAAk5B,EAAA1kB,IAEAukB,GAEA/4B,KAAAgtB,QAIAkM,GAoBAE,UAAA,SAAA4F,EAAAjG,GAKA,IAAA,GAHA1hB,GAAArX,KAAAqX,IACA4hB,KAEAp8B,EAAA,EAAAA,EAAAmiC,EAAAjiC,OAAAF,IACA,CACA,GAAA4R,GAAAzO,KAAAqU,kBAAA2qB,EAAAniC,IACAq8B,EAAA7hB,EAAA1M,IAAA8D,EAEAyqB,KAEA7hB,EAAA5J,OAAAgB,GACAwqB,EAAA35B,KAAA45B,IAWA,MAPAl5B,MAAA8F,QAAAtI,GAAAsN,OAAAqtB,SAAAn4B,KAAAi5B,IAEAF,GAEA/4B,KAAAgtB,OAGAiM,GAcAz8B,QAAA,SAAAgY,GAEA,GAAA/F,GAAAzO,KAAAqU,kBAAAG,GACAyiB,EAAAj3B,KAAAqX,IAAApE,QAAAxE,EAEA,OAAAwoB,KAAAj7B,EAAA,GAAAi7B,GAYAgI,QAAA,WAEAj/B,KAAAqX,IAAAmgB,gBAWA7oB,KAAA,WAEA,MAAA3O,MAAAqX,IAAA1I,MAYA/Q,QAAA,WAMA,MAJAoC,MAAAqX,IAAAzZ,UAEAoC,KAAA8F,QAAAtI,GAAAsN,OAAAstB,SAAAp4B,OAEAA,MA6BAkF,OAAA,SAAA6Z,EAAAua,GAIA,IAAA,GAFAC,GAAAjrB,GAAAhR,MAAAC,KAAAJ,UAAA,GACA+hC,GAAAngB,EAAAua,GACAz8B,EAAA,EAAAA,EAAA08B,EAAAx8B,OAAAF,IAEAqiC,EAAA5/B,KAAAU,KAAAqU,kBAAAklB,EAAA18B,IAGA,IAAAo8B,GAAA3qB,GAAApJ,OAAAjG,MAAAe,KAAA7C,UAgBA,OAdAmR,IAAApJ,OAAAjG,MAAAe,KAAAqX,IAAA1I,KAAAuwB,GAEA5F,GAEAt5B,KAAA8F,QAAAtI,GAAAsN,OAAAqtB,SAAAn4B,KAAAi5B,IAGAM,EAAAx8B,QAEAiD,KAAA8F,QAAAtI,GAAAsN,OAAAktB,MAAAh4B,KAAAu5B,IAGAv5B,KAAAgtB,OAEAiM,GA4BAI,YAAA,SAAA8F,EAAA1G,EAAAC,EAAAC,EAAAvhB,EAAA2hB,GAEA,GAAAtuB,GAAAD,GAAAiuB,EAAAC,EAAAC,GACAM,EAAA7hB,GAAApX,KAAAuU,YA+BA,OA7BAtG,IAAA,WAEA,IAAA,GAAApR,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,GACA4R,EAAAtH,EAAAqK,MAEA/G,GAAAtD,KAEAnH,KAAAqX,IAAA5J,OAAAgB,GACAwqB,EAAA35B,KAAA6H,GACAtK,IAEAsiC,GAEAh4B,EAAA4tB,aAKA/0B,MAEAA,KAAA8F,QAAAtI,GAAAsN,OAAAqtB,SAAAn4B,KAAAi5B,IAEAF,GAEA/4B,KAAAgtB,OAGAiM,GAyBAzrB,OAAA,SAAAjG,EAAAnB,EAAAyN,EAAAurB,GAqBA,MAnBAnxB,IAAA,WAEA,IAAA,GAAApR,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,EAEAsK,GAAA+kB,KAAA3kB,EAAAnB,EAAAyN,GAEAurB,GAEAj4B,EAAAoR,UAIAvY,MAEAA,KAAA8F,QAAAtI,GAAAsN,OAAAstB,SAAAp4B,KAAAA,OACAA,KAAAgtB,OAEAhtB,MA2BAq/B,YAAA,SAAA50B,EAAAlD,EAAAnB,EAAAyN,EAAAurB,GAEA,GAAArS,KA0BA,OAxBA9e,IAAA,WAEA,IAAA,GAAApR,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IACA,CACA,GAAAsK,GAAAnH,KAAAnD,EAEA4N,GAAAtD,KAEAA,EAAA+kB,KAAA3kB,EAAAnB,EAAAyN,GAEAurB,GAEAj4B,EAAAoR,QAGAwU,EAAAztB,KAAA6H,MAIAnH,MAEAA,KAAA8F,QAAAtI,GAAAsN,OAAAstB,SAAAp4B,KAAA+sB,IACA/sB,KAAAgtB,OAEAD,GAuBAuS,UAAA,SAAAl4B,EAAA9F,EAAA8E,EAAAjD,GAEA,QAAAo8B,GAAAp4B,GAEAA,EAAAuuB,MAAAtuB,GAGA,MAAApH,MAAAg7B,UAAAuE,EAAAj+B,EAAA8E,EAAAjD,IAwBAq8B,SAAA,SAAA3J,EAAAv0B,EAAA8E,EAAAjD,GAEA,QAAAs8B,GAAAt4B,GAEAA,EAAAyuB,KAAAC,GAGA,MAAA71B,MAAAg7B,UAAAyE,EAAAn+B,EAAA8E,EAAAjD,IAoBAu8B,aAAA,SAAAp+B,EAAA8E,EAAAjD,GAEA,QAAAw8B,GAAAx4B,GAEAA,EAAA2uB,WAGA,MAAA91B,MAAAg7B,UAAA2E,EAAAr+B,EAAA8E,EAAAjD,IAuBAy8B,YAAA,SAAAvqB,EAAA/T,EAAA8E,EAAAjD,GAEA,QAAA08B,GAAA14B,GAEAA,EAAA+tB,QAAA7f,GASA,MANApH,IAAA,WAEAjO,KAAAg7B,UAAA6E,EAAAv+B,EAAA8E,EAAAjD,IAEAnD,MAEAA,MAoBA8/B,aAAA,SAAAx+B,EAAA8E,EAAAjD,GAEA,QAAA48B,GAAA54B,GAEAA,EAAAglB,WASA,MANAle,IAAA,WAEAjO,KAAAg7B,UAAA+E,EAAAz+B,EAAA8E,EAAAjD,IAEAnD,MAEAA,MAuBAsK,UAAA,SAAAhJ,EAAA8E,EAAAjD,EAAAoE,GAEA,QAAAy4B,GAAA74B,GAEAA,EAAAoR,MAAAhR,GASA,MANA0G,IAAA,WAEAjO,KAAAg7B,UAAAgF,EAAA1+B,EAAA8E,EAAAjD,IAEAnD,MAEAA,MAkBAoU,MAAA,SAAA6rB,EAAAC,GAEA,GAAAhf,GAAAlhB,IAEA,IAAAigC,EACA,CACA/e,IAEA,KAAA,GAAArkB,GAAA,EAAAA,EAAAmD,KAAAjD,OAAAF,IAEAqkB,EAAArkB,GAAAmD,KAAAnD,GAAAs4B,OAAA+K,GAIA,MAAA,IAAArxB,IAAA7O,KAAAgL,SAAAkW,GAAA,IAWA3M,WAAA,WAEA,MAAA,IAAA1F,IAAA7O,KAAAgL,aCtnCApM,EAAAiQ,GAAAiF,IAWAhT,KAAA,WAEA47B,GAAA57B,KAAA7B,MAAAe,MAEAA,KAAAmgC,eAAAr/B,EAAAd,KAAAA,KAAAogC,oBAkBAtvB,KAAA,SAAAtI,EAAAoL,GAaA,MAXA5T,MAAAwI,MAEAxI,KAAAwI,KAAAwC,SAAAjH,IAAA3D,GAAA0K,OAAA2f,aAAAzqB,KAAAmgC,gBAGAtxB,GAAAxR,UAAAyT,KAAAvT,KAAAyC,KAAAwI,EAAAwC,UAEA0xB,GAAA5rB,KAAAvT,KAAAyC,KAAAwI,EAAAoL,GAEApL,EAAAwC,SAAAlH,GAAA1D,GAAA0K,OAAA2f,aAAAzqB,KAAAmgC,gBAEAngC,MAoBA49B,UAAAlB,GAAAkB,UAUAF,QAAAhB,GAAAgB,QAUAD,WAAAf,GAAAe,WAcAE,KAAAjB,GAAAiB,KAKAyC,kBAAA,SAAAj5B,GAEA,GAAAE,GAAArH,KAAAsuB,IAAAnnB,EAAAqK,QACAssB,EAAA99B,KAAA4T,OAAAzM,EAEAE,KAAAy2B,GAEA99B,KAAAyN,OAAAtG,IAEAE,GAAAy2B,GAEA99B,KAAA44B,IAAAzxB,IAYAiN,MAAAsoB,GAAAtoB,MAUAG,WAAAmoB,GAAAnoB,aC9IA3V,EAAAiQ,GAAAkF,IAkBA0C,IAAA,SAAAjC,GAIA,MAFAxU,MAAAgU,QAAAyC,IAAAzW,KAAAmH,MAAAqN,GAEAxU,MAcAq0B,OAAA,SAAA7f,GAIA,MAFAxU,MAAAgU,QAAAqgB,OAAAr0B,KAAAmH,MAAAqN,GAEAxU,MAeAw0B,SAAA,SAAAhgB,GAIA,MAFAxU,MAAAgU,QAAAwgB,SAAAx0B,KAAAmH,MAAAqN,GAEAxU,MAaA20B,UAAA,SAAAngB,GAEA,MAAAxU,MAAAgU,QAAA2gB,UAAA30B,KAAAmH,MAAAqN,IAWAJ,MAAA,WAEA,MAAA,IAAAL,IAAA/T,KAAAgL,SAAAhL,KAAAmH,MAAAnH,KAAAgU,QAAAhU,MAAA,IAWAuU,WAAA,WAEA,MAAA,IAAAR,IAAA/T,KAAAgL,SAAAhL,KAAAmH,MAAAnH,KAAAgU,YEtHAU,GAAAlG,YAIA9P,EAAAgW,GAAArX,WAGAgjC,aAAA,WAEA,MAAA3rB,IAAAlG,UAGAoG,MAAA,SAAA5J,EAAA2C,EAAA1H,EAAAsB,EAAAoN,GAEA3O,EAAAhG,KAAAiG,EAAAjG,KAAAqgC,gBAAA,GAEArgC,KAAAsgC,SAAA,EACAtgC,KAAA+R,IAAA/G,EACAhL,KAAAugC,KAAA5yB,EACA3N,KAAAwgC,SAAA,GAAA3xB,IAAA7D,GACAhL,KAAAygC,SAAAjxB,GAAA9D,QAAA1L,MAEA5B,EAAAmJ,IAEAvH,KAAAksB,KAAA3kB,GAGAoN,GAEA3U,KAAA0gC,QAIAxU,KAAA,SAAA3kB,GAEA,MAAArI,GAAAqI,EAAAvH,OAGA0gC,KAAA,WAEA,GAAAnzB,GAAAvN,KAAA2gC,UACAp1B,EAAAzK,EAAAd,KAAAA,KAAA4gC,gBACAxzB,EAAAtM,EAAAd,KAAAA,KAAA6gC,eAUA,OARA5yB,IAAA,WAEAjO,KAAAk1B,UACAl1B,KAAAygC,SAAA,GAAAjxB,IACAxP,KAAA+R,IAAA/E,KAAAU,MAAA1N,KAAAugC,KAAAhzB,EAAAhC,EAAA6B,IAEApN,MAEAA,KAAAygC,UAGAG,eAAA,SAAA/uB,GAEA,GAAA7R,KAAAygC,SAAAK,YAAA,CAKA,GAAAlyB,GAAA5O,KAAA4zB,QAAA30B,MAAAe,KAAA7C,UAEA6C,MAAAsgC,QAEAtgC,KAAAwgC,SAAAttB,OAAAtE,GAAA,GAAA,GAIA5O,KAAAwgC,SAAAnrB,MAAAzG,GAAA,GAGA5O,KAAAygC,SAAA/0B,QAAA1L,KAAA6R,EAAA7R,KAAAwgC,YAGAK,eAAA,SAAAhvB,EAAAe,GAEA,GAAA5S,KAAAygC,SAAAK,YAAA,CAKA,GAAAC,GAAA,IAAAnuB,CAEAmuB,KAEAh6B,GAAAojB,qBAEA4W,GAAAh6B,GAAAuiB,QAGAyX,EAEA/gC,KAAAygC,SAAA3tB,OAAA9S,KAAA6R,EAAAe,GAIA5S,KAAAygC,SAAA5tB,OAAA7S,KAAA6R,EAAAe,KAIAsiB,QAAA,WAEAl1B,KAAAygC,SAAAvrB,UAGAyrB,QAAA,WAEA,MAAA14B,GAAAtG,EAAA3B,QAGA4zB,QAAA,SAAAhlB,GAEA,MAAAA,IAGA4C,KAAA,WAEA,MAAA,MCxGAqD,GAAArG,UAEAwyB,UAAA,GACAC,WAAA,EACA3G,MAAA,GAGAj8B,EAAAqW,GAAAG,IAGAwrB,aAAA,WAEA,MAAAxrB,IAAArG,UAGA0yB,MAAA,SAAAjK,EAAAkK,GAEA,GAAA7tB,GAAAtT,KAAAohC,gBACA3tB,EAAAzT,KAAAqhC,gBACAC,EAAAxjC,KAAA87B,IAAA,EAAA97B,KAAA47B,IAAAzC,EAAAxjB,EAAA,GAaA,OAXAH,KAAAguB,IAEAthC,KAAAuhC,cAAAD,GAEAH,IAEAnhC,KAAAsgC,SAAA,EACAtgC,KAAA0gC,SAIA1gC,KAAAygC,UAGAe,MAAA,WAEA,GAAApD,GAAAp+B,KAAAohC,gBAAA,CAUA,OARAhD,GAAAp+B,KAAAqhC,kBAEArhC,KAAAuhC,cAAAnD,GACAp+B,KAAAsgC,SAAA,EACAtgC,KAAA0gC,OACA1gC,KAAAygC,SAAArQ,SAAApwB,KAAAyhC,WAAAzhC,OAGAA,KAAAygC,UAGAgB,WAAA,WAEAzhC,KAAAsgC,SAAA,GAGAoB,OAAA,SAAAP,GAEA,MAAAnhC,MAAAkhC,MAAA,EAAAC,IAGAQ,MAAA,SAAAR,GAEA,MAAAnhC,MAAAkhC,MAAAlhC,KAAAqhC,gBAAA,EAAAF,IAGAS,MAAA,SAAAT,GAEA,MAAAnhC,MAAAkhC,MAAAlhC,KAAAohC,gBAAA,EAAAD,IAGAU,MAAA,SAAAV,GAEA,MAAAnhC,MAAAkhC,MAAAlhC,KAAAohC,gBAAA,EAAAD,IAGAvN,QAAA,SAAA/hB,GAMA,MAJA7R,MAAA8hC,gBAAAjwB,GACA7R,KAAA+hC,iBAAAlwB,GACA7R,KAAAgiC,aAAAnwB,GAEA7R,KAAAiiC,eAAApwB,IAGAowB,eAAA,SAAApwB,GAEA,MAAAA,GAAAhH,SAGAi3B,gBAAA,SAAAjwB,GAEAvR,EAAAuR,EAAAmvB,aAEAhhC,KAAAghC,UAAAnvB,EAAAmvB,YAIAkB,aAAA,SAAAlB,GAEAhhC,KAAAghC,UAAAA,GAGAmB,aAAA,WAEA,MAAAniC,MAAAghC,WAGAe,iBAAA,SAAAlwB,GAEAvR,EAAAuR,EAAAovB,cAEAjhC,KAAAihC,WAAApvB,EAAAovB,aAIAM,cAAA,SAAAN;AAEAjhC,KAAAihC,WAAAA,GAAA,GAGAG,cAAA,WAEA,MAAAphC,MAAAihC,YAGAmB,eAAA,WAEA,MAAApiC,MAAAihC,WAAAjhC,KAAAghC,WAGAgB,aAAA,SAAAnwB,GAEAvR,EAAAuR,EAAAyoB,SAEAt6B,KAAAs6B,MAAAzoB,EAAAyoB,QAIA+H,UAAA,SAAA/H,GAEAt6B,KAAAs6B,MAAAA,GAAA,GAGAgI,UAAA,WAEA,MAAAtiC,MAAAs6B,OAGA+G,cAAA,WAEA,MAAAvjC,MAAA0gC,KAAAx+B,KAAAsiC,YAAAtiC,KAAAmiC,mBC3KA3yB,GAAAwF,QAEAC,QAAA,UACAstB,QAAA,UACAC,QAAA,UACAliB,QAAA,UACAmiB,SAAA,YAGAjzB,GAAA1E,QAEAy3B,QAAA,UACAC,QAAA,UACAliB,QAAA,UACAmiB,SAAA,WACAC,aAAA,2BACAC,SAAA,oCAGAnzB,GAAArC,IAAA,SAAAy1B,GAOA,QAAAC,KAEAh4B,EAAAvL,KAAAgP,GAAAhR,MAAA2B,MAAA9B,cAEA2lC,IAAAC,GAEA51B,EAAAzB,QAAAb,GAIA,IAAA,GAfAsC,GAAA,GAAAqC,IACAszB,EAAA,EACAC,EAAAH,EAAA7lC,OACA8N,KAYAhO,EAAA,EAAAA,EAAA+lC,EAAA7lC,OAAAF,IACA,CACA,GAAA2G,GAAAo/B,EAAA/lC,EAEA2G,aAAAgM,IAEAhM,EAAAw/B,KAAAH,EAAA11B,EAAA0F,OAAA1F,EAAA2F,OAAA3F,EAAA+H,OAAA/H,GAIA41B,IAIA,MAAA51B,IAGAqC,GAAAyzB,KAAA,SAAAL,GAIA,IAAA,GAFAK,GAAA,GAAAzzB,IAEA3S,EAAA,EAAAA,EAAA+lC,EAAA7lC,OAAAF,IACA,CACA,GAAA2G,GAAAo/B,EAAA/lC,EAEA2G,aAAAgM,KAEAhM,EAAAw/B,KAAAC,EAAAv3B,QAAAu3B,EAAApwB,OAAAowB,EAAAnwB,OAAAmwB,EAAA/tB,OAAA+tB,GAIA,MAAAA,IAGAzzB,GAAAqD,OAAA,SAAAqwB,GAEA,GAAA1/B,GAAA,GAAAgM,GAEA,OADAhM,GAAAqP,OAAA5T,MAAAuE,EAAArG,WACAqG,GAGAgM,GAAA9D,QAAA,WAEA,GAAAlI,GAAA,GAAAgM,GAEA,OADAhM,GAAAkI,QAAAzM,MAAAuE,EAAArG,WACAqG,GAGAgM,GAAAsD,OAAA,SAAAowB,GAEA,GAAA1/B,GAAA,GAAAgM,GAEA,OADAhM,GAAAsP,OAAA7T,MAAAuE,EAAArG,WACAqG,GAGAgM,GAAA0F,OAAA,WAEA,GAAA1R,GAAA,GAAAgM,GAEA,OADAhM,GAAA0R,OAAAjW,MAAAuE,EAAArG,WACAqG,GAGAgM,GAAAslB,YAAA,WAQA,QAAA+N,OAEAM,IAAAC,GAEAtO,EAAAppB,QAAA23B,GAIA,QAAAC,GAAA54B,GAEA04B,IACA14B,EAAAs4B,KAAAH,EAAA/N,EAAAjiB,OAAAiiB,EAAAhiB,OAAA,KAAAgiB,GAjBA,GAAAA,GAAA,KACAuO,EAAA,KACAE,GAAA,EACAH,EAAA,EACAD,EAAA,CAgBA,OAAA,UAAAz4B,EAAA3J,EAAAiD,GAEA,GAAAu/B,EA+BAD,EAAA54B,GAEA1G,EAAAzG,KAAAwD,EAAA+zB,OAhCA,CACAyO,GAAA,EACAzO,EAAA,GAAAtlB,IAAA,MAAA,GACA6zB,EAAAtiC,EACAqiC,EAAA,EACAD,EAAA,EAEAG,EAAA54B,EAEA,KAEA1G,EAAAzG,KAAAwD,EAAA+zB,GAEA,MAAA/uB,GAQA,KALAhK,GAAAynC,SAAAznC,EAAAynC,QAAAC,KAEA1nC,EAAAynC,QAAAC,IAAA19B,GAGAA,EAEA,QAEAw9B,GAAA,GAUA,MAAAzO,OAKAp2B,EAAA8Q,GAAAnS,WAEAqO,QAAA,WAEA1L,KAAA0jC,OAAAl0B,GAAAwF,OAAAutB,QAAA/yB,GAAA1E,OAAAy3B,QAAAplC,YAGA0V,OAAA,WAEA7S,KAAA0jC,OAAAl0B,GAAAwF,OAAAwtB,QAAAhzB,GAAA1E,OAAA03B,QAAArlC,YAGA2V,OAAA,WAEA9S,KAAA0jC,OAAAl0B,GAAAwF,OAAAsL,QAAA9Q,GAAA1E,OAAAwV,QAAAnjB,YAGA+X,OAAA,WAEAlV,KAAA+U,YAEA/U,KAAA0jC,OAAAl0B,GAAAwF,OAAAytB,SAAAjzB,GAAA1E,OAAA23B,SAAAtlC,YAIA6lC,KAAA,SAAAz3B,EAAA6B,EAAA2zB,EAAA4C,EAAA5iC,EAAA4qB,GAOA,MALA3rB,MAAAuL,QAAAA,EAAAxK,EAAA4qB,GACA3rB,KAAAoN,QAAAA,EAAArM,EAAA4qB,GACA3rB,KAAA+gC,QAAAA,EAAAhgC,EAAA4qB,GACA3rB,KAAA2jC,SAAAA,EAAA5iC,EAAA4qB,GAEA3rB,MAGAqV,MAAA,SAAAuuB,GASA,MAPA5jC,MAAA4S,OAAApD,GAAAwF,OAAAC,QAEA2uB,GAEA5jC,KAAA+D,MAGA/D,MAGA0jC,OAAA,SAAA9wB,EAAAhP,EAAAiH,GAEA7K,KAAA4S,SAAApD,GAAAwF,OAAAC,UAEAjV,KAAA6K,QAAAyD,GAAAhR,MAAA2B,MAAA4L,GACA7K,KAAA4S,OAAAA,EACA5S,KAAA8F,QAAAlC,EAAAiH,KAIAg5B,UAAA,SAAAC,EAAAlgC,EAAAI,EAAAjD,EAAA4qB,GAqBA,MAnBAzrB,GAAA8D,KAEAhE,KAAA4S,SAAApD,GAAAwF,OAAAC,QAEA0W,EAEA3rB,KAAA8D,GAAAF,EAAAI,EAAAjD,GAIAf,KAAA8E,KAAAlB,EAAAI,EAAAjD,GAGA+iC,GAEA9/B,EAAA/E,MAAA8B,GAAAf,KAAAA,KAAA6K,UAIA7K,MAGAuL,QAAA,SAAAvH,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAA6jC,UAAA7jC,KAAA+jC,YAAAv0B,GAAA1E,OAAAy3B,QAAAv+B,EAAAjD,EAAA4qB,IAGAqY,aAAA,SAAAhgC,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAA6jC,UAAA7jC,KAAAikC,iBAAAz0B,GAAA1E,OAAA43B,aAAA1+B,EAAAjD,EAAA4qB,IAGAve,QAAA,SAAApJ,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAA6jC,UAAA7jC,KAAAkkC,YAAA10B,GAAA1E,OAAA03B,QAAAx+B,EAAAjD,EAAA4qB,IAGAwY,QAAA,SAAAngC,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAA6jC,UAAA7jC,KAAAkkC,YAAA10B,GAAA1E,OAAA03B,QAAAx+B,EAAAjD,EAAA4qB,IAGAoV,QAAA,SAAA/8B,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAA6jC,UAAA7jC,KAAAokC,YAAA50B,GAAA1E,OAAAwV,QAAAtc,EAAAjD,EAAA4qB,IAGAgY,SAAA,SAAA3/B,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAA6jC,UAAA7jC,KAAAqkC,aAAA70B,GAAA1E,OAAA23B,SAAAz+B,EAAAjD,EAAA4qB,IAGAyE,SAAA,SAAApsB,EAAAjD,EAAA4qB,GAEA,MAAA3rB,MAAA6jC,WAAA,EAAAr0B,GAAA1E,OAAA63B,SAAA3+B,EAAAjD,EAAA4qB,IAGAoY,UAAA,WAEA,MAAA/jC,MAAA4S,SAAApD,GAAAwF,OAAAutB,SAGA0B,eAAA,WAEA,MAAAjkC,MAAA4S,SAAApD,GAAAwF,OAAAutB,SAAAviC,KAAA4S,SAAApD,GAAAwF,OAAAC,SAGAivB,UAAA,WAEA,MAAAlkC,MAAA4S,SAAApD,GAAAwF,OAAAwtB,SAGA4B,UAAA,WAEA,MAAApkC,MAAA4S,SAAApD,GAAAwF,OAAAsL,SAGA+jB,WAAA,WAEA,MAAArkC,MAAA4S,SAAApD,GAAAwF,OAAAytB,UAGA3B,UAAA,WAEA,MAAA9gC,MAAA4S,SAAApD,GAAAwF,OAAAC,SAGArK,WAAA,WAEA,MAAA5K,MAAA4S,SAAApD,GAAAwF,OAAAC,WAKA3Q,EAAAkL,GAAAnS,WCzUAqB,EAAAyW,GAAA9X,WAEAgY,MAAA,SAAAlO,EAAA4E,GAEA/L,KAAAmH,MAAAA,EACAnH,KAAA+L,QAAAzL,EAAAyL,GAAAA,EAAAuG,GAAAsO,IACA5gB,KAAA+M,GAAA5F,EAAA4K,IACA/R,KAAAo+B,KAAA,KACAp+B,KAAAskC,UAAA,GAGAx4B,WAAA,SAAAC,GAEA,GAAAnF,GAAAmF,GAAA/L,KAAAukC,UACAC,EAAAxkC,KAAA+L,OAEA,OAAA,MAAAnF,EAAA49B,IAGAC,WAAA,SAAA79B,GAEA,GAAA49B,GAAAxkC,KAAA+L,OAEA,OAAA,MAAAnF,EAAA49B,IAGAxO,MAAA,SAAA1oB,GAEAtN,KAAAo+B,OAAA9wB,EAAAo3B,WAEA1kC,KAAAo+B,KAAApI,MAAA1oB,IAIAtN,KAAAo+B,KAAA9wB,EACAtN,KAAAmH,MAAA+mB,SAAA7tB,GAAAyK,OAAA6f,qBAIAga,QAAA,SAAA5O,GAEA,GAAA6O,IAAA5kC,KAAAo+B,IAOA,OALAwG,KAEA5kC,KAAAo+B,KAAA,GAAArI,GAAA/1B,KAAAmH,MAAAnH,KAAA+L,UAGA64B,GAGAC,WAAA,SAAA9O,GAEA,GAAA9oB,GAAA,GAAA8oB,GAAA/1B,KAAAmH,MAAAnH,KAAA+L,QAEAkB,GAAAmxB,KAAAp+B,KAAAo+B,KACAp+B,KAAAo+B,KAAAnxB,GAGAgpB,QAAA,WAEA,IAAAj2B,KAAA+M,GAAAqC,mBAEApP,KAAA+M,GAAAjH,QAAA1F,GAAA0K,OAAA6f,mBAGA3qB,KAAA+M,GAAAqC,oBAEApP,KAAA2U,IAAA3U,KAAA+M,GAAA/M,KAAAmH,QAGAwN,IAAA,SAAA5H,EAAA5F,GAEA,KAAA,iCAGAu8B,OAAA,WAwBA,MAtBA1jC,MAAAskC,WAEAtkC,KAAAskC,UAAA,GAEAtkC,KAAAmH,MAAA4rB,WAAA/yB,KAAAo+B,MAEAp+B,KAAAo+B,KAAAnI,UAIAj2B,KAAAmH,MAAA+mB,SAAA7tB,GAAAyK,OAAA8f,oBAGA5qB,KAAA+M,GAAAqC,oBAEA,IAAApP,KAAA+M,GAAAqC,oBAEApP,KAAA+M,GAAAgjB,kBACA/vB,KAAA+M,GAAAjH,QAAA1F,GAAA0K,OAAA8f,sBAIA5qB,MAGAuL,QAAA,WAEA,MAAAzK,GAAAd,KAAAA,KAAA6iC,gBAGAA,cAAA,WAEA7iC,KAAA8kC,UAAA7lC,MAAAe,KAAA7C,WACA6C,KAAA0jC,UAGAoB,UAAA,aAKA13B,QAAA,WAEA,MAAAtM,GAAAd,KAAAA,KAAA+kC,gBAGAA,cAAA,WAEA/kC,KAAAglC,UAAA/lC,MAAAe,KAAA7C,WACA6C,KAAA0jC,UAGAsB,UAAA,eClIA3mC,EAAA8W,GAAAC,IAGAmvB,UAAAjyB,GAAAS,MAEA2xB,YAAA,EAEA14B,KAAA,WAEA2I,IAAA,SAAA5H,EAAA5F,GAEAA,EAAAupB,cAEAvpB,EAAA+mB,SAAA7tB,GAAAyK,OAAAwnB,iBAAAnrB,IAEAnH,KAAA0jC,UAEA1jC,KAAA8L,cAAAiB,EAAAoe,QAAAtK,GAAAD,IAEA7T,EAAA4C,MAAAhF,IAAAxD,EAAAqK,OAAAxR,KAAAuL,UAAAvL,KAAAoN,YAIArG,GAAA4E,MAAA5E,GAAA6E,OAAAuY,kBAAAhd,GAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAAunB,UAAAlrB,IAEAnH,KAAA6kC,WAAAvvB,IACAtV,KAAA0jC,WAIAoB,UAAA,SAAAr2B,EAAAlB,GAEA,GAAApG,GAAAnH,KAAAmH,KAEA/I,GAAAmP,IAEApG,EAAA+kB,KAAA3e,GAGAxG,GAAA4E,MAAA5E,GAAA6E,OAAAwY,UAAAjd,EAAAoG,GAEApG,EAAA+mB,SAAA7tB,GAAAyK,OAAAunB,UAAAlrB,IAEAnH,KAAA8L,WAAAwG,GAAAC,QAAApL,EAAAupB,cAEA1wB,KAAA6kC,WAAAvvB,KAIA0vB,UAAA,SAAAj/B,GAEA,GAAAoB,GAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAAwY,UAAAjd,EAAApB,GAEAoB,EAAA+mB,SAAA7tB,GAAAyK,OAAAwnB,iBAAAnrB,IAEAnH,KAAA8L,WAAAwG,GAAAC,QAAApL,EAAAupB,cAEA1wB,KAAA6kC,WAAAvvB,OC7DAjX,EAAA8W,GAAAG,IAGAivB,UAAAjyB,GAAAC,KAEAmyB,YAAA,EAEA14B,KAAA,YAEA2I,IAAA,SAAA5H,EAAA5F,GAEAA,EAAAupB,cAEAvpB,EAAA+mB,SAAA7tB,GAAAyK,OAAA2nB,kBAAAtrB,IAEAnH,KAAA0jC,UAEA1jC,KAAA8L,aAEAmC,GAAA,WAEAlB,EAAAC,KAAArC,IAAAxD,EAAAnH,KAAAuL,UAAAvL,KAAAoN,YAEApN,OAIAmH,EAAA+mB,SAAA7tB,GAAAyK,OAAA0nB,WAAArrB,IAEAnH,KAAA0jC,WAIAoB,UAAA,SAAAjzB,GAEA,GAAA9E,GAAA/M,KAAA+M,GACAkE,EAAAlE,EAAAye,aAAA3Z,GACA1K,EAAAnH,KAAAmH,KAEA/I,GAAA6S,IAEAlE,EAAAsf,cAAApb,EAAA9J,EAAAqK,OAAArK,GAAA,GAGAJ,GAAA4E,MAAA5E,GAAA6E,OAAA0Y,WAAAnd,EAAA8J,GAEA9J,EAAA+mB,SAAA7tB,GAAAyK,OAAA0nB,WAAArrB,KAGA69B,UAAA,SAAAnzB,EAAAe,GAEA,GAAA7F,GAAA/M,KAAA+M,GACA5F,EAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAA2Y,iBAAApd,EAAA0K,EAAAe,GAEA,MAAAA,GAAA,MAAAA,GAEA5S,KAAA6kC,WAAApvB,IAEA1I,EAAA0hB,aAAAtnB,GAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA2nB,kBAAAtrB,EAAA0K,KAEA,IAAAe,EAEAzL,EAAA+mB,SAAA7tB,GAAAyK,OAAA4nB,kBAAAvrB,EAAA0K,IAIA1K,EAAA+mB,SAAA7tB,GAAAyK,OAAA2nB,kBAAAtrB,EAAA0K,OCtEAxT,EAAA8W,GAAAI,IAGAgvB,UAAAjyB,GAAAiO,KAEAmkB,YAAA,EAEA14B,KAAA,cAEA2I,IAAA,SAAA5H,EAAA5F,GAEA4F,EAAAoe,OAAAtK,GAAAN,KAEAvgB,KAAA0jC,SAIA32B,EAAA4C,MAAAlC,OAAAtG,EAAAqK,OAAAxR,KAAAuL,UAAAvL,KAAAoN,cCjBA/O,EAAA8W,GAAAK,IAGA+uB,UAAAjyB,GAAAS,MAEA2xB,YAAA,EAEA14B,KAAA,cAEA2I,IAAA,SAAA5H,EAAA5F,GAEAA,EAAAqnB,QAAAnuB,GAAA2U,OAAAia,cAEAliB,EAAAoe,QAAAtK,GAAAN,MAAApZ,EAAA8mB,QAAAjuB,KAAA8L,aASA3E,EAAAumB,QAEAvmB,EAAA8mB,OAAAO,QAAArnB,EAAAqnB,QAEAzhB,EAAA4C,MAAAqZ,IAAA7hB,EAAAqK,OAAArK,EAAA8mB,OAAAjuB,KAAAuL,UAAAvL,KAAAoN,aAIArG,GAAA4E,MAAA5E,GAAA6E,OAAAqY,qBAAA9c,GAEA4F,EAAA4C,MAAAlC,OAAAtG,EAAAqK,OAAAxR,KAAAuL,UAAAvL,KAAAoN,aAjBArG,GAAA4E,MAAA5E,GAAA6E,OAAAoY,kBAAA7c,GAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAAgnB,aAAA3qB,IAEAnH,KAAA6kC,WAAAnvB,IACA1V,KAAA0jC,WAgBAoB,UAAA,SAAAr2B,EAAAlB,EAAA03B,GAEA,GAAA99B,GAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAA2X,aAAApc,GAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAAgnB,aAAA3qB,IAEAA,EAAAumB,QAAA1tB,KAAA8L,WAAAwG,GAAAqO,SAEAxZ,EAAA4S,cAAArE,GAAA1V,KAAA+L,UAIAi5B,UAAA,SAAAj/B,GAEA,GAAAoB,GAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAAkY,mBAAA3c,EAAApB,GAEAoB,EAAA+mB,SAAA7tB,GAAAyK,OAAAinB,oBAAA5qB,IAEAA,EAAAumB,QAAA1tB,KAAA8L,WAAAwG,GAAAqO,SAEAxZ,EAAA4S,cAAArE,GAAA1V,KAAA+L,YC5DA1N,EAAA8W,GAAAM,IAGA8uB,UAAAjyB,GAAAS,MAEA2xB,YAAA,EAEA14B,KAAA,YAEA2I,IAAA,SAAA5H,EAAA5F,GAEA,GAAAsH,GAAAtH,EAAAqK,MAEArK,GAAAqnB,QAAAnuB,GAAA2U,OAAAia,cAEAliB,EAAA+jB,iBAAA3pB,GAEA4F,EAAAoe,QAAAtK,GAAAN,MAAAvgB,KAAA8L,aAOAiB,EAAA4C,MAAAlC,OAAAgB,EAAAzO,KAAAuL,UAAAvL,KAAAoN,YALApN,KAAAklC,eACAllC,KAAA0jC,WAQAoB,UAAA,WAEA9kC,KAAAklC,gBAGAF,UAAA,WAEAhlC,KAAAklC,gBAGAA,aAAA,WAEA,GAAA/9B,GAAAnH,KAAAmH,KAEAA,GAAAqnB,QAAAnuB,GAAA2U,OAAAua,cAEApoB,GAAA8mB,aACA9mB,GAAAg+B,cACAh+B,GAAAi+B,eACAj+B,GAAAumB,UC/CArvB,EAAA8W,GAAAO,IAGA6uB,UAAAjyB,GAAAqO,OAEA+jB,YAAA,EAEA14B,KAAA,eAEA2I,IAAA,SAAA5H,EAAA5F,GAEAnH,KAAAykC,WAAAnyB,GAAAC,OAEAvS,KAAAwwB,aAEArpB,EAAA+mB,SAAA7tB,GAAAyK,OAAAmnB,cAAA9qB,IAEAnH,KAAA0jC,WAIAv8B,EAAAqnB,QAAAnuB,GAAA2U,OAAAia,cAEAhhB,GAAA,WAEAlB,EAAAC,KAAAS,OAAAtG,EAAAnH,KAAAuL,UAAAvL,KAAAoN,YAEApN,QAIA8kC,UAAA,SAAA7zB,GAEAjR,KAAAklC,gBAGAF,UAAA,SAAAnzB,EAAAe,GAEA,GAAAzL,GAAAnH,KAAAmH,MACAsH,EAAAtH,EAAAqK,MAEA,OAAAoB,GAAA,MAAAA,GAEA7L,GAAA4E,MAAA5E,GAAA6E,OAAA4X,eAAArc,EAAAsH,GAEAzO,KAAAklC,cAAA,IAEA,IAAAtyB,GAEA7L,GAAA4E,MAAA5E,GAAA6E,OAAA6X,aAAAtc,EAAAyL,EAAAnE,EAAAoD,GAEA1K,EAAA+mB,SAAA7tB,GAAAyK,OAAAonB,qBAAA/qB,EAAA0K,MAKA9K,GAAAojB,qBAGApjB,GAAAuiB,OAQAniB,EAAA+mB,SAAA7tB,GAAAyK,OAAAonB,qBAAA/qB,EAAA0K,KANA9K,GAAAjC,KAAAiC,GAAA+D,OAAAuV,OAAArgB,KAAAqlC,aAAArlC,MAEAmH,EAAA+mB,SAAA7tB,GAAAyK,OAAAqnB,qBAAAhrB,EAAA0K,KAOA9K,GAAA4E,MAAA5E,GAAA6E,OAAA8X,eAAAvc,EAAA0K,KAIAqzB,aAAA,SAAAI,GAEA,GAAAv4B,GAAA/M,KAAA+M,GACA5F,EAAAnH,KAAAmH,MACAsH,EAAAtH,EAAAqK,MAEAzK,IAAA4E,MAAA5E,GAAA6E,OAAAgY,cAAAzc,EAAAsH,GAGAtH,EAAAqnB,QAAAnuB,GAAA2U,OAAAua,QAGApoB,EAAA+mB,SAAA7tB,GAAAyK,OAAAmnB,cAAA9qB,IAGAnH,KAAA6kC,WAAApvB,IAGA6vB,GAEAtlC,KAAAwwB,mBAIAzjB,GAAAI,IAAAsB,IAGA+hB,WAAA,WAEA,GAAAxwB,KAAA8L,WAAAwG,GAAAmO,MACA,CACA,GAAA1T,GAAA/M,KAAA+M,GACA5F,EAAAnH,KAAAmH,MACAsH,EAAAtH,EAAAqK,MAGAzK,IAAA4E,MAAA5E,GAAA6E,OAAA0X,eAAAnc,EAAAsH,GAEA1B,EAAA8C,KAAApC,OAAAtG,KAIAk+B,aAAA,WAEA,GAAAl+B,GAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAA+X,cAAAxc,GAEAA,EAAA4S,cAAArE,OC1HArX,EAAA8W,GAAAQ,IAGA4uB,UAAAjyB,GAAAS,MAEA2xB,YAAA,EAEA14B,KAAA,YAEA2I,IAAA,SAAA5H,EAAA5F,GAEA,GAAAA,EAAAupB,aAEA3pB,GAAA4E,MAAA5E,GAAA6E,OAAAsX,mBAAA/b,GAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA2mB,kBAAAtqB,IAEAnH,KAAA0jC,aAEA,IAAA32B,EAAAoe,QAAAtK,GAAAN,MAAAvgB,KAAA8L,aAeA,CACA,GAAA2C,GAAAtH,EAAAqK,OACA+zB,EAAAp+B,EAAAwmB,SAAA,EAEA3tB,MAAAwlC,WAAAz4B,EAAA5F,GAEAA,EAAA8mB,OAEA/uB,EAAAqmC,EAAAp+B,EAAA8mB,SAIA9mB,EAAA8mB,OAAAsX,EAEAp+B,EAAAumB,SAEAvmB,EAAA8mB,OAAAP,OAAAvmB,EAAAumB,SAIAvmB,EAAA8mB,OAAAO,QAAArnB,EAAAqnB,QACArnB,EAAA8mB,OAAAkX,QAAAh+B,EAAAg+B,QACAh+B,EAAA8mB,OAAAmX,SAAAj+B,EAAAi+B,SAEAr4B,EAAA4C,MAAAqZ,IAAAva,EAAAtH,EAAA8mB,OAAAjuB,KAAAuL,UAAAvL,KAAAoN,eArCApN,MAAA8L,WAAAwG,GAAAqO,SAEA3gB,KAAA2kC,QAAA9uB,KAEA7V,KAAAwlC,WAAAz4B,EAAA5F,GAIAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA0mB,WAAArqB,IAEAnH,KAAA0jC,UA+BA8B,WAAA,SAAAz4B,EAAA5F,GAEA,GAAAs+B,GAAAt+B,EAAAwmB,SAAA,GACA8Q,EAAAt3B,EAAAwvB,YAAA8O,GAEA5Z,EAAA9e,EAAAqe,SAAAqa,EAAAhH,EACAiH,EAAA34B,EAAAse,YAAAoa,EAAAhH,CAEAt3B,GAAAqnB,QAAAnuB,GAAA2U,OAAAka,YACA/nB,EAAAg+B,QAAAtZ,EACA1kB,EAAAi+B,SAAAM,GAGAC,WAAA,SAAAx+B,GAEAA,EAAAqnB,QAAAnuB,GAAA2U,OAAA4d,OAEAzrB,EAAA8mB,OAAAO,QAAArnB,EAAAqnB,cAEArnB,GAAA8mB,OAAAkX,cACAh+B,GAAA8mB,OAAAmX,SAEAplC,KAAA6kC,WAAAjvB,KAGAkvB,UAAA,SAAAr2B,EAAAlB,EAAA03B,GAEA,GAAA99B,GAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAAoX,WAAA7b,GAEAnH,KAAA+L,QAEA/L,KAAA2kC,QAAA9uB,IAIA7V,KAAA2lC,WAAAx+B,GAGAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA0mB,WAAArqB,KAGA69B,UAAA,SAAAj/B,GAEA,GAAAoB,GAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAAqX,iBAAA9b,EAAApB,GAEA/F,KAAA+L,QAEA/L,KAAA2kC,QAAA9uB,IAIA7V,KAAA2lC,WAAAx+B,GAGAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA2mB,kBAAAtqB,OCxHA9I,EAAA8W,GAAAS,IAGA2uB,UAAAjyB,GAAAS,MAEA2xB,YAAA,EAEA14B,KAAA,UAEA2I,IAAA,SAAA5H,EAAA5F,GAEA,GAAAsH,GAAAtH,EAAAqK,OACA+zB,EAAAp+B,EAAA8mB,MAEAlhB,GAAAoe,QAAAtK,GAAAD,KAAAnS,GAAA82B,GAAAvlC,KAAA8L,aAEAiB,EAAA4C,MAAAqZ,IAAAva,EAAA82B,EAAAvlC,KAAAuL,UAAAvL,KAAAoN,WAIApN,KAAA0jC,YCpBArlC,EAAA8W,GAAAU,IAGA0uB,UAAAjyB,GAAAqO,OAEA+jB,YAAA,EAEA14B,KAAA,aAEA2I,IAAA,SAAA5H,EAAA5F,GAEAA,EAAAupB,cAEA3pB,GAAA4E,MAAA5E,GAAA6E,OAAAwX,oBAAAjc,GAEAnH,KAAA4lC,WAAAz+B,GAAA,EAAA9G,GAAAyK,OAAA6mB,kBAAA,MACA3xB,KAAA0jC,UAEAv8B,EAAA0sB,mBAAA7zB,KAAA6lC,SAAA7lC,OAIA+M,EAAA6e,QAAAzkB,EAAAg+B,UAAAnlC,KAAAykC,WAAAnyB,GAAAC,OAEAvS,KAAAuwB,WACAvwB,KAAA4lC,WAAAz+B,GAAA,EAAA9G,GAAAyK,OAAAgP,WAAA,MACA9Z,KAAA0jC,WAIAv8B,EAAAqnB,QAAAnuB,GAAA2U,OAAAka,YAEAjhB,GAAA,WAEA9G,EAAAumB,OAEA3gB,EAAAC,KAAAQ,OAAArG,EAAAA,EAAAg+B,QAAAnlC,KAAAuL,UAAAvL,KAAAoN,WAIAL,EAAAC,KAAAlO,OAAAqI,EAAAA,EAAAg+B,QAAAnlC,KAAAuL,UAAAvL,KAAAoN,YAGApN,OAvBAA,KAAA0jC,UA2BAoB,UAAA,SAAAjzB,GAEA,GAAA9E,GAAA/M,KAAA+M,GACAkE,EAAAlE,EAAAye,aAAA3Z,GACA1K,EAAAnH,KAAAmH,KAEAJ,IAAA4E,MAAA5E,GAAA6E,OAAAiX,YAAA1b,GAEAnH,KAAA8lC,WAAA70B,IAGA+zB,UAAA,SAAAnzB,EAAAe,GAEA,GACA7F,GAAA/M,KAAA+M,GACAkE,EAAAlE,EAAAye,aAAA3Z,GACA1K,EAAAnH,KAAAmH,KAGA,OAAAyL,GAEA7L,GAAA4E,MAAA5E,GAAA6E,OAAA4W,cAAArb,EAAA8J,GAEAjR,KAAA8lC,WAAA70B,IAEA,MAAA2B,GAAA,MAAAA,GAEA7L,GAAA4E,MAAA5E,GAAA6E,OAAA6W,iBAAAtb,GAEAnH,KAAA6kC,WAAApvB,IAEA1I,EAAA0hB,aAAAtnB,GAEAA,EAAA+mB,SAAA7tB,GAAAyK,OAAA6mB,mBAAAxqB,EAAA0K,KAEA,IAAAe,GAEA7L,GAAA4E,MAAA5E,GAAA6E,OAAA8W,WAAAvb,EAAAyL,GAEA5S,KAAA4lC,WAAAz+B,GAAA,EAAA9G,GAAAyK,OAAA6mB,kBAAA9f,KAKA9K,GAAAojB,qBAGApjB,GAAAuiB,OAQAtpB,KAAA4lC,WAAAz+B,GAAA,EAAA9G,GAAAyK,OAAA6mB,kBAAA9f,IANA9K,GAAAjC,KAAAiC,GAAA+D,OAAAuV,OAAArgB,KAAAqlC,aAAArlC,MAEAmH,EAAA+mB,SAAA7tB,GAAAyK,OAAA8mB,mBAAAzqB,EAAA0K,KAOA9K,GAAA4E,MAAA5E,GAAA6E,OAAA+W,aAAAxb,EAAA0K,KAIA+zB,WAAA,SAAAz+B,EAAA4+B,EAAAvuB,EAAA3F,GAEA1K,EAAAqnB,QAAAnuB,GAAA2U,OAAA4d,OAEA5yB,KAAAgmC,aAAA7+B,GAEA4+B,GAEA/lC,KAAA6kC,WAAAjvB,IAGA4B,GAEArQ,EAAA+mB,SAAA1W,GAAArQ,EAAA0K,KAIAm0B,aAAA,SAAA7+B,SAEAA,GAAAg+B,cACAh+B,GAAAi+B,SAEAj+B,EAAA8mB,SAEA9mB,EAAA8mB,OAAAO,QAAArnB,EAAAqnB,cAEArnB,GAAA8mB,OAAAkX,cACAh+B,GAAA8mB,OAAAmX,WAIAU,WAAA,SAAA70B,GAEA,GAAAlE,GAAA/M,KAAA+M,GACA5F,EAAAnH,KAAAmH,MACA0kB,EAAA1kB,EAAAg+B,OAGA,OAAAh+B,GAAAupB,cAEA3pB,GAAA4E,MAAA5E,GAAA6E,OAAAwX,oBAAAjc,EAAA8J,GAEAjR,KAAAgmC,aAAA7+B,KAGAJ,GAAA4E,MAAA5E,GAAA6E,OAAA0W,YAAAnb,EAAA0kB,GAIA1kB,EAAAumB,SAEAvmB,EAAAumB,OAAAvmB,EAAA8mB,OAAA9mB,EAAA8mB,OAAAP,cAIAxuB,EAAA2sB,EAAA1kB,EAAAumB,QAGAlsB,EAAAyP,IAEAlE,EAAAsf,cAAApb,EAAA9J,EAAAqK,OAAArK,GAGAnH,KAAAuwB,WACAvwB,KAAA4lC,WAAAz+B,GAAA,EAAA9G,GAAAyK,OAAAgP,WAAA,WAEA/M,EAAAoe,QAAAtK,GAAA5L,QAEAjV,KAAA6kC,WAAAtvB,IAIAvV,KAAA6kC,WAAAjvB,OAIA2a,SAAA,WAEA,GAAAxjB,GAAA/M,KAAA+M,GACA5F,EAAAnH,KAAAmH,KAEAnH,MAAA8L,WAAAwG,GAAAmO,OAAA1T,EAAA6e,QAAAzkB,EAAAi+B,YAGAr+B,GAAA4E,MAAA5E,GAAA6E,OAAA2W,aAAApb,EAAAA,EAAAi+B,UAEAr4B,EAAA8C,KAAAkB,KAAA5J,EAAAA,EAAAi+B,YAIAC,aAAA,WAEA,GAAAl+B,GAAAnH,KAAAmH,KAEAA,GAAAqnB,UAAAnuB,GAAA2U,OAAAka,cAEA/nB,EAAA4S,cAAAlE,GAAA7V,KAAA+L,SAEAhF,GAAA4E,MAAA5E,GAAA6E,OAAAgX,YAAAzb,KAIA0+B,SAAA,WAEA,GAAA1+B,GAAAnH,KAAAmH,KAEAA,GAAA4S,cAAAlE,GAAA7V,KAAA+L,YCtNAhF,GAAAyJ,aAEAE,GAAAlC,UAEArH,MAAA,KACAisB,MAAA,EACAzjB,MAAAmR,GAAAP,KACAxP,KAAAkQ,GAAAV,KACA0lB,MAAA,EACAxhC,UAAA,EACAyhC,UAAA,EACAC,SAAA,EACAjyB,cAAA,gBACAkyB,kBACAC,yBAGA3nC,EAAAgS,GAAArT,WAGAipC,WAAA,KACAC,kBAAA,KAEAC,YAAA,SAAAx7B,EAAA2O,EAAA1T,GAEA,MAAAyK,IAAAlC,UAUAsC,KAAA,SAAA9F,EAAA2O,EAAA1T,GAWA,GATAD,EAAAhG,KAAAiG,EAAAjG,KAAAwmC,YAAAx7B,EAAA2O,EAAA1T,IAEAjG,KAAAgL,SAAAA,EACAhL,KAAA6B,KAAA8X,EACA3Z,KAAAiG,QAAAA,EACAjG,KAAA+O,aAAA,EACA/O,KAAAyE,SAAAzE,KAAAyE,UAAAjI,EAAAwO,EAAA5D,OAAApH,KAAA6B,SAAA,EACA7B,KAAAymC,eAAAjlC,EAAAxB,KAAAomC,gBAEApmC,KAAAymC,cACA,CACA,IAAAC,GAEA,KAAA,kEAGAhoC,GAAAsB,KAAA0mC,IAGA1mC,KAAA2mC,cAAA37B,EAAA2O,EAAA1T,IAGA0gC,cAAA,SAAA37B,EAAA2O,EAAA1T,GAEA9F,EAAAH,KAAAmH,OAMAnH,KAAA4mC,cAAA57B,EAAA2O,EAAA1T,GAJAc,GAAA4D,IAAA3K,KAAAmH,OAAAipB,SAAApwB,KAAA6mC,kBAAA77B,EAAA2O,EAAA1T,GAAAjG,OAWA6mC,kBAAA,SAAA77B,EAAA2O,EAAA1T,GAEA,MAAA,UAAA6gC,GAEA9mC,KAAAmH,MAAA2/B,EAEA9mC,KAAA4mC,cAAA57B,EAAA2O,EAAA1T,KAOA2gC,cAAA,SAAA57B,EAAA5D,EAAAnB,KAKA8gC,qBAAA,WAEA/mC,KAAA+O,aAAA,EACA/O,KAAA+f,KAAAxR,QAYAwR,KAAA7R,GAAA,SAAA/G,EAAAytB,EAAA/gB,MAKA4C,IAAA,SAAAtP,EAAAqN,EAAAX,KAKAwgB,OAAA,SAAAltB,EAAAqN,EAAAX,KAKA2gB,SAAA,SAAArtB,EAAAqN,KAKAmgB,UAAA,SAAAxtB,EAAAqN,KAKA+gB,SAAA,SAAApuB,EAAAiN,EAAA9S,KAKAm0B,UAAA,SAAAtuB,EAAAiN,EAAA9S,KAKAqJ,IAAA,SAAAxD,GAEA,MAAAA,GAAA6rB,WAAAhzB,KAAA6B,MAAA6yB,SAGApJ,OAAA,SAAAnkB,EAAAiQ,EAAAlG,GAEA,GAAAL,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACAmlC,EAAA91B,EAAAlR,KAAA+Q,KAAA/Q,KAAA2P,KAEA,IAAAkB,GAAAm2B,EACA,CACA,GAAAtS,GAAA7jB,EAAA6jB,OAEAt3B,GAAAs3B,GAEAtd,EAAApX,KAAA6B,MAAA7B,KAAAinC,eAAAvS,EAAAsS,GAIA5vB,EAAApX,KAAA6B,MAAA7B,KAAAknC,UAAAxS,EAAAsS,KAKAtb,MAAA,SAAA1nB,GAEAhE,KAAAmH,MAAA/G,SAAAsrB,MAAA1nB,EAAAhE,OAGAmnC,mBAAA,SAAAnjC,GAEAhE,KAAAmH,MAAA/G,SAAA0D,GAAA1D,GAAA0K,OAAA0f,WAAAxmB,EAAAhE,OAGAonC,aAAA,SAAAjgC,GAEA,IAAAuN,GAEA,KAAA,qDAGA,IAAA2yB,GAAArnC,KAAA0N,MACA45B,EAAAtnC,KAAAsnC,aACAC,EAAAvnC,KAAAunC,UACA75B,EAAArR,EAAAgrC,GAAA5kC,GAAA4kC,EAAAlgC,GAAAkgC,EACAG,EAAAxnC,KAAAmH,MAAAqgC,OAAA95B,EAAA45B,EAEAlpC,GAAAmpC,IAEAroC,EAAAqoC,EAAAC,GAGAzgC,GAAA4E,MAAA3L,KAAAsmC,WAAAtmC,KAAAmH,EAAAqgC,EAAAH,EAAA35B,EAAA65B,EAEA,IAAA78B,GAAA88B,EAAA9G,MAIA,OAFAh2B,GAAA0lB,SAAApwB,KAAAynC,mBAAAtgC,GAAAnH,MAEAwnC,GAGAC,mBAAA,SAAAtgC,GAEA,MAAA,UAAAqgC,GAEA,GAAA38B,GAAA28B,EAAAhH,QAEAz5B,IAAA4E,MAAA3L,KAAAumC,kBAAAvmC,KAAAmH,EAAAqgC,EAEA,KAAA,GAAA3qC,GAAA,EAAAA,EAAAgO,EAAA9N,OAAAF,IAEAmD,KAAAq0B,OAAAltB,EAAA0D,EAAAhO,IAAA,KAKA6qC,yBAAA,SAAAvgC,GAEA,MAAA,IAAA4M,IAAA/T,KAAAmH,MAAA/G,SAAA+G,EAAAnH,OAGA2nC,iBAAA,WAEA,MAAA,IAAA94B,IAAA7O,KAAAmH,MAAA/G,WAGAkU,WAAA,SAAAE,EAAAX,GAEA,MAAA7T,MAAAmH,MAAA/G,SAAAkU,WAAAE,EAAAX,IAGA+zB,YAAA,SAAAzgC,EAAAC,GAEA,MAAAF,GAAAC,EAAAC,EAAA7K,GAEAmL,EAAAP,EAAAC,GAFA,QAMA0kB,UAAA,SAAAtX,EAAAxQ,EAAA6P,GAEA7T,KAAAmH,MAAA/G,SAAA0rB,UAAAtX,EAAAxQ,EAAAhE,KAAA6T,IAGAg0B,WAAA,SAAAh3B,EAAAi3B,EAAA9jC,EAAA6P,GAIA,IAAA,GAFA9G,GAAA/M,KAAAmH,MAAA/G,SAEAvD,EAAA,EAAAA,EAAAirC,EAAA/qC,OAAAF,IACA,CACA,GAAA2X,GAAAszB,EAAAjrC,GACA4R,EAAA1B,EAAAsH,kBAAAG,EAEA3D,GAAAk3B,QAAAt5B,IAAA,EAEA1B,EAAA+e,UAAAtX,EAAAxQ,EAAAhE,KAAA6T,KAIA1N,YAAA,SAAA0K,GAEA,GAAA7Q,KAAAyE,SACA,CACA,GAAA0C,GAAA0J,EAAAvS,OACA0pC,EAAAhoC,KAAA6B,KACAomC,IAAAp3B,EAAAq3B,UAEA,KAAAD,GAAAjoC,KAAAmmC,SAAAzvB,OAAAC,eACA,CACA,GAAA3C,GAAAhU,IAEA0W,QAAAC,eAAAxP,EAAA6gC,GAEAnxB,YAAA,EAEAJ,IAAA,SAAAjC,GAEAR,EAAAyC,IAAAtP,EAAAqN,IAEA7J,IAAA,WAEA,MAAAkG,GAAA6jB,WAIAuT,EAAAp3B,EAAAq3B,YAAA,EAGAD,IAEA9gC,EAAA6gC,GAAAn3B,EAAA6jB,SAGA7jB,EAAAs3B,cAAAt3B,EAAA6jB,UAEA7jB,EAAAs3B,YAAAt3B,EAAA6jB,QAEAvtB,EAAA+mB,SAAA7tB,GAAAyK,OAAAymB,gBAAAvxB,KAAA6Q,OAKAu3B,aAAA,SAAA5zB,GAEA,IAAApX,EAAAoX,GAEA,OAAA,CAGA,IAAA6zB,GAAAroC,KAAAmH,MAAA/G,SACAkoC,EAAAD,EAAA55B,GAEA,KAAArR,EAAAkrC,GAEA,OAAA,CAGA,IAAAA,EAAAvrC,SAAAyX,EAAAzX,OAEA,OAAA,CAGA,KAAA,GAAAF,GAAA,EAAAA,EAAA2X,EAAAzX,OAAAF,IAEA,IAAAyD,EAAAkU,EAAA3X,MAAAR,EAAAmY,EAAA3X,IAEA,OAAA,CAIA,QAAA,GAGA0rC,YAAA,SAAAhpC,EAAAipC,EAAA30B,EAAA9H,GAEA,GAAA0yB,GAAAz+B,KAAAyoC,yBAAAlpC,EAAAipC,EAOA,OALA/J,KAAA5qB,GAAA7T,KAAAimC,OAAA1mC,EAAAm3B,UAEAn3B,EAAAgZ,MAAAxM,GAGA0yB,GAGAgK,yBAAA,SAAAlpC,EAAAipC,GAEA,GAAA/J,IAAA,CAEA,IAAApiC,EAAAmsC,GAEAjpC,EAAAipC,KAEAjpC,EAAAipC,GAAA,KACA/J,GAAA,OAKA,KAAA,GAAA5hC,GAAA,EAAAA,EAAA2rC,EAAAzrC,OAAAF,IACA,CACA,GAAA6rC,GAAAF,EAAA3rC,EAEA0C,GAAAmpC,KAEAnpC,EAAAmpC,GAAA,KACAjK,GAAA,GAKA,MAAAA,IAGAkK,aAAA,SAAAppC,EAAAipC,EAAAtnB,EAAA0nB,EAAA/0B,GAEA,GAAA4qB,GAAAz+B,KAAA6oC,0BAAAtpC,EAAAipC,EAAAtnB,EAAA0nB,EAYA,OAVAnK,MAEAz+B,KAAAimC,MAAA1mC,EAAAm3B,UAAA7iB,GAEAtU,EAAAgZ,QAGAhZ,EAAA2uB,SAAA7tB,GAAAyK,OAAAwmB,WAAA/xB,EAAA2hB,EAAAsnB,EAAAI,KAGAnK,GAGAoK,0BAAA,SAAAtpC,EAAAipC,EAAAtnB,EAAA0nB,GAEA,GAAAnK,IAAA,CAEA,IAAApiC,EAAAmsC,GACA,CACA,GAAAM,GAAAvpC,EAAAipC,GACAO,EAAA7nB,EAAA0nB,EAEAzlC,GAAA2lC,EAAAC,KAEAxpC,EAAAipC,GAAAO,EACAtK,GAAA,OAKA,KAAA,GAAA5hC,GAAA,EAAAA,EAAA2rC,EAAAzrC,OAAAF,IACA,CACA,GAAA6rC,GAAAF,EAAA3rC,GACAisC,EAAAvpC,EAAAmpC,GACAM,EAAAJ,EAAA/rC,GACAksC,EAAA7nB,EAAA8nB,EAEA7lC,GAAA2lC,EAAAC,KAEAxpC,EAAAmpC,GAAA/mC,EAAAonC,GACAtK,GAAA,GAKA,MAAAA,IAGAwI,eAAA,SAAAgC,EAAAjC,GAEA,IAAAA,EAEA,MAAA,KAKA,KAAA,GAFAkC,MAEArsC,EAAA,EAAAA,EAAAosC,EAAAlsC,OAAAF,IACA,CACA,GAAA63B,GAAA10B,KAAAknC,UAAA+B,EAAApsC,GAAAmqC,EAEA,QAAAtS,GAEAwU,EAAA5pC,KAAAo1B,GAIA,MAAAwU,IAGAhC,UAAA,SAAAxS,EAAAsS,GAEA,GAAAtS,EAEA,OAAAsS,GAEA,IAAA/lB,IAAA5gB,MACA,MAAAq0B,GAAA/G,SAAA,EAEA,KAAA7M,IAAAzgB,MACA,GAAAq0B,EAAAzG,OAEA,MAAAyG,GAAAzG,MAIA,IAAAsX,GAAA7Q,EAAA/G,SAAA,EAOA,OALA+G,GAAAhH,SAEA6X,EAAA7X,OAAAgH,EAAAhH,QAGA6X,CAGA,KAAAtkB,IAAAF,IACA,IAAAD,IAAAC,IACA,MAAA2T,GAAAljB,MAEA,KAAAyP,IAAAD,KACA,IAAAF,IAAAE,KACA,MAAA0T,GAAAyB,QAKA,MAAA,SCzeA93B,EAAAqS,GAAAoF,IAGAqzB,UAAA,KACAC,gBAAA,KACAC,cAAA,KACAC,YAAA,KACAC,cAAA,KACAC,eAAA,KAEA5C,cAAA,SAAA57B,EAAA2O,EAAA1T,GAEA,IAAAjG,KAAAymC,cACA,CACA,GAAA4B,GAAAroC,KAAAmH,MAAA/G,QAEAJ,MAAAulC,MAAAvlC,KAAAulC,OAAA8C,EAAAxmC,KAAA,IAAAwmC,EAAA55B,IAGA1H,GAAA4E,MAAA3L,KAAAmpC,UAAAnpC,MAEAA,KAAA+mC,wBAGAtwB,IAAA,SAAAtP,EAAAqN,EAAAX,GAEA,GAAArS,EAAAgT,GAEAxU,KAAAw0B,SAAArtB,EAAAnL,EAAA6X,OAGA,CACA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACA6yB,EAAA10B,KAAAsU,WAAAE,EAAAX,EAEA6gB,KAAA7jB,EAAA8jB,UAAAD,KAEA10B,KAAAypC,WAAA54B,GACA7Q,KAAA0pC,WAAA74B,EAAA6jB,EAAA7gB,MAKAwgB,OAAA,SAAAltB,EAAAqN,EAAAX,GAEA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACA6yB,EAAA10B,KAAAsU,WAAAE,EAAAX,EAEA6gB,IAEA7jB,EAAA6jB,UAAAA,IAEA10B,KAAAypC,WAAA54B,GACA7Q,KAAA0pC,WAAA74B,EAAA6jB,EAAA7gB,KAKA2gB,SAAA,SAAArtB,EAAAqN,EAAAX,GAEA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACA6yB,EAAA10B,KAAAsU,WAAAE,EAEAkgB,IAAA7jB,EAAA6jB,UAAAA,GAEA10B,KAAA2pC,aAAA94B,EAAAgD,IAIA8gB,UAAA,SAAAxtB,EAAAqN,GAEA,GAAA3D,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACA6yB,EAAA10B,KAAAsU,WAAAE,EAEA,OAAAkgB,KAAA7jB,EAAA6jB,SAGAgV,WAAA,SAAA74B,EAAA6jB,EAAA7gB,GAEA6gB,EAAAhE,eAEA1wB,KAAA4pC,SAAA/4B,EAAA6jB,GACA10B,KAAA6pC,iBAAAh5B,EAAAvS,OAAAo2B,EAAA7gB,GACA7T,KAAAmG,YAAA0K,KAIA84B,aAAA,SAAA94B,EAAAgD,GAEA,GAAAA,EACA,CACA,GAAA6gB,GAAA7jB,EAAA6jB,OAEA,IAAAA,GAAAA,EAAA6B,YAEA,OAIAv2B,KAAAypC,WAAA54B,GACA7Q,KAAA8pC,gBAAAj5B,EAAAvS,QACA0B,KAAAmG,YAAA0K,IAGA44B,WAAA,SAAA54B,GAEA,GAAA6jB,GAAA7jB,EAAA6jB,OAEAA,KAEA3tB,GAAA4E,MAAA3L,KAAAopC,gBAAAppC,KAAA6Q,GAEAA,EAAAk5B,SAAArV,EAAAsV,KAAA3pC,GAAAyK,OAAAkmB,MAAAngB,EAAAk5B,SACAl5B,EAAAo5B,WAAAvV,EAAAsV,KAAA3pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WAEAp5B,EAAA6jB,QAAA,KACA7jB,EAAAq5B,OAAA,EACAr5B,EAAA/B,QAAA,QAEA+B,GAAAvS,OAAA20B,YAAAyB,EAAA0B,UAIAwT,SAAA,SAAA/4B,EAAA6jB,GAEA7jB,EAAAk5B,SAAArV,EAAAyV,IAAA9pC,GAAAyK,OAAAkmB,MAAAngB,EAAAk5B,QAAA/pC,MACA6Q,EAAAo5B,WAAAvV,EAAAyV,IAAA9pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,UAAAjqC,MAEA6Q,EAAA6jB,QAAAA,EACA7jB,EAAAq5B,OAAA,EACAr5B,EAAA/B,QAAA,EAEA+B,EAAAvS,OAAA20B,YAAAyB,EAAA0B,QAAA1B,EAEA3tB,GAAA4E,MAAA3L,KAAAqpC,cAAArpC,KAAA6Q,IAGAu5B,YAAA,SAAAv5B,EAAAgD,GAEA,MAAA,UAAA6gB,GAEA,GAAAvtB,GAAA0J,EAAAvS,MAEAyI,IAAA4E,MAAA3L,KAAAspC,YAAAtpC,KAAAmH,EAAA0J,EAAA6jB,GAEA7jB,EAAA/B,UAAA,IAEA4lB,IAAAA,EAAAhE,cAEA1wB,KAAA4pC,SAAA/4B,EAAA6jB,EAAA7gB,GACA7T,KAAA6pC,iBAAA1iC,EAAAutB,EAAA7gB,IAIA7T,KAAA0N,MAEAmD,EAAAnD,MAAA1N,KAAAonC,aAAAjgC,GAEAnH,KAAAkmC,UAEAlmC,KAAA8pC,gBAAA3iC,EAAA0M,GAIAhD,EAAA/B,QAAA,EAEA9O,KAAAmG,YAAA0K,MAKAw5B,iBAAA,SAAAljC,GAEA,GAAAo+B,GAAAvlC,KAAAulC,KAEA,OAAA,UAAA7Q,GAEA,MAAAjuB,GAAAU,EAAAo+B,EAAA7Q,EAAAA,EAAA3iB,IAAAtD,OAIAq7B,gBAAA,SAAA3iC,EAAA0M,GAEA,GAAA0xB,GAAAvlC,KAAAulC,KAEAx+B,IAAA4E,MAAA3L,KAAAupC,cAAAvpC,KAAAmH,EAAAo+B,GAEAvlC,KAAAuoC,YAAAphC,EAAAo+B,EAAA1xB,IAGAg2B,iBAAA,SAAA1iC,EAAAutB,EAAA7gB,GAEA,GAAA0xB,GAAAvlC,KAAAulC,MACA+E,EAAA5V,EAAA3iB,IAAAtD,GAEA1H,IAAA4E,MAAA3L,KAAAwpC,eAAAxpC,KAAAmH,EAAAo+B,EAAA7Q,EAAA4V,GAEAtqC,KAAA2oC,aAAAxhC,EAAAo+B,EAAA7Q,EAAA4V,EAAAz2B,MCrMAxV,EAAAqS,GAAAqF,IAGAw0B,cAAA,KACAC,oBAAA,KACAC,UAAA,KAEAhD,mBAAA,SAAAtgC,GAEA,MAAA,UAAAqgC,GAEA,GAAA32B,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACAgJ,EAAA28B,EAAAhH,QAEAz5B,IAAA4E,MAAA3L,KAAAumC,kBAAAvmC,KAAAmH,EAAAqgC,GAEAxnC,KAAA0qC,KAAA75B,EAAA,WAEA,IAAA,GAAAhU,GAAA,EAAAA,EAAAgO,EAAA9N,OAAAF,IAEAmD,KAAA2qC,SAAA95B,EAAAhG,EAAAhO,IAAA,KAIAmD,KAAAgtB,KAAAnc,GACA7Q,KAAA4qC,UAAA/5B,GAAA,KAIA65B,KAAA,SAAA75B,EAAA7M,EAAA6P,GAEAhD,EAAAg6B,cAAA,EACAh6B,EAAAi6B,aAAA,EAEA9mC,EAAA/E,MAAAe,MAEA6Q,EAAAg6B,cAAA,EACAh6B,EAAAi6B,aAAA,EAEA9qC,KAAAgtB,KAAAnc,GACA7Q,KAAA4qC,UAAA/5B,EAAAgD,IAGA4C,IAAA,SAAAtP,EAAAqN,EAAAX,GAEA,GAAArS,EAAAgT,GAEAxU,KAAAw0B,SAAArtB,EAAAnL,EAAA6X,OAGA,CACA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACA8uB,EAAA9f,EAAA6jB,QACAqW,EAAA/qC,KAAA2nC,kBAEA,IAAA3nC,KAAAooC,aAAA5zB,GAEA,IAAA,GAAA3X,GAAA,EAAAA,EAAA2X,EAAAzX,OAAAF,IACA,CACA,GAAA63B,GAAA10B,KAAAsU,WAAAE,EAAA3X,GAAAgX,EAEA6gB,IAEAqW,EAAAnS,IAAAlE,OAKA,CACA,GAAAA,GAAA10B,KAAAsU,WAAAE,EAAAX,EAEA6gB,IAEAqW,EAAAnS,IAAAlE,GAIA,GAAAwE,GAAAvI,EAAA0G,SAAA0T,GACAxR,EAAAwR,EAAA1T,SAAA1G,EAEA3wB,MAAA0qC,KAAA75B,EAAA,WAEA,IAAA,GAAAhU,GAAA,EAAAA,EAAA08B,EAAAx8B,OAAAF,IAEAmD,KAAA2qC,SAAA95B,EAAA0oB,EAAA18B,GAAAgX,EAGA,KAAA,GAAAhX,GAAA,EAAAA,EAAAq8B,EAAAn8B,OAAAF,IAEAmD,KAAAgrC,YAAAn6B,EAAAqoB,EAAAr8B,GAAAgX,IAGAA,KAIAwgB,OAAA,SAAAltB,EAAAqN,EAAAX,GAEA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEA,IAAA7B,KAAAooC,aAAA5zB,GAEAxU,KAAA0qC,KAAA75B,EAAA,WAEA,IAAA,GAAAhU,GAAA,EAAAA,EAAA2X,EAAAzX,OAAAF,IACA,CACA,GAAA63B,GAAA10B,KAAAsU,WAAAE,EAAA3X,GAAAgX,EAEA6gB,IAEA10B,KAAA2qC,SAAA95B,EAAA6jB,EAAA7gB,UAKA,IAAAtX,EAAAiY,GACA,CACA,GAAAkgB,GAAA10B,KAAAsU,WAAAE,EAAAX,EAEA6gB,IAEA10B,KAAA2qC,SAAA95B,EAAA6jB,EAAA7gB,KAKA2gB,SAAA,SAAArtB,EAAAqN,EAAAX,GAEA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEA,IAAA7B,KAAAooC,aAAA5zB,GAEAxU,KAAA0qC,KAAA75B,EAAA,WAEA,IAAA,GAAAhU,GAAA,EAAAA,EAAA2X,EAAAzX,OAAAF,IACA,CACA,GAAA63B,GAAA10B,KAAAsU,WAAAE,EAAA3X,GAEA63B,IAEA10B,KAAAgrC,YAAAn6B,EAAA6jB,EAAA7gB,UAKA,IAAAtX,EAAAiY,GACA,CACA,GAAAkgB,GAAA10B,KAAAsU,WAAAE,EAEAkgB,IAEA10B,KAAAgrC,YAAAn6B,EAAA6jB,EAAA7gB,OAIA,CACA,GAAA1G,GAAA0D,EAAA6jB,OAEA10B,MAAA0qC,KAAA75B,EAAA,WAEA,IAAA,GAAAhU,GAAAsQ,EAAApQ,OAAA,EAAAF,GAAA,EAAAA,IAEAmD,KAAAgrC,YAAAn6B,EAAA1D,EAAAtQ,GAAAgX,OAMA8gB,UAAA,SAAAxtB,EAAAqN,GAEA,GAAA3D,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,MACA8uB,EAAA9f,EAAA6jB,OAEA,IAAA10B,KAAAooC,aAAA5zB,GACA,CACA,IAAA,GAAA3X,GAAA,EAAAA,EAAA2X,EAAAzX,OAAAF,IACA,CACA,GAAA63B,GAAA10B,KAAAsU,WAAAE,EAAA3X,GAEA,IAAA63B,IAAA/D,EAAArC,IAAAoG,EAAAljB,QAEA,OAAA,EAIA,MAAAgD,GAAAzX,OAAA,EAEA,GAAAR,EAAAiY,GACA,CACA,GAAAkgB,GAAA10B,KAAAsU,WAAAE,EAEA,OAAAkgB,IAAA/D,EAAArC,IAAAoG,EAAAljB,QAGA,OAAA,GAGAy5B,iBAAA,SAAAvW,EAAA7gB,GAEA,OAAAA,IAAA6gB,EAAA6B,aAGAqU,UAAA,SAAA/5B,EAAAgD,GAEAhD,EAAAi6B,aAAAj3B,IAAAhD,EAAAvS,OAAA02B,YAEAh1B,KAAA2P,QAAAmR,GAAAzgB,OAAAL,KAAA+Q,OAAAkQ,GAAA5gB,SAEA0G,GAAA4E,MAAA3L,KAAAuqC,cAAAvqC,KAAA6Q,GAEAA,EAAAvS,OAAAia,UAKA6xB,YAAA,SAAAv5B,EAAAgD,GAEA,MAAA,UAAA6gB,GAEA,GAAAqT,GAAAl3B,EAAAk3B,QACAt5B,EAAAimB,EAAAljB,MAEA/C,KAAAs5B,KAEAhhC,GAAA4E,MAAA3L,KAAAwqC,oBAAAxqC,KAAA6Q,EAAA6jB,GAEA10B,KAAA2qC,SAAA95B,EAAA6jB,EAAA7gB,SAEAk0B,GAAAt5B,MAKAue,KAAA,SAAAnc,GAEA,GAAA6jB,GAAA7jB,EAAA6jB,OAEA7jB,GAAAg6B,eAEA9jC,GAAA4E,MAAA3L,KAAAyqC,UAAAzqC,KAAA6Q,GAEA6jB,EAAA1H,KAAAhtB,KAAAtD,YAEAmU,EAAAvS,OAAA4vB,SAAA7tB,GAAAyK,OAAAymB,gBAAAvxB,KAAA6Q,QCpPA9J,GAAAyJ,UAAA06B,UAAAl1B,GAEAA,GAAAxH,UAEArH,MAAA,KACAisB,MAAA,EACA1lB,OAAA,EACAiC,MAAAmR,GAAAP,KACAxP,KAAAkQ,GAAAV,KACA0lB,MAAA,EACAxhC,UAAA,EACAyhC,UAAA,EACAC,SAAA,EACAZ,MAAA,KACAx5B,QAAAuG,GAAAS,MACAmB,cAAA,gBACAkyB,kBACAC,yBAGAhoC,EAAAyX,GAAAE,IAGAhK,KAAA,YAEAm9B,UAAApiC,GAAA6E,OAAA4Z,eACA4jB,gBAAAriC,GAAA6E,OAAAia,sBACAwjB,cAAAtiC,GAAA6E,OAAAka,oBACAwjB,YAAAviC,GAAA6E,OAAAsa,iBACAqjB,cAAAxiC,GAAA6E,OAAAoa,oBACAwjB,eAAAziC,GAAA6E,OAAAqa,qBACAqgB,WAAAv/B,GAAA6E,OAAAua,gBACAogB,kBAAAx/B,GAAA6E,OAAAwa,wBAEAogB,YAAA,SAAAx7B,EAAA2O,EAAA1T,GAEA,MAAA+P,IAAAxH,UAGAuR,KAAA7R,GAAA,SAAA/G,EAAAytB,EAAA/gB,GAEA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,OAEAvD,OAAA6I,EACAwtB,UAAA30B,KAAAqqC,iBAAAljC,GACAutB,QAAA,KACA5lB,QAAA,EAEAm7B,UAAA,WAEAljC,GAAA4E,MAAA5E,GAAA6E,OAAA6Z,uBAAAzlB,KAAAmH,EAAA0J,GAEA1J,EAAA4tB,QAAA/0B,KAAA+L,SACA/L,KAAA2pC,aAAA94B,IAGAk5B,QAAA,WAEAhjC,GAAA4E,MAAA5E,GAAA6E,OAAA8Z,qBAAA1lB,KAAAmH,EAAA0J,GAEAA,EAAA8jB,UAAA9jB,EAAA6jB,WAEAvtB,EAAA4tB,QAAA/0B,KAAA+L,SACA/L,KAAA2pC,aAAA94B,KAKA1J,GAAAgjC,IAAA9pC,GAAAyK,OAAAsmB,WAAApxB,KAAAmrC,WAAAnrC,MACAmH,EAAAgjC,IAAA9pC,GAAAyK,OAAAwmB,UAAAtxB,KAAAorC,YAAAprC,MAEAwB,EAAAozB,KAEAA,EAAA50B,KAAA4nC,YAAAzgC,EAAAnH,KAAAulC,OAEA3Q,GAEA7tB,GAAA4E,MAAA5E,GAAA6E,OAAA+Z,yBAAA3lB,KAAAmH,EAAAytB,IAIApzB,EAAAozB,GAMA50B,KAAA0N,QAEAmD,EAAAnD,MAAA1N,KAAAonC,aAAAjgC,KANAJ,GAAA4E,MAAA5E,GAAA6E,OAAAga,kBAAA5lB,KAAAmH,EAAAytB,GAEA50B,KAAA8rB,UAAA8I,EAAA50B,KAAAoqC,YAAAv5B,EAAAgD,GAAAA,MAQAs3B,WAAA,SAAAhkC,GAEA,GAAA0J,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEAgP,KAEA9J,GAAA4E,MAAA5E,GAAA6E,OAAAma,qBAAA/lB,KAAAmH,EAAA0J,GAEA7Q,KAAAypC,WAAA54B,GACA7Q,KAAAmG,YAAA0K,KAIAu6B,YAAA,SAAAjkC,EAAAutB,EAAA2W,EAAAC,GAEA,GAAAtrC,KAAAulC,QAAA8F,EACA,CACA,GAAAx6B,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEAgP,IAAA6jB,IAAA7jB,EAAA6jB,UAEA10B,KAAAypC,WAAA54B,GACA7Q,KAAA4pC,SAAA/4B,EAAA6jB,GACA10B,KAAAmG,YAAA0K,QCpHA9J,GAAAyJ,UAAA+6B,OAAAt1B,GAEAA,GAAAzH,UAEArH,MAAA,KACAisB,MAAA,EACA1lB,OAAA,EACAiC,MAAAmR,GAAAP,KACAxP,KAAAkQ,GAAAV,KACA0lB,MAAA,EACAxhC,UAAA,EACAyhC,UAAA,EACAC,SAAA,EACAZ,MAAA,KACAx5B,QAAAuG,GAAAsO,IACA1M,cAAA,gBACAkyB,kBACAC,yBAGAhoC,EAAAyX,GAAAG,IAGAjK,KAAA,SAEAm9B,UAAApiC,GAAA6E,OAAA+Y,YACAykB,gBAAAriC,GAAA6E,OAAAmZ,mBACAskB,cAAAtiC,GAAA6E,OAAAoZ,iBACAskB,YAAAviC,GAAA6E,OAAAyZ,cACAkkB,cAAAxiC,GAAA6E,OAAAuZ,iBACAqkB,eAAAziC,GAAA6E,OAAAwZ,kBACAkhB,WAAAv/B,GAAA6E,OAAA0Z,aACAihB,kBAAAx/B,GAAA6E,OAAA2Z,qBAEAihB,YAAA,SAAAx7B,EAAA2O,EAAA1T,GAEA,MAAAgQ,IAAAzH,UAGAuR,KAAA7R,GAAA,SAAA/G,EAAAytB,EAAA/gB,GAEA,GAAAhD,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,OAEAvD,OAAA6I,EACAwtB,UAAA30B,KAAAqqC,iBAAAljC,GACAutB,QAAA,KACA5lB,QAAA,EACAo7B,OAAA,EACAre,QAAA,EAEAoe,UAAA,WAEAljC,GAAA4E,MAAA5E,GAAA6E,OAAAgZ,oBAAA5kB,KAAAmH,EAAA0J,GAEA7Q,KAAA2pC,aAAA94B,IAIA1J,GAAAgjC,IAAA9pC,GAAAyK,OAAAmmB,QAAAjxB,KAAAwrC,QAAAxrC,MACAmH,EAAAgjC,IAAA9pC,GAAAyK,OAAAsmB,WAAApxB,KAAAmrC,WAAAnrC,MAEAwB,EAAAozB,KAEAA,EAAA50B,KAAA4nC,YAAAzgC,EAAAnH,KAAAulC,OAEA3Q,GAEA7tB,GAAA4E,MAAA5E,GAAA6E,OAAAiZ,sBAAA7kB,KAAAmH,EAAAytB,IAIApzB,EAAAozB,GAMA50B,KAAA0N,QAEAmD,EAAAnD,MAAA1N,KAAAonC,aAAAjgC,KANAJ,GAAA4E,MAAA5E,GAAA6E,OAAAkZ,eAAA9kB,KAAAmH,EAAAytB,GAEA50B,KAAA8rB,UAAA8I,EAAA50B,KAAAoqC,YAAAv5B,GAAAgD,MAQA0hB,SAAA,SAAApuB,EAAAiN,EAAA9S,GAEA,GAAAozB,GAAA10B,KAAA2K,IAAAxD,EAEA,IAAAutB,EACA,CACA,GAAA+W,GAAA/W,EAAAS,OAAA7zB,EAEAtB,MAAA6oC,0BAAAz0B,EAAApU,KAAAulC,MAAAkG,EAAAA,EAAA15B,IAAAtD,KAEA2F,EAAApU,KAAA6B,MAAA4pC,IAIAD,QAAA,SAAArkC,GAEA,GAAA0J,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEA,IAAAgP,GAAAA,EAAA6jB,QACA,CACA,GAAAA,GAAA7jB,EAAA6jB,SAEA7jB,EAAAq5B,OAAAxV,EAAA9F,iBAEA7nB,GAAA4E,MAAA5E,GAAA6E,OAAAqZ,eAAAjlB,KAAAmH,EAAA0J,GAEAA,EAAAgb,QAAA,EAEA6I,EAAAnc,QAEA1H,EAAAgb,QAAA,EACAhb,EAAAq5B,OAAA,KAKAiB,WAAA,SAAAhkC,GAEA,GAAA0J,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEAgP,IAEA7Q,KAAA+L,UAEAhF,GAAA4E,MAAA5E,GAAA6E,OAAAsZ,kBAAAllB,KAAAmH,EAAA0J,GAEA7Q,KAAAypC,WAAA54B,KAKA44B,WAAA,SAAA54B,GAEA,GAAA6jB,GAAA7jB,EAAA6jB,OAEAA,KAEA3tB,GAAA4E,MAAA3L,KAAAopC,gBAAAppC,KAAA6Q,GAEA6jB,EAAAsV,KAAA3pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WAEAjqC,KAAA+L,UAAA2oB,EAAAhE,cAEAgE,EAAAK,QAAA/0B,KAAA+L,SAGA8E,EAAA6jB,QAAA,KACA7jB,EAAAq5B,OAAA,EACAr5B,EAAA/B,QAAA,QAEA+B,GAAAvS,OAAA20B,YAAAyB,EAAA0B,YCzJArvB,GAAAyJ,UAAAk7B,QAAAx1B,GAEAA,GAAA1H,UAEArH,MAAA,KACAisB,MAAA,EACA1lB,OAAA,EACAiC,MAAAmR,GAAAP,KACAxP,KAAAkQ,GAAAV,KACA0lB,MAAA,EACAxhC,UAAA,EACA0hC,SAAA,EACAmE,QAAA,KACA5tC,WAAA,KACAsT,sBAAA,EACA27B,cAAAr5B,GAAAS,MACA64B,YAAAt5B,GAAAiO,KACArM,cAAA,gBACAkyB,kBACAC,yBAGAhoC,EAAA0X,GAAAG,IAGAlK,KAAA,UAEAu+B,cAAAxjC,GAAA6E,OAAAob,kBACAwjB,oBAAAzjC,GAAA6E,OAAAkb,wBACA2jB,UAAA1jC,GAAA6E,OAAA+a,aACA2f,WAAAv/B,GAAA6E,OAAAub,cACAof,kBAAAx/B,GAAA6E,OAAAwb,sBAEAof,YAAA,SAAAx7B,EAAA2O,EAAA1T,GAEA,MAAAiQ,IAAA1H,UAGAo4B,cAAA,SAAA57B,EAAA2O,EAAA1T,GAEAjG,KAAAsqC,QAAAtqC,KAAAsqC,SAAAt/B,EAAAnJ,KAAA,IAAAmJ,EAAAyD,IACAzO,KAAAtD,WAAAsF,EAAAhC,KAAAtD,WAAAsD,KAAAgQ,sBAEAjJ,GAAA4E,MAAA5E,GAAA6E,OAAAya,aAAArmB,MAEAA,KAAA+mC,wBAGAhnB,KAAA7R,GAAA,SAAA/G,EAAAytB,EAAA/gB,GAEA,GAAAG,GAAAhU,KACA6Q,EAAA1J,EAAA6rB,WAAAhzB,KAAA6B,OAEAvD,OAAA6I,EACA4gC,WACApT,UAAA30B,KAAAqqC,iBAAAljC,GACAutB,QAAA10B,KAAA0nC,yBAAAvgC,GACA0kB,QAAA,EACAgf,cAAA,EACAC,aAAA,EAEAb,UAAA,WAEAljC,GAAA4E,MAAA5E,GAAA6E,OAAA0a,qBAAAtS,EAAA7M,EAAAnH,KAAA6Q,GAEAmD,EAAAg3B,YAAAn6B,EAAA7Q,MAAA,IAGA+pC,QAAA,WAEAl5B,EAAAgb,SAKA9kB,GAAA4E,MAAA5E,GAAA6E,OAAA2a,mBAAAvS,EAAA7M,EAAAnH,KAAA6Q,GAEAA,EAAA8jB,UAAA30B,OAMAgU,EAAAgZ,KAAAnc,GACAmD,EAAA42B,UAAA/5B,IALAmD,EAAAg3B,YAAAn6B,EAAA7Q,QAWAmH,GAAAgjC,IAAA9pC,GAAAyK,OAAAomB,SAAAlxB,KAAA6rC,SAAA7rC,MACAmH,EAAAgjC,IAAA9pC,GAAAyK,OAAAqmB,UAAAnxB,KAAA8rC,UAAA9rC,MAGAA,KAAAmnC,mBAAAnnC,KAAA+rC,iBAAAl7B,IAGAzT,EAAAw3B,IAEA7tB,GAAA4E,MAAA5E,GAAA6E,OAAA4a,gBAAAxmB,KAAAmH,EAAA0J,EAAA+jB,GAEA50B,KAAA6nC,WAAAh3B,EAAA+jB,EAAA50B,KAAAoqC,YAAAv5B,EAAAgD,GAAAA,IAEA7T,KAAA0N,MAEAmD,EAAAnD,MAAA1N,KAAAonC,aAAAjgC,IAIAJ,GAAA4E,MAAA5E,GAAA6E,OAAA6a,uBAAAzmB,KAAAmH,EAAA0J,GAEA7Q,KAAA0rB,MAAA1rB,KAAAgsC,eAAAn7B,KAIA7Q,KAAAmG,YAAA0K,KAGA4kB,UAAA,SAAAtuB,EAAAiN,EAAA9S,GAEA,GAAAozB,GAAA10B,KAAA2K,IAAAxD,EAEA,IAAAutB,EACA,CACA,GAAAuU,KAEAjpC,MAAA6oC,0BAAAvnC,EAAAtB,KAAAsqC,QAAAl2B,EAAAjN,EAAA4K,IAAAtD,KAEAnN,EAAAtB,KAAAsqC,SAAAl2B,EAAAjN,EAAA4K,IAAAtD,IAEA,KAAA,GAAA5R,GAAA,EAAAA,EAAA63B,EAAA33B,OAAAF,IAEAosC,EAAA3pC,KAAAo1B,EAAA73B,GAAAs4B,OAAA7zB,GAGA8S,GAAApU,KAAA6B,MAAAonC,IAIA4C,SAAA,SAAA1kC,GAEA,GAAA0J,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEAgP,IAAA7Q,KAAA4rC,cAEA7kC,GAAA4E,MAAA5E,GAAA6E,OAAAsb,iBAAAlnB,KAAAmH,EAAA0J,GAEA5C,GAAA,WAEA4C,EAAAgb,QAAA,EACAhb,EAAAi6B,aAAA,CAIA,KAAA,GAFAl8B,GAAAiC,EAAA6jB,QAEA73B,EAAA,EAAAA,EAAA+R,EAAA7R,OAAAF,IACA,CACA,GAAA63B,GAAA9lB,EAAA/R,IAEA63B,EAAAhE,cAAAgE,EAAA9F,eAEA8F,EAAAnc,MAAAvY,KAAA4rC,aAIA/6B,EAAAgb,QAAA,EACAhb,EAAAi6B,aAAA,GAEA9qC,QAIA8rC,UAAA,SAAA3kC,GAEA,GAAA0J,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEAgP,IAAA7Q,KAAA2rC,gBAEA5kC,GAAA4E,MAAA5E,GAAA6E,OAAAqb,kBAAAjnB,KAAAmH,EAAA0J,GAEA5C,GAAA,WAEAjO,KAAA0qC,KAAA75B,EAAA,WAIA,IAAA,GAFAjC,GAAAiC,EAAA6jB,QAEA73B,EAAA+R,EAAA7R,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAA63B,GAAA9lB,EAAA/R,EAEA63B,GAAAK,QAAA/0B,KAAA2rC,mBAIA3rC,QAIA+rC,iBAAA,SAAAl7B,GAEA,MAAA,UAAA6jB,EAAA7gB,GAEAhD,EAAA8jB,UAAAD,KAEA3tB,GAAA4E,MAAA5E,GAAA6E,OAAAmb,kBAAA/mB,KAAA6Q,EAAA6jB,GAEA10B,KAAA2qC,SAAA95B,EAAA6jB,EAAA7gB,MAKAm4B,eAAA,SAAAn7B,GAEA,MAAA,UAAAw3B,GAEA,GAAA3T,GAAA2T,EAAAz0B,OAAA/C,EAAA8jB,UAEA5tB,IAAA4E,MAAA5E,GAAA6E,OAAAib,kBAAA7mB,KAAA6Q,EAAA6jB,GAEAA,EAAA33B,OAEAiD,KAAA0qC,KAAA75B,EAAA,WAEA,IAAA,GAAAhU,GAAA,EAAAA,EAAA63B,EAAA33B,OAAAF,IAEAmD,KAAA2qC,SAAA95B,EAAA6jB,EAAA73B,MAIAmD,KAAA0N,QAEAmD,EAAAnD,MAAA1N,KAAAonC,aAAAv2B,EAAAvS,WAKAqsC,SAAA,SAAA95B,EAAA6jB,EAAA7gB,GAEA,IAAA6gB,EAAAhE,aAAA,CAKA,GAAAvpB,GAAA0J,EAAAvS,OACAiB,EAAAsR,EAAA6jB,QACAjmB,EAAAimB,EAAAljB,OACA+nB,GAAAh6B,EAAA+uB,IAAA7f,EAuBA,OArBA8qB,KAEAxyB,GAAA4E,MAAA5E,GAAA6E,OAAAgb,YAAA5mB,KAAA6Q,EAAA6jB,GAEAn1B,EAAAypB,IAAAva,EAAAimB,GAEAA,EAAAyV,IAAA9pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WACAvV,EAAAyV,IAAA9pC,GAAAyK,OAAA6nB,kBAAA9hB,EAAAk5B,SAEArV,EAAAzB,YAAA9rB,EAAAivB,QAAAjvB,EAEAnH,KAAA6pC,iBAAA1iC,EAAAutB,EAAA7gB,GAEA7T,KAAAgtB,KAAAnc,GAEAgD,GAEA7T,KAAA4qC,UAAA/5B,IAIA0oB,IAGAyR,YAAA,SAAAn6B,EAAA6jB,EAAA7gB,GAEA,GAAA7T,KAAAirC,iBAAAvW,EAAA7gB,GAAA,CAKA,GAAA1M,GAAA0J,EAAAvS,OACAiB,EAAAsR,EAAA6jB,QACAqT,EAAAl3B,EAAAk3B,QACAt5B,EAAAimB,EAAAljB,MAEAjS,GAAA+uB,IAAA7f,KAEA1H,GAAA4E,MAAA5E,GAAA6E,OAAA8a,eAAA1mB,KAAA6Q,EAAA6jB,GAEAn1B,EAAAkO,OAAAgB,GAEAimB,EAAAsV,KAAA3pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WACAvV,EAAAsV,KAAA3pC,GAAAyK,OAAA6nB,kBAAA9hB,EAAAk5B,eAEArV,GAAAzB,YAAA9rB,EAAAivB,QAEAp2B,KAAA2rC,gBAEA93B,EAEA/H,GAAA9L,KAAA2rC,cAAAr5B,GAAAS,QAEA2hB,EAAAK,QAAAziB,GAAAS,OAKA2hB,EAAAK,QAAA/0B,KAAA2rC,gBAIA3rC,KAAAgtB,KAAAnc,GACA7Q,KAAA4qC,UAAA/5B,UAGAk3B,GAAAt5B,KAGAo7B,iBAAA,SAAA1iC,EAAAutB,EAAA7gB,GAEA,GAAAy2B,GAAAtqC,KAAAsqC,QACA/E,EAAAp+B,EAAA4K,IAAAtD,GAEAzO,MAAA2oC,aAAAjU,EAAA4V,EAAAnjC,EAAAo+B,EAAA1xB,IAGAw2B,iBAAA,SAAAljC,GAEA,GAAAmjC,GAAAtqC,KAAAsqC,QACA/E,EAAAp+B,EAAA4K,IAAAtD,GAEA,OAAA,UAAAimB,GAEA,MAAAjuB,GAAAiuB,EAAA4V,EAAAnjC,EAAAo+B,OC3UAx+B,GAAAyJ,UAAAy7B,eAAA91B,GAEAA,GAAA3H,UAEArH,MAAA,KACAisB,MAAA,EACA1lB,OAAA,EACAiC,MAAAmR,GAAAP,KACAxP,KAAAkQ,GAAAV,KACA0lB,MAAA,EACAxhC,UAAA,EACA0hC,SAAA,EACA+F,QAAAlwC,EACAupC,MAAA,KACA+E,QAAA,KACA5tC,WAAA,KACAsT,sBAAA,EACA27B,cAAAr5B,GAAAoO,OACAkrB,YAAAt5B,GAAAsO,IACAurB,mBAAA75B,GAAAiO,KACArM,cAAA,gBACAkyB,kBACAC,yBAGAhoC,EAAA0X,GAAAI,IAGAnK,KAAA,iBAEAu+B,cAAAxjC,GAAA6E,OAAAqc,sBACAuiB,oBAAAzjC,GAAA6E,OAAAmc,4BACA0iB,UAAA1jC,GAAA6E,OAAAgc,iBACA0e,WAAAv/B,GAAA6E,OAAA0c,kBACAie,kBAAAx/B,GAAA6E,OAAA2c,0BAEAie,YAAA,SAAAx7B,EAAA2O,EAAA1T,GAEA,MAAAkQ,IAAA3H,UAGAo4B,cAAA,SAAA57B,EAAA2O,EAAA1T,GAEA,IAAAjG,KAAAymC,cACA,CACA,GAAA4B,GAAAroC,KAAAmH,MAAA/G,QAEAJ,MAAAsqC,QAAAtqC,KAAAsqC,SAAAjC,EAAAxmC,KAAA,IAAAwmC,EAAA55B,IAGAzO,KAAAulC,MAAAvlC,KAAAulC,OAAAv6B,EAAAnJ,KAAA,IAAAmJ,EAAAyD,IACAzO,KAAAtD,WAAAsF,EAAAhC,KAAAtD,WAAAsD,KAAAgQ,sBAEA7P,EAAA8F,EAAAimC,SAMAlsC,KAAAosC,WAAAnmC,EAAAimC,SAJAnlC,GAAA4D,IAAA1E,EAAAimC,SAAA9b,SAAApwB,KAAAosC,WAAApsC,MAOA+G,GAAA4E,MAAA5E,GAAA6E,OAAAyb,iBAAArnB,OAGAosC,WAAA,SAAAF,GAEAlsC,KAAAksC,QAAAA,EAEAlsC,KAAA+mC,wBAGAhnB,KAAA7R,GAAA,SAAA/G,EAAAytB,EAAA/gB,GAEA,GAAAw4B,GAAArsC,KACAssC,EAAAtsC,KAAAksC,QAAA9rC,SAEAyQ,EAAA1J,EAAA6rB,WAAAhzB,KAAA6B,OAEAvD,OAAA6I,EACAwtB,UAAA30B,KAAAqqC,iBAAAljC,GACA4gC,WACArT,QAAA10B,KAAA0nC,yBAAAvgC,GACAolC,SAAA,GAAAv5B,IACA6Y,QAAA,EACAgf,cAAA,EACAC,aAAA,EAEAb,UAAA,WAEAljC,GAAA4E,MAAA5E,GAAA6E,OAAA0b,yBAAA+kB,EAAAllC,EAAAnH,KAAA6Q,GAEAw7B,EAAArB,YAAAn6B,EAAA7Q,OAGA+pC,QAAA,WAEAl5B,EAAAgb,SAKA9kB,GAAA4E,MAAA5E,GAAA6E,OAAA2b,uBAAA8kB,EAAAllC,EAAAnH,KAAA6Q,GAEAw7B,EAAArf,KAAAnc,GACAw7B,EAAAzB,UAAA/5B,KAGA27B,iBAAA,WAEAzlC,GAAA4E,MAAA5E,GAAA6E,OAAA4b,8BAAA6kB,EAAAllC,EAAAnH,KAAA6Q,GAEAw7B,EAAAI,uBAAA57B,EAAA7Q,OAMAmH,GAAAgjC,IAAA9pC,GAAAyK,OAAAomB,SAAAlxB,KAAA6rC,SAAA7rC,MACAmH,EAAAgjC,IAAA9pC,GAAAyK,OAAAqmB,UAAAnxB,KAAA8rC,UAAA9rC,MAGAssC,EAAAxoC,GAAA1D,GAAA0K,OAAA0f,WAAAxqB,KAAA+rC,iBAAAl7B,GAAA7Q,MAGA5C,EAAAw3B,IAEA7tB,GAAA4E,MAAA5E,GAAA6E,OAAA6b,oBAAAznB,KAAAmH,EAAA0J,EAAA+jB,GAEA50B,KAAA6nC,WAAAh3B,EAAA+jB,EAAA50B,KAAAoqC,YAAAv5B,EAAAgD,GAAAA,IAEA7T,KAAA0N,MAEAmD,EAAAnD,MAAA1N,KAAAonC,aAAAjgC,IAIAJ,GAAA4E,MAAA5E,GAAA6E,OAAA8b,2BAAA1nB,KAAAmH,EAAA0J,GAEAy7B,EAAA5gB,MAAA1rB,KAAAgsC,eAAAn7B,GAAA7Q,OAIAA,KAAAmG,YAAA0K,KAGA0kB,SAAA,SAAApuB,EAAAiN,EAAA9S,GAEA,GAAAozB,GAAA10B,KAAA2K,IAAAxD,EAEAutB,KAEAtgB,EAAApU,KAAA6B,MAAA6yB,EAAAp3B,UAIAuuC,SAAA,SAAA1kC,GAEA,GAAA0J,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEAoM,IAAA,WAEA,GAAA4C,GAAA7Q,KAAA4rC,YAIA,IAAA,GAFAW,GAAA17B,EAAA07B,SAAArvC,OAEAL,EAAA,EAAAA,EAAA0vC,EAAAxvC,OAAAF,IACA,CACA,GAAAqvC,GAAAK,EAAA1vC,IAEAqvC,EAAAxb,cAAAwb,EAAAtd,eAEAsd,EAAA3zB,MAAAvY,KAAA4rC,aAKA,GAAA/6B,GAAA7Q,KAAAmsC,mBACA,CACAplC,GAAA4E,MAAA5E,GAAA6E,OAAA8gC,oBAAA1sC,KAAAmH,EAAA0J,GAEAA,EAAAgb,QAAA,EACAhb,EAAAi6B,aAAA,CAIA,KAAA,GAFAl8B,GAAAiC,EAAA6jB,QAEA73B,EAAA,EAAAA,EAAA+R,EAAA7R,OAAAF,IACA,CACA,GAAA63B,GAAA9lB,EAAA/R,IAEA63B,EAAAhE,cAAAgE,EAAA9F,eAEA8F,EAAAnc,MAAAvY,KAAAmsC,oBAIAt7B,EAAAgb,QAAA,EACAhb,EAAAi6B,aAAA,IAGA9qC,OAGA8rC,UAAA,SAAA3kC,GAEA,GAAA0J,GAAA1J,EAAA6rB,WAAAhzB,KAAA6B,KAEAgP,IAAA7Q,KAAA2rC,gBAEA5kC,GAAA4E,MAAA5E,GAAA6E,OAAAsc,sBAAAloB,KAAAmH,EAAA0J,GAEA5C,GAAA,WAEAjO,KAAA0qC,KAAA75B,EAAA,WAIA,IAAA,GAFA07B,GAAA17B,EAAA07B,SAAArvC,OAEAL,EAAA,EAAAA,EAAA0vC,EAAAxvC,OAAAF,IACA,CACA,GAAAqvC,GAAAK,EAAA1vC,EAEAqvC,GAAAnX,QAAA/0B,KAAA2rC,mBAIA3rC,QAIA+rC,iBAAA,SAAAl7B;AAEA,MAAA,UAAAq7B,EAAAr4B,GAEAhD,EAAA8jB,UAAAuX,KAAAr7B,EAAA07B,SAAAje,IAAA4d,EAAA16B,UAEAzK,GAAA4E,MAAA5E,GAAA6E,OAAAoc,sBAAAhoB,KAAA6Q,EAAAq7B,GAEAlsC,KAAA2sC,oBAAA97B,EAAAq7B,EAAAr4B,MAKAm4B,eAAA,SAAAn7B,GAEA,MAAA,UAAAy7B,GAEA,GAAAC,GAAAD,EAAA14B,OAAA/C,EAAA8jB,UAEA5tB,IAAA4E,MAAA5E,GAAA6E,OAAAkc,sBAAA9nB,KAAA6Q,EAAA07B,GAEAA,EAAAxvC,OAEAiD,KAAA0qC,KAAA75B,EAAA,WAEA,IAAA,GAAAhU,GAAA,EAAAA,EAAA0vC,EAAAxvC,OAAAF,IAEAmD,KAAA2sC,oBAAA97B,EAAA07B,EAAA1vC,MAIAmD,KAAA0N,QAEAmD,EAAAnD,MAAA1N,KAAAonC,aAAAv2B,EAAAvS,WAKAqsC,SAAA,SAAA95B,EAAA6jB,EAAA7gB,GAEA,IAAA6gB,EAAAhE,aAAA,CAKA,GAAA6I,GAAAv5B,KAAA4sC,eAAA/7B,EAAA6jB,EAAA7gB,EAOA,OALA0lB,IAEAv5B,KAAA6sC,WAAAh8B,EAAA6jB,EAAA7gB,GAGA0lB,IAGAsT,WAAA,SAAAh8B,EAAA6jB,EAAA7gB,GAEA,GAAAy4B,GAAAtsC,KAAAksC,QAAA9rC,SACA0sC,EAAA9sC,KAAA+sC,iBAAAl8B,EAAA6jB,EAEA4X,GAAAxgB,UAAAghB,EAAA9sC,KAAAgtC,aAAAn8B,EAAAgD,GAAA7T,KAAA6T,IAGAm5B,aAAA,SAAAn8B,EAAAgD,GAEA,MAAA,UAAAq4B,GAEAlsC,KAAAitC,iBAAAp8B,EAAAq7B,EAAAr4B,KAIA84B,oBAAA,SAAA97B,EAAAq7B,EAAAr4B,GAEA,IAAAq4B,EAAAxb,aAAA,CAMA,GAAA2X,GAAAroC,KAAAmH,MAAA/G,SACAkoC,EAAAD,EAAA7b,SAAA0f,EAAAlsC,KAAAsqC,QAEAjC,GAAAvc,UAAAwc,EAAAtoC,KAAAktC,sBAAAr8B,EAAAq7B,EAAAr4B,GAAA7T,KAAA6T,KAGAq5B,sBAAA,SAAAr8B,EAAAq7B,EAAAr4B,GAEA,MAAA,UAAA6gB,GAEAA,IAEA10B,KAAAitC,iBAAAp8B,EAAAq7B,EAAAr4B,GACA7T,KAAA4sC,eAAA/7B,EAAA6jB,EAAA7gB,MAKAo5B,iBAAA,SAAAp8B,EAAAq7B,EAAAr4B,GAEA,GAAA1M,GAAA0J,EAAAvS,OACAiuC,EAAA17B,EAAA07B,SACAO,EAAAZ,EAAA16B,MAEA+6B,GAAAje,IAAAwe,KAEA/lC,GAAA4E,MAAA5E,GAAA6E,OAAAwc,qBAAApoB,KAAA6Q,EAAAq7B,GAEAK,EAAAvjB,IAAA8jB,EAAAZ,GAEAA,EAAA/B,IAAA9pC,GAAAyK,OAAAykB,QAAA1e,EAAA27B,kBAEAN,EAAAjZ,YAAA9rB,EAAAivB,QAAAjvB,GAEA0M,GAAA7T,KAAA4rC,cAEAzkC,EAAAmR,WAEA4zB,EAAA3zB,MAAAvY,KAAA4rC,aAIAM,EAAA3zB,MAAAjG,GAAAiO,SAMAqsB,eAAA,SAAA/7B,EAAA6jB,EAAA7gB,GAEA,GAAAo1B,GAAAp4B,EAAA6jB,QACA4T,EAAA5T,EAAAljB,OACA+nB,GAAA0P,EAAA3a,IAAAga,EAmBA,OAjBA/O,KAEAxyB,GAAA4E,MAAA5E,GAAA6E,OAAAic,gBAAA7nB,KAAA6Q,EAAA6jB,GAEAuU,EAAAjgB,IAAAsf,EAAA5T,GAEAA,EAAAyV,IAAA9pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WACAvV,EAAAyV,IAAA9pC,GAAAyK,OAAA6nB,kBAAA9hB,EAAAk5B,SAEA/pC,KAAAgtB,KAAAnc,GAEAgD,GAEA7T,KAAA4qC,UAAA/5B,IAIA0oB,GAGAyR,YAAA,SAAAn6B,EAAA6jB,EAAA7gB,GAEA,GAAAy0B,GAAA5T,EAAAljB,OACAy3B,EAAAp4B,EAAA6jB,QACAyY,EAAAlE,EAAAt+B,IAAA29B,EAEA6E,IAEAntC,KAAAotC,cAAAv8B,EAAA6jB,EAAA7gB,IAEA7T,KAAAqtC,oBAAAx8B,EAAAy3B,EAAAz0B,IAKAu5B,cAAA,SAAAv8B,EAAA6jB,EAAA7gB,GAEA,GAAAy4B,GAAAtsC,KAAAksC,QAAA9rC,SACAktC,EAAAttC,KAAA+sC,iBAAAl8B,EAAA6jB,GACAjmB,EAAA69B,EAAA3f,OAAA2gB,GACAf,EAAA17B,EAAA07B,SACAL,EAAAK,EAAA5hC,IAAA8D,EAEA,OAAAzO,MAAAutC,oBAAA18B,EAAAq7B,EAAAxX,GAAA,EAAA7gB,IAGA44B,uBAAA,SAAA57B,EAAAq7B,GAEA,GAAA7D,GAAAroC,KAAAmH,MAAA/G,SACAkoC,EAAAD,EAAA7b,SAAA0f,EAAAlsC,KAAAsqC,QAEAtqC,MAAAutC,oBAAA18B,EAAAq7B,IAEAlsC,KAAAqtC,oBAAAx8B,EAAAy3B,IAIAiF,oBAAA,SAAA18B,EAAAq7B,EAAAxX,EAAAyK,EAAAtrB,GAEA,GAAA1M,GAAA0J,EAAAvS,OACA46B,IAAAgT,CAEA,IAAAhT,EACA,CACA,IAAAl5B,KAAAirC,iBAAAiB,EAAAr4B,GAEA,OAAA,CAGA9M,IAAA4E,MAAA5E,GAAA6E,OAAAyc,wBAAAroB,KAAA6Q,EAAAq7B,EAAAxX,EAEA,IAAA6X,GAAA17B,EAAA07B,SACAO,EAAAZ,EAAA16B,MAEA06B,GAAAlC,KAAA3pC,GAAAyK,OAAAykB,QAAA1e,EAAA27B,wBAEAN,GAAAjZ,YAAA9rB,EAAAivB,QAEA+I,GAEA+M,EAAAnX,QAAAlhB,EAAAvB,GAAAS,MAAAT,GAAAsO,KAGA2rB,EAAA9+B,OAAAq/B,GAGA,MAAA5T,IAGAmU,oBAAA,SAAAx8B,EAAAy3B,GAEA,GAAAP,GAAAl3B,EAAAk3B,QACAkB,EAAAp4B,EAAA6jB,QACAA,EAAAuU,EAAAt+B,IAAA29B,EAiBA,OAfA5T,KAEA3tB,GAAA4E,MAAA5E,GAAA6E,OAAA+b,mBAAA3nB,KAAA6Q,EAAA6jB,GAEAuU,EAAAx7B,OAAA66B,GAEA5T,EAAAsV,KAAA3pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WACAvV,EAAAsV,KAAA3pC,GAAAyK,OAAA6nB,kBAAA9hB,EAAAk5B,SAEA/pC,KAAAgtB,KAAAnc,GACA7Q,KAAA4qC,UAAA/5B,UAGAk3B,GAAAO,GAEA5T,GAGA2V,iBAAA,SAAAljC,GAEA,GAAAmjC,GAAAnjC,EAAA4K,IAAAtD,IACA82B,EAAAvlC,KAAAulC,KAEA,OAAA,UAAA2G,GAEA,MAAAzlC,GAAAylC,EAAA3G,EAAAp+B,EAAAmjC,KAIAyC,iBAAA,SAAAl8B,EAAA6jB,GASA,IAAA,GAPAvtB,GAAA0J,EAAAvS,OACAkvC,EAAArmC,EAAA4K,IACAs2B,EAAAroC,KAAAmH,MAAA/G,SACAksC,EAAAtsC,KAAAksC,QAAA9rC,SACA0sC,EAAAR,EAAA79B,IACAA,KAEA5R,EAAA,EAAAA,EAAAiwC,EAAA/vC,OAAAF,IACA,CACA,GAAA0E,GAAAurC,EAAAjwC,EAEA,IAAA0E,IAAAvB,KAAAsqC,QAEA77B,EAAAlN,GAAAmzB,EAAAljB,WAEA,IAAAjQ,IAAAvB,KAAAulC,MAEA92B,EAAAlN,GAAA4F,EAAAqK,WAEA,IAAApU,EAAA4C,KAAAsqC,SACA,CACA,GAAAmD,GAAAjxC,EAAAwD,KAAAsqC,QAAA/oC,GACAmsC,EAAArF,EAAA55B,IAAAg/B,EAEAh/B,GAAAlN,GAAAmzB,EAAAgZ,OAEA,IAAAtwC,EAAA4C,KAAAulC,OACA,CACA,GAAAkI,GAAAjxC,EAAAwD,KAAAulC,MAAAhkC,GACAmsC,EAAAF,EAAA/+B,IAAAg/B,EAEAh/B,GAAAlN,GAAA4F,EAAAumC,IAIA,MAAAj/B,MC3gBA1H,GAAAyJ,UAAA4b,UAAAhW,GAEAA,GAAA5H,UAEArH,MAAAnL,EACAo3B,MAAA,EACA1lB,OAAA,EACAiC,MAAAmR,GAAAP,KACAxP,KAAAkQ,GAAAV,KACA0lB,MAAA,EACAxhC,UAAA,EACA0hC,SAAA,EACAzpC,WAAA,KACAsT,sBAAA,EACAkb,aAAA,GAGA7sB,EAAA0X,GAAAK,IAGApK,KAAA,YAEAy+B,UAAA1jC,GAAA6E,OAAA6c,eACA6d,WAAAv/B,GAAA6E,OAAA+hC,gBACApH,kBAAAx/B,GAAA6E,OAAAgiC,wBAEApH,YAAA,SAAAx7B,EAAA2O,EAAA1T,GAEA,MAAAmQ,IAAA5H,UAGAo4B,cAAA,SAAA57B,EAAA2O,EAAA1T,GAEAjG,KAAAtD,WAAAsF,EAAAhC,KAAAtD,WAAAsD,KAAAgQ,sBAEAjJ,GAAA4E,MAAA5E,GAAA6E,OAAA4c,eAAAxoB,MAEAA,KAAA+mC,wBAGAhnB,KAAA7R,GAAA,SAAA/G,EAAAytB,EAAA/gB,GAEA,GAAAG,GAAAhU,KACA6Q,EAAA1J,EAAA6rB,WAAAhzB,KAAA6B,OAEAvD,OAAA6I,EACA4gC,WACArT,QAAA10B,KAAA0nC,yBAAAvgC,GACA0jC,cAAA,EACAC,aAAA,EAEAb,UAAA,WAEAljC,GAAA4E,MAAA5E,GAAA6E,OAAA8c,uBAAA1U,EAAA7M,EAAAnH,KAAA6Q,GAEAmD,EAAAg3B,YAAAn6B,EAAA7Q,MAAA,IAGA+pC,QAAA,WAEAhjC,GAAA4E,MAAA5E,GAAA6E,OAAA+c,qBAAA3U,EAAA7M,EAAAnH,KAAA6Q,GAEAmD,EAAAgZ,KAAAnc,GACAmD,EAAA42B,UAAA/5B,IAMA1J,GAAAqK,OAGAxR,KAAAkrB,aAEA/jB,EAAAgjC,IAAAnqC,KAAAkrB,YAAAlrB,KAAA6tC,UAAAh9B,GAAA7Q,MAIA6Q,EAAAnD,MAAA1N,KAAAonC,aAAAjgC,GAGAnH,KAAAmG,YAAA0K,KAGAg9B,UAAA,SAAAh9B,GAEA,MAAA,YAEAA,EAAAnD,MAAA1N,KAAAonC,aAAAv2B,EAAAvS,UAIAqsC,SAAA,SAAA95B,EAAA6jB,EAAA7gB,GAEA,IAAA6gB,EAAAhE,aAAA,CAKA,GACAnxB,IADAsR,EAAAvS,OACAuS,EAAA6jB,SACAjmB,EAAAimB,EAAAljB,OACA+nB,GAAAh6B,EAAA+uB,IAAA7f,EAmBA,OAjBA8qB,KAEAxyB,GAAA4E,MAAA5E,GAAA6E,OAAAgb,YAAA5mB,KAAA6Q,EAAA6jB,GAEAn1B,EAAAypB,IAAAva,EAAAimB,GAEAA,EAAAyV,IAAA9pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WACAvV,EAAAyV,IAAA9pC,GAAAyK,OAAA6nB,kBAAA9hB,EAAAk5B,SAEA/pC,KAAAgtB,KAAAnc,GAEAgD,GAEA7T,KAAA4qC,UAAA/5B,IAIA0oB,IAGAyR,YAAA,SAAAn6B,EAAA6jB,EAAA7gB,GAEA,GAAA7T,KAAAirC,iBAAAvW,EAAA7gB,GAAA,CAKA,GACAtU,IADAsR,EAAAvS,OACAuS,EAAA6jB,SACAqT,EAAAl3B,EAAAk3B,QACAt5B,EAAAimB,EAAAljB,MAEAjS,GAAA+uB,IAAA7f,KAEA1H,GAAA4E,MAAA5E,GAAA6E,OAAA8a,eAAA1mB,KAAA6Q,EAAA6jB,GAEAn1B,EAAAkO,OAAAgB,GAEAimB,EAAAsV,KAAA3pC,GAAAyK,OAAAykB,QAAA1e,EAAAo5B,WACAvV,EAAAsV,KAAA3pC,GAAAyK,OAAA6nB,kBAAA9hB,EAAAk5B,SAEA/pC,KAAAgtB,KAAAnc,GACA7Q,KAAA4qC,UAAA/5B,UAGAk3B,GAAAt5B,MuBxJA,IAAAi4B,KAGAC,cAAA,SAAA37B,EAAA2O,EAAA1T,GAEAjG,KAAAqqC,iBAAArqC,KAAA8tC,8BAAA9tC,KAAAqqC,kBAEArqC,KAAA+tC,mBAAA,WAEA/tC,KAAA4mC,cAAA57B,EAAA2O,EAAA1T,MAIA6nC,8BAAA,SAAAzD,GAEA,MAAA,UAAAljC,GAEA,GAAAwtB,GAAA0V,EAAA9sC,KAAAyC,KAAAmH,GACA+M,EAAAlU,KAAAguC,yBAAA7mC,GACA8mC,EAAAjuC,KAAAkU,aAEA,OAAA,UAAAwgB,GAEA,MAAAC,GAAAD,GAKAvxB,EAAA+Q,EAAAwgB,EAAAuZ,KAHA,KAQAF,mBAAA,SAAAG,GAMA,QAAAC,OAEAr/B,IAAAwrB,GAEA4T,EAAAjvC,MAAAe,MARA,GAAAomC,GAAApmC,KAAAomC,eACA9L,EAAAj5B,EAAA+kC,GACAt3B,EAAA,CAUA,KAAA,GAAAjN,KAAAukC,GACA,CACA,GAAAlyB,GAAAkyB,EAAAvkC,EAEAkF,IAAA4D,IAAA9I,GAAAuuB,SAAApwB,KAAAouC,iBAAAl6B,EAAAi6B,GAAAnuC,QAIAouC,iBAAA,SAAAl6B,EAAAg6B,GAEA,MAAA,UAAApH,GAEA9mC,KAAAomC,eAAAU,EAAA1mC,SAAAyB,MAAAqS,EACAlU,KAAAomC,eAAAU,EAAA1mC,SAAA8K,WAAAgJ,EACAlU,KAAAqmC,qBAAAnyB,GAAA4yB,EAEAoH,EAAAjvC,MAAAe,QAIA0nC,yBAAA,SAAAvgC,GAEA,MAAA8M,IAAA,GAAAF,IAAA/X,EAAAmL,EAAAnH,MAAAA,KAAAkU,cAAAlU,KAAAqmC,uBAGAsB,iBAAA,WAEA,MAAA1zB,IAAA,GAAApF,IAAA7O,KAAAkU,cAAAlU,KAAAqmC,uBAGA3a,MAAA,SAAA1nB,GAEA,GAAA4K,GAAA5O,KAAAqmC,oBAEA,KAAA,GAAA9kC,KAAAqN,GACA,CACA,GAAAzH,GAAAyH,EAAArN,EAEA4F,GAAA/G,SAAAsrB,MAAA1nB,EAAAhE,QAIAmnC,mBAAA,SAAAnjC,GAEA,GAAA4K,GAAA5O,KAAAqmC,oBAEA,KAAA,GAAA9kC,KAAAqN,GACA,CACA,GAAAzH,GAAAyH,EAAArN,EAEA4F,GAAA/G,SAAA0D,GAAA1D,GAAA0K,OAAA0f,WAAAxmB,EAAAhE,QAIAonC,aAAA,SAAAjgC,GAEA,GAAAkgC,GAAArnC,KAAA0N,MACA45B,EAAAtnC,KAAAsnC,aACAC,EAAAvnC,KAAAunC,UACA75B,EAAArR,EAAAgrC,GAAA5kC,GAAA4kC,EAAAlgC,GAAAkgC,EACAG,EAAArgC,EAAAqgC,OAAA95B,EAAA45B,EAEAlpC,GAAAmpC,IAEAC,EAAAtb,KAAAqb,GAGAtzB,GAAAuzB,EAAAhH,SAAAxgC,KAAAkU,cAAAlU,KAAAqmC,qBAEA,IAAA37B,GAAA88B,EAAA9G,MAGA,OAFAh2B,GAAA0lB,SAAApwB,KAAAynC,mBAAAtgC,GAAAnH,MAEAwnC,GAGAlzB,WAAA,SAAAE,EAAAX,GAEA,GAAAW,YAAAnU,IAEA,MAAAmU,EAEA,IAAApW,EAAAoW,GACA,CACA,GAAAzH,GAAA/M,KAAAquC,yBAAA75B,EAEA,IAAAzH,EAEA,MAAAA,GAAAuH,WAAAE,EAAAX,GAIA,OAAA,GAGA00B,YAAA,SAAAhpC,EAAAipC,EAAA30B,GAEA,GAAA4qB,GAAAz+B,KAAAyoC,yBAAAlpC,EAAAipC,EAaA,OAXAjpC,GAAAS,KAAAkU,iBAEA3U,EAAAS,KAAAkU,eAAA,KACAuqB,GAAA,GAGAA,IAAA5qB,GAAA7T,KAAAimC,OAAA1mC,EAAAm3B,UAEAn3B,EAAAgZ,QAGAkmB,GAGAkK,aAAA,SAAAppC,EAAAipC,EAAAtnB,EAAA0nB,EAAA/0B,GAEA,GAAA4qB,GAAAz+B,KAAA6oC,0BAAAtpC,EAAAipC,EAAAtnB,EAAA0nB,GAEAF,EAAA1oC,KAAAkU,cACA40B,EAAAvpC,EAAAmpC,GACAK,EAAA/oC,KAAAguC,yBAAA9sB,EAkBA,OAhBA/d,GAAA2lC,EAAAC,KAEAxpC,EAAAmpC,GAAAK,EACAtK,GAAA,GAGAA,KAEAz+B,KAAAimC,MAAA1mC,EAAAm3B,UAAA7iB,GAEAtU,EAAAgZ,QAGAhZ,EAAA2uB,SAAA7tB,GAAAyK,OAAAwmB,WAAA/xB,EAAA2hB,EAAAsnB,EAAAI,KAGAnK,GAGAmJ,YAAA,SAAAzgC,EAAAC,GAEA,GAAA8M,GAAAlU,KAAAkU,cACAo6B,EAAAnnC,EAAA+M,EAEA,IAAAhN,EAAAC,EAAAC,EAAA7K,IAAAA,EAAA+xC,GACA,CACA,GAAA5Z,GAAA10B,KAAAqmC,qBAAAiI,EAEA,IAAA5Z,EAAAt0B,SACA,CACA,GAAA0nC,KAIA,IAFAA,EAAA5zB,GAAAo6B,EAEAjyC,EAAA+K,GAEA0gC,EAAApT,EAAAt0B,SAAAqO,KAAAtH,EAAAC,OAIA,KAAA,GAAAvK,GAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IAEAirC,EAAApT,EAAAt0B,SAAAqO,IAAA5R,IAAAsK,EAAAC,EAAAvK,GAIA,OAAAirC,MAKAhc,UAAA,SAAAtX,EAAAxQ,EAAA6P,GAEA,GAAAzV,EAAAoW,GACA,CACA,GAAAzH,GAAA/M,KAAAquC,yBAAA75B,EAEAzH,MAAA,GAEAA,EAAA+e,UAAAtX,EAAAxQ,EAAAhE,KAAA6T,KAKAg0B,WAAA,SAAAC,EAAA9jC,EAAA6P,GAEA,IAAA,GAAAhX,GAAA,EAAAA,EAAAirC,EAAA/qC,OAAAF,IACA,CACA,GAAA2X,GAAAszB,EAAAjrC,EAEA,IAAA2X,YAAAnU,IAEA2D,EAAAzG,KAAAyC,KAAAwU,OAEA,IAAApW,EAAAoW,GACA,CACA,GAAAzH,GAAA/M,KAAAquC,yBAAA75B,EAEA,IAAAzH,EACA,CACA,GAAA0B,GAAA1B,EAAAsH,kBAAAG,EAEA3D,UAAAk3B,QAAAt5B,IAAA,EAEA1B,EAAA+e,UAAAtX,EAAAxQ,EAAAhE,KAAA6T,OAMA06B,eAAA,WAEA,OAAA,GAGAnG,aAAA,SAAA5zB,GAEA,MAAApX,GAAAoX,IAGAg6B,iBAAA,SAAArnC,GAEA,MAAAA,GAAAnH,KAAAkU,gBAGAm6B,yBAAA,SAAAlnC,GAEA,GAAA+M,GAAAlU,KAAAwuC,iBAAArnC,GACAA,EAAAnH,KAAAqmC,qBAAAnyB,EAEA,OAAA/M,GAAAA,EAAA/G,UAAA,GAGA4tC,yBAAA,SAAA7mC,GAEA,MAAAnH,MAAAomC,eAAAj/B,EAAA4K,IAAAlQ,OtB1RAkF,IAAA0nC,MAAA,SAAAjvC,GAEA,MAAA,UAAAwL,GAEA,GAAAyjC,GAAA,GAAAp4B,IAAArL,EAMA,OAJAtM,GAAA+vC,EAAAjvC,GAEAivC,EAAAC,WAAA1jC,GAEAyjC,IASA/vC,EAAA2X,GAAAhZ,WAGAsxC,gBAAA,IACAC,gBAAA,IACAC,mBAAA,IACAC,mBAAA,IACAC,mBAAA,IACAC,kBAAA,IAEAC,YAAA,EACAC,YAAA,EACAC,eAAA,EACAC,eAAA,EACAC,eAAA,EACAC,cAAA,EAEAC,UAAA,SAAAC,GAEA,KAAA,6BAGAC,iBAAA,SAAAtoC,EAAAqoC,GAEA,KAAA,oCAGAE,kBAAA,SAAAvoC,EAAAqoC,GAEA,GAAAG,GAAA3vC,KAAAyvC,iBAAAtoC,EAAAqoC,EAEA,OAAAG,IAAAA,GAAA3vC,KAAAuvC,UAAAC,IAGAI,kBAAA,SAAAjiC,EAAAD,GAEA,MAAA1N,MAAAuvC,aAGAb,WAAA,SAAA1jC,KAKAmC,IAAA,SAAA5B,EAAA6B,GAKA,QAAAmK,GAAAk3B,EAAAoB,EAAAC,GAEArB,EAAAthC,IAAA0iC,EAAAC,GAEA,QAAAhL,GAAAl2B,GAEAxR,EAAAwR,IAEAzB,EAAA7N,KAAAL,MAAAkO,EAAAyB,GAGA,QAAAmhC,GAAAC,EAAAC,EAAAC,GAEAF,GAAA7iC,EAAApQ,SAAAiD,KAAAivC,WAEA1jC,EAAA4B,GAEA8iC,GAEA7iC,EAAAD,EAAAlN,EAAAiwC,GAAAA,EAAAlwC,KAAA2uC,iBAtBA,GAAAwB,GAAAnwC,KAAAuvC,WAAA,GACApiC,IAyBAnN,MAAAowC,UAAAD,EAAAnwC,KAAAivC,WAAA13B,EAAAutB,EAAA13B,EAAA2iC,IAGAplC,IAAA,SAAAxD,EAAAoE,EAAA6B,GAKA,QAAAmK,GAAAk3B,EAAAoB,EAAAC,GAEArB,EAAA9jC,IAAAxD,EAAA0oC,EAAAC,GAEA,QAAAhL,GAAA7zB,GAEA,OAAAo/B,GAAAjyC,EAAA6S,KAEAo/B,EAAAp/B,GAGA,QAAA8+B,GAAAC,EAAAC,EAAAC,GAEA,OAAAG,EAEA9kC,EAAA8kC,GAIAjjC,EAAAijC,EAAApwC,EAAAiwC,GAAAA,EAAAlwC,KAAA4uC,iBAtBA,GAAAuB,GAAAnwC,KAAA0vC,kBAAAvoC,GAAA,GACAkpC,EAAA,IAyBArwC,MAAAowC,UAAAD,EAAAnwC,KAAAkvC,WAAA33B,EAAAutB,EAAAjkC,EAAAkvC,IAGAjxC,OAAA,SAAAqI,EAAAoG,EAAAhC,EAAA6B,GAKA,QAAAmK,GAAAk3B,EAAAoB,EAAAC,GAEArB,EAAA3vC,OAAAqI,EAAAoG,EAAAsiC,EAAAC,GAEA,QAAAhL,GAAA7zB,GAEA,OAAAq/B,GAAAlyC,EAAAkyC,KAEAA,EAAAr/B,GAGA,QAAA8+B,GAAAC,EAAAC,EAAAC,GAEAF,EAEAzkC,EAAA+kC,GAIAljC,EAAAkjC,EAAArwC,EAAAiwC,GAAAA,EAAAlwC,KAAA6uC,oBAtBA,GAAAsB,GAAAnwC,KAAA0vC,kBAAAvoC,GAAA,GACAmpC,EAAA,IAyBAtwC,MAAAowC,UAAAD,EAAAnwC,KAAAmvC,cAAA53B,EAAAutB,EAAAjkC,EAAAkvC,IAGAviC,OAAA,SAAArG,EAAAoG,EAAAhC,EAAA6B,GAKA,QAAAmK,GAAAk3B,EAAAoB,EAAAC,GAEArB,EAAAjhC,OAAArG,EAAAoG,EAAAsiC,EAAAC,GAEA,QAAAhL,GAAA7zB,GAEA,OAAAq/B,GAAAlyC,EAAAkyC,KAEAA,EAAAr/B,GAGA,QAAA8+B,GAAAC,EAAAC,EAAAC,GAEAF,EAEAzkC,EAAA+kC,GAIAljC,EAAAkjC,EAAArwC,EAAAiwC,GAAAA,EAAAlwC,KAAA8uC,oBAtBA,GAAAqB,GAAAnwC,KAAA0vC,kBAAAvoC,GAAA,GACAmpC,EAAA,IAyBAtwC,MAAAowC,UAAAD,EAAAnwC,KAAAovC,cAAA73B,EAAAutB,EAAAjkC,EAAAkvC,IAGAtiC,OAAA,SAAAtG,EAAAoE,EAAA6B,GAKA,QAAAmK,GAAAk3B,EAAAoB,EAAAC,GAEArB,EAAAhhC,OAAAtG,EAAA0oC,EAAAC,GAEA,QAAAhL,GAAA7zB,GAEA,OAAAq/B,GAAAlyC,EAAAkyC,KAEAA,EAAAr/B,GAGA,QAAA8+B,GAAAC,EAAAC,EAAAC,GAEAF,EAEAzkC,EAAA+kC,GAIAljC,EAAAkjC,EAAArwC,EAAAiwC,GAAAA,EAAAlwC,KAAA+uC,oBAtBA,GAAAoB,GAAAnwC,KAAA0vC,kBAAAvoC,GAAA,GACAmpC,EAAA,IAyBAtwC,MAAAowC,UAAAD,EAAAnwC,KAAAqvC,cAAA93B,EAAAutB,EAAAjkC,EAAAkvC,IAGAriC,MAAA,SAAAC,EAAAD,EAAAnC,EAAA6B,GAKA,QAAAmK,GAAAk3B,EAAAoB,EAAAC,GAEArB,EAAA/gC,MAAAC,EAAAD,EAAAmiC,EAAAC,GAEA,QAAAhL,GAAAl2B,GAEAxR,EAAAwR,IAEA/D,EAAAvL,KAAAL,MAAA4L,EAAA+D,GAGA,QAAAmhC,GAAAC,EAAAC,EAAAC,GAEAF,GAAAnlC,EAAA9N,SAAAiD,KAAAsvC,aAEA/jC,EAAAV,GAEAolC,GAEA7iC,EAAAvC,EAAA5K,EAAAiwC,GAAAA,EAAAlwC,KAAAgvC,mBAtBA,GAAAmB,GAAAnwC,KAAA4vC,kBAAAjiC,EAAAD,GACA7C,IAyBA7K,MAAAowC,UAAAD,EAAAnwC,KAAAsvC,aAAA/3B,EAAAutB,EAAAjkC,EAAAkvC,IAGAK,UAAA,SAAAD,EAAAI,EAAAh5B,EAAAutB,EAAAE,EAAA+K,GAOA,QAAAS,OAEAlW,IAAA6V,EAAApzC,QAEAgzC,EAAAxyC,KAAAyC,KAAAgwC,EAAAS,EAAAP,GAGA,QAAAL,GAAA5+B,IAEA++B,IAAAO,IAEAzL,EAAA7lC,MAAAe,KAAA7C,WAGAqzC,IAEA,QAAAV,GAAA7+B,EAAA2B,GAEAo9B,IAEAA,GAAA,EAEAO,IAEAE,GAAA,EACAzL,EAAA/lC,MAAAe,KAAA7C,aAIAmD,EAAAsS,KAAAs9B,IAAAl0C,GAAAk0C,EAAAt9B,KAEAs9B,EAAAt9B,GAGA49B,IAvCA,GAAAR,IAAA,EACAS,GAAA,EACAP,EAAAl0C,EACAs+B,EAAA,CAuCA,IAAAl9B,EAAA+yC,IAAA,IAAAA,EAAApzC,OAMA,IAAA,GAAAF,GAAA,EAAAA,EAAAszC,EAAApzC,OAAAF,IAEA0a,EAAAha,KAAAyC,KAAAmwC,EAAAtzC,GAAAgzC,EAAAC,OANAC,GAAAxyC,KAAAyC,MAAA,GAAA,EAAAkwC,MuBxSAnpC,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAoBAkB,EAAAgG,IAAA,WAEA,MAAAJ,GAAA6B,UCtBA7H,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GA8BAkB,EAAAupC,KAAA,SAAAl8B,GAEA,MAAApX,GAAAoX,GAEA,GAAA3F,IAAA9B,EAAAyH,GAAA,GAEApW,EAAAoW,GAEAzH,EAAAsf,cAAA7X,GAGAA,KCzCAzN,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAyBAkB,EAAAnK,QAAA,SAAAC,GAEA,GAAA2R,GAAAzR,UAAAJ,OAAA,IAAAK,EAAAH,GACAqR,GAAAhR,MAAAC,KAAAJ,WAAAF,CAEA,OAAA,IAAA4R,IAAA9B,EAAA6B,MC9BA7H,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAyBAkB,EAAArI,OAAA,SAAAyI,GAEA,GAAAopC,GAAAvyC,EAAAmJ,GACAwF,EAAAwhB,YAAAhnB,GACAwF,EAAAuf,aAIA,OAFAqkB,GAAAp4B,QAEAo4B,KzBjCA5pC,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAEA,GAAA2qC,GAAA7oC,EAAA9B,EAAAkgC,QAAA/lC,GAAAoO,SAAA23B,QAEA,KAAA3kC,EAAAovC,GAEA,IAAA,GAAAnsC,KAAAmsC,GAEAt6B,GAAAnP,EAAA9J,UAAAoH,EAAAmsC,EAAAnsC,MCRAsC,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAEA,GAAArC,GAAAmE,EAAA9B,EAAArC,OAAAxD,GAAAoO,SAAA5K,OAEA,KAAApC,EAAAoC,GACA,CACA,GAAAitC,MACAC,IAEA,KAAA,GAAAt5B,KAAA5T,GACA,CACA,GAAAI,GAAAJ,EAAA4T,GACA7S,EAAAsF,GAAAuN,GAEAu5B,EAAA3wC,GAAA0K,OAAAnG,GACAqsC,EAAA3wC,GAAAyK,OAAAnG,EAEAosC,IAEA55B,GAAA45B,EAAA/sC,GAAA,EAAA8sC,GAGAE,GAEA75B,GAAA65B,EAAAhtC,GAAA,EAAA6sC,GAMA,GAFAn5B,GAAA3K,EAAA+jC,GAEAD,EAAA9zC,OACA,CACA,GAAA6X,GAAAzN,EAAA9J,UAAAuX,KAEAlV,IAAAyH,EAAA9J,UAAA,QAAA,WAEAuX,EAAA3V,MAAAe,KAAA7C,WAEAua,GAAA1X,KAAA6wC,SyBtCA9pC,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAaA,QAAAgrC,GAAA3qC,GAEAL,EAAAK,KAEAyG,EAAAzG,GAAA4qC,EAAA5qC,IAIA,QAAA6qC,GAAA7qC,GAEA,GAAA8qC,GAAArkC,EAAAzG,GACA+qC,EAAAH,EAAA5qC,EAEA,KAAA,GAAA/E,KAAA8vC,GAEA9vC,IAAA6vC,KAEAA,EAAA7vC,GAAA8vC,EAAA9vC,IAKA,QAAA+vC,GAAArrC,EAAAsrC,GAKA,IAAA,GAHArwB,GAAAgwB,EAAAK,GAAAtrC,GACA1G,EAAAwN,EAAA9G,GAEApJ,EAAAqkB,EAAAnkB,OAAA,EAAAF,GAAA,EAAAA,IACA,CACA,GAAAa,GAAAlB,EAAA+C,EAAA2hB,EAAArkB,GAEAa,MAAA,GAEA6B,EAAA2F,OAAAxH,EAAA,GAGA6B,EAAAmP,QAAAwS,EAAArkB,KA/CA,GAAAwB,GAAA4H,EAAA5H,QAAA+B,GAAAoO,SAAAnQ,MAEA,IAAA8B,EAAA9B,GAAA,CAKA,GACA6yC,IADA9wC,GAAAoO,SACAnQ,EAAA+B,UACAoxC,EAAAN,EAAAjrC,OA0CAgrC,GAAA,gBACAE,EAAA,YACAA,EAAA,iBACAF,EAAA,iBACAA,EAAA,cACAA,EAAA,eACAA,EAAA,SACAA,EAAA,YACAA,EAAA,eACAE,EAAA,aACAA,EAAA,aACAF,EAAA,aACAK,EAAA,UACAA,EAAA,aAAA,UAEArrC,EAAAvJ,YAEAqQ,EAAAgD,cAAAyhC,EAAA90C,WAAA80C,EAAAxhC,sBAGA/J,EAAAiK,UAEAnD,EAAAkD,YAAAuhC,EAAAthC,UAGAjK,EAAAmK,WAEArD,EAAAoD,aAAAqhC,EAAAphC,UAGA,KAAA,GAAAvO,KAAAqvC,GAAA7gC,UAEA,KAAAxO,IAAAkL,GAAAsD,WAAA,CAKA,GAAAQ,GAAAqgC,EAAA7gC,UAAAxO,GACA4vC,EAAA,GAAA5gC,GAAAlS,WAEA8yC,GAAA3gC,KAAA/D,EAAAlL,EAAAgP,EAAA5K,SAEAwrC,EAAA1gC,MAEAhE,EAAAuC,WAAAhQ,KAAAuC,GAGAkL,EAAAsD,UAAAxO,GAAA4vC,EACA1kC,EAAAuD,cAAAhR,KAAAuC,GAGAkL,EAAAC,KAAAjG,GAAAiG,KAAAD,GACAA,EAAA4C,MAAA5I,GAAA4I,MAAA5C,GACAA,EAAA8C,KAAA9I,GAAA8I,KAAA9C,MC1GAhG,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GA8BAkB,EAAAuqC,MAAA,SAAAl9B,EAAAxQ,EAAAjD,GAEA,GAAA0N,GAAA1B,EAAAsH,kBAAAG,GACAm8B,EAAA5jC,EAAApC,IAAA8D,EAYA,IAVAkiC,IAEAA,EAAA5jC,EAAAif,mBAAAvd,GAEArQ,EAAAoW,IAEAm8B,EAAAzkB,KAAA1X,IAIAtU,EAAA8D,GACA,CACA,GAAA2tC,GAAA5wC,GAAAf,IAEA2wC,GAAAl+B,MAAApS,GAAAyK,OAAAmhB,WAAA,WAEAjoB,EAAAzG,KAAAo0C,EAAAhB,KAMA,MAFAA,GAAAxkB,WAEAwkB,KCzDA5pC,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GA4BAkB,EAAAyqC,SAAA,SAAA5tC,EAAAjD,GAIA,MAFAgM,GAAAoiB,QAAAnrB,EAAAjD,GAEAgM,EAAA6B,U1BhCA7H,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAEA,GAAA4rC,GAAA5rC,EAAA4rC,OAAAzxC,GAAAoO,SAAAqjC,KAEA,IAAAzzC,EAAAyzC,GAAA,CAKA,IAAAj6B,KAIA,WAFA7Q,IAAAjB,QAAAiB,GAAA+D,OAAAsO,kBAKA,KAAA,GAAAO,KAAAk4B,GACA,CACA,GAAAC,GAAAD,EAAAl4B,EAEAtd,GAAAy1C,KAEAA,GACA9lC,KAAA8lC,IAIA/kC,EAAAuE,UAAAqI,GAAAo4B,GAAAD,EAAA9lC,MAAAe,EAAA+kC,GACA/kC,EAAAoE,UAAAwI,GAAAD,OAkBA3S,GAAAoS,kBAEApS,GAAA+D,OAAAsO,kBAAA,sBACArS,GAAA+D,OAAAknC,aAAA,iBACAjrC,GAAA+D,OAAAmnC,cAAA,kBACAlrC,GAAA+D,OAAA2O,YAAA,eAMA1S,GAAAmrC,iBAAA,SAAArwC,EAAArC,GAEAuH,GAAAoS,eAAAtX,GAAArC,GAGAuH,GAAA8S,gBAEA,mBAAA,OAAA,OAAA,OAuJA,IAAAk4B,KAEAI,KAAA,SAAAplC,EAAA9G,GAEA,MAAA+S,IAAA,aAAAd,GAAAjS,IAEAmsC,QAAA,SAAArlC,EAAA9G,GAEA,MAAA+S,IAAA,gBAAAd,GAAAjS,IAEAosC,OAAA,SAAAtlC,EAAA9G,GAEA,MAAA+S,IAAA,gBAAAb,GAAAlS,IAEAqsC,SAAA,SAAAvlC,EAAA9G,GAEA,MAAA,UAAAuO,EAAArN,EAAA1C,GAEA,GAAAgU,GAAAT,GAAAxD,GACAqE,EAAA9R,GAAAoS,eAAAlT,EAAA4S,UAEA,KAAAA,EAEA,KAAA,wCAGA,IAAAJ,KAAA,EACA,CACA,GAAAnY,EAAA2F,EAAAssC,WAAAjyC,EAAAmY,EAAA8G,OAAA9G,EAAA8G,KAAAtZ,EAAAssC,SAIA,MAFAxrC,IAAAjB,QAAAiB,GAAA+D,OAAAknC,cAAAv5B,EAAAtR,EAAA1C,IAEAzI,CAGA,IAAAoB,EAAA6I,EAAAusC,QAAAn2C,EAAAoc,EAAAzM,OAAAxP,EAAAyJ,EAAAusC,MAAA/5B,EAAAzM,SAAA,EAIA,MAFAjF,IAAAjB,QAAAiB,GAAA+D,OAAAmnC,eAAAx5B,EAAAtR,EAAA1C,IAEAzI,CAGA,IAAAkI,GAAAlI,EACA8c,GAAA,CAiBA,OAfAD,GAAA45B,YAAAh6B,EAAAtR,EAAA1C,EAAA,SAAA2B,GAEAoS,GAAArR,EAAA1C,EAAA2B,EAAAqS,EAAAxS,GAEA/B,EAAA0U,GAAAC,EAAAzS,EAAAe,EAAA1C,EAAAwB,GAEA6S,IAEA3R,EAAA1C,GAAAP,EACAkU,GAAAjR,EAAAlB,MAIA6S,GAAA,EAEA5U,EAEA,MAAA9F,GAAAoW,IAAAA,EAAA+E,SAEAxS,IAAAjB,QAAAiB,GAAA+D,OAAA2O,aAAAjF,EAAArN,EAAA1C,KAIA+T,GAAArR,EAAA1C,EAAA+P,EAAA,KAAAvO,GAEA2S,GAAAC,EAAArE,EAAArN,EAAA1C,EAAAwB,M2B7RAc,IAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAGAkB,EAAAmpB,SAAA,SAAAmI,EAAAC,EAAAC,GAEA,MAAA5rB,GAAA6B,OAAA0hB,SAAAmI,EAAAC,EAAAC,MCLA5xB,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAEAkB,EAAAurC,KAAA,SAAAja,EAAAC,EAAAC,GAEA,MAAA5rB,GAAA6B,OAAAkrB,WAAArB,EAAAC,EAAAC,MCJA5xB,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAmCAkB,EAAAwD,IAAA,SAAA6J,EAAAxQ,EAAAjD,GAEA,MAAAb,GAAA8D,OAEA+I,GAAA+e,UAAAtX,EAAAxQ,EAAAjD,GAIAgM,EAAApC,IAAA6J,MC3CAzN,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAgCAkB,EAAAG,KAAA,SAAAkN,EAAAxQ,EAAAjD,GAEA,GAAA4wC,GAAA5wC,GAAAf,KACA2wC,EAAA5jC,EAAApC,IAAA6J,EAqBA,OAnBAm8B,GAEA3sC,EAAAzG,KAAAo0C,EAAAhB,GAIA5jC,EAAA+e,UAAAtX,EAAA,SAAAm8B,GAEAA,EAEA3sC,EAAAzG,KAAAo0C,EAAAhB,GAIAxpC,EAAAuqC,MAAAl9B,EAAAxQ,EAAAjD,KAKA4vC,KCxDA5pC,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GA2BAkB,EAAAwrC,QAAA,SAAA3uC,EAAAjD,GAEA,GAAA4wC,GAAA5wC,GAAAf,KACA4O,EAAA7B,EAAA6B,MAwBA,OAtBAA,GAAA7R,OAEAiH,EAAAzG,KAAAo0C,EAAA/iC,GAIA7B,EAAA2e,MAAA,WAEA9c,EAAA7R,OAEAiH,EAAAzG,KAAAo0C,EAAA/iC,GAIA7B,EAAAoiB,QAAA,WAEAnrB,EAAAzG,KAAAo0C,EAAA/iC,OAMAA,KCtDA7H,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAEA,GAAAzG,GAAAuI,EAAA9B,EAAAzG,QAAAY,GAAAoO,SAAAhP,QAEAgC,GAAAhC,IAEAd,EAAAyI,EAAA9J,UAAAmC,KCNAuH,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAiCAkB,EAAAukB,MAAA,SAAA1nB,EAAAjD,EAAA4qB,GAEA5e,EAAA2e,MAAA1nB,EAAAjD,EAAA4qB,MCnCA5kB,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAyBAkB,EAAAgoB,QAAA,SAAAnrB,EAAAjD,GAEA,MAAAgM,GAAAoiB,QAAAnrB,EAAAjD,MC3BAgG,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAoCAkB,EAAAqgC,OAAA,SAAA75B,EAAA1H,EAAAsB,EAAAoN,GAEA,MAAA,IAAAD,IAAA3H,EAAAY,EAAA1H,EAAAsB,EAAAoN,MCtCA5N,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GA4CAkB,EAAAyrC,YAAA,SAAAjlC,EAAA1H,EAAAsB,EAAAoN,GAEA,MAAA,IAAAE,IAAA9H,EAAAY,EAAA1H,EAAAsB,EAAAoN,MC9CA5N,GAAAjD,GAAAiD,GAAA+D,OAAAC,QAAA,SAAA9E,GAEA,GAAAwoC,GAAAxoC,EAAAwoC,OAAAruC,GAAAoO,SAAAigC,KAEArwC,GAAAqwC,KAKAxoC,EAAAyJ,WAAA3I,GAAA0nC,MAAAA,MpCTA1nC,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAYA,QAAA4sC,KAEA,MAAA74B,IAAA,GAAAtZ,MAAAoyC,GAGA,QAAAxnB,GAAApvB,GAEA,GAAAqR,GAAAyM,GAAA9d,EAAA62C,EAEA,OAAAxlC,IAAArR,EAGA,QAAAqvB,GAAArvB,GAEA,GAAAkxB,GAAApT,GAAA9d,EAAA42C,EAAAE,EAEA,OAAA5lB,IAAAlxB,EAGA,QAAA+2C,GAAAt5B,GAEA,GAAA9c,GAAAL,EAAAuQ,EAAA3F,OAAAuS,EAEA9c,MAAA,IAEAkQ,EAAA3F,OAAA9H,KAAAqa,GACA5M,EAAAuC,WAAAhQ,KAAAqa,IAGAA,IAAA5M,GAAA7G,WAEA6G,EAAA7G,SAAAyT,GAAAk5B,IAEAE,GAAAp5B,IAAA5M,GAAAoE,YAEApE,EAAAoE,UAAAwI,GAAA2R,IAEAwnB,GAAAn5B,IAAA5M,GAAAuE,YAEAvE,EAAAuE,UAAAqI,GAAA4R,GAIA,QAAA2nB,GAAAv5B,GAEAs5B,EAAAt5B,GAEA5M,EAAAge,cAAApR,IAAA,EAGA,QAAAw5B,GAAAx5B,GAEAs5B,EAAAt5B,GAEA5M,EAAAge,cAAApR,IAAA,EAEAha,EAAAwH,EAAA9J,UAAA,QAAA,SAAAkb,GAEA,MAAA,YAEAvY,KAAA2Z,GAAAk5B,IAEAt6B,EAAAtZ,MAAAe,KAAA7C,cAKA,QAAAi2C,GAAApnC,EAAA2N,GAEA,OAAA3N,GACA,IAAA,aACA,MAAAknC,GAAAv5B,EACA,KAAA,aACA,MAAAw5B,GAAAx5B,EACA,SACA,MAAAs5B,GAAAt5B,IArFA,GAAA05B,GAAAptC,EAAAqtC,YAAAlzC,GAAAoO,SAAA8kC,WACAP,EAAA9sC,EAAAstC,iBAAAnzC,GAAAoO,SAAA+kC,gBACAT,EAAA7sC,EAAAutC,eAAApzC,GAAAoO,SAAAglC,cACAR,EAAA/sC,EAAAwtC,cAAArzC,GAAAoO,SAAAilC,YAEA,IAAAJ,EAoFA,GAAAh3C,EAAAg3C,GAEAD,EAAAC,EAAAA,OAEA,IAAAj2C,EAAAi2C,GAEA,IAAA,GAAAx2C,GAAA,EAAAA,EAAAw2C,EAAAt2C,OAAAF,IAEAu2C,EAAAC,EAAAx2C,GAAAw2C,EAAAx2C,QAGA,IAAAuB,EAAAi1C,GAEA,IAAA,GAAA9xC,KAAA8xC,GAEAD,EAAA7xC,EAAA8xC,EAAA9xC,QAKA2xC,GAAA,cACAC,EAAA,eAKA,IAAAj5B,KACAxZ,KAAA,OACAyZ,OAAA,SACAC,QAAA,UAGAha,IAAAoO,SAAA+kC,gBAAAr5B,GAAAC,OACA/Z,GAAAoO,SAAAglC,cAAAt5B,GAAAxZ,KACAN,GAAAoO,SAAAilC,cAAA,EA6BA1sC,GAAAmT,UAAAA,GACAnT,GAAAsT,WAAAxZ,EACAkG,GAAAiT,YAAAA,GqC5JAjT,GAAAjD,GAAAiD,GAAA+D,OAAAM,QAAA,SAAAjE,EAAA4F,EAAA9G,GAcA,QAAAiV,GAAAvB,GAEA,MAAA+5B,GAAA/5B,IAAAA,EAdA,GAAAg6B,GAAA1tC,EAAA0tC,YAAAvzC,GAAAoO,SAAAmlC,UAEA,KAAAnyC,EAAAmyC,GAAA,CAKA,GAAAt1B,GAAAs1B,EAAAt1B,UACAu1B,EAAAD,EAAAC,aACAF,EAAAC,EAAAD,YACAG,IAAAF,EAAAE,QAOA9mC,GAAA+mC,cAEA,KAAA,GAAAn6B,KAAA0E,GAEAtR,EAAA+mC,YAAAn6B,GAAAoB,GAAAwD,WAAAF,EAAA1E,GAAAA,EAAA5M,EAAAmO,EAAA04B,EAAAj6B,GAGAja,IAAAyH,EAAA9J,UAAA,YAAA,WAEA,GAAAmH,GAAAxE,IAEAA,MAAAkuB,SAAA7tB,GAAAyK,OAAAipC,aAAA/zC,OAEAA,KAAAg0C,QAAA,EACAh0C,KAAAi0C,gBACAj0C,KAAAk0C,oBAAAn3C,OAAA,CAEA,KAAA,GAAA4c,KAAA5M,GAAA+mC,YAmBA,IAAA,GAjBAK,GAAApnC,EAAA+mC,YAAAn6B,GACAvT,EAAApG,KAAA2zB,KAAAha,GACAy6B,GAAA,EAEA74B,EAAA,SAAAJ,GAGAA,GAAAi5B,IAEAA,GAAA,EAEA5vC,EAAAyvC,aAAAt6B,GAAAwB,EACA3W,EAAA0vC,oBAAA50C,KAAA6b,GACA3W,EAAAwvC,QAAA,IAIAn3C,EAAA,EAAAA,EAAAs3C,EAAAp3C,QAAAq3C,GAAAhuC,IAAA2U,GAAA2D,KAAA7hB,IAEAuJ,EAAA+tC,EAAAt3C,GAAAuJ,EAAApG,KAAAub,EAMA,OAFAvb,MAAAkuB,SAAAluB,KAAAg0C,OAAA3zC,GAAAyK,OAAAupC,aAAAh0C,GAAAyK,OAAAwpC,cAAAt0C,OAEAA,KAAAg0C,SAGAr0C,EAAAwH,EAAA9J,UAAA,QAAA,SAAAuX,GAEA,MAAA,YAMA,MAJA5U,MAAAg0C,OAAAh4C,EACAgE,KAAAi0C,gBACAj0C,KAAAk0C,uBAEAt/B,EAAA3V,MAAAe,KAAA7C,cAIA02C,GAEAl0C,EAAAwH,EAAA9J,UAAA,QAAA,SAAAkb,GAEA,MAAA,YAEA,MAAAvY,MAAA0wB,cAEA3pB,GAAA4E,MAAA5E,GAAA6E,OAAAkX,aAAA9iB,KAAA+R,IAAA/R,MAEAwP,GAAA9D,QAAA1L,OAGAA,KAAAu0C,YAKAh8B,EAAAtZ,MAAAe,KAAA7C,WAHAqS,GAAA9D,QAAA1L,YASAK,GAAAyK,OAAAipC,YAAA,eAEA1zC,GAAAyK,OAAAupC,aAAA,gBAEAh0C,GAAAyK,OAAAwpC,aAAA,eAEA,IAAAv5B,KAEAC,SACAw5B,cACAC,eACAC,UAAA,QACAC,OAAA,KACAC,cAAA,IACAl2B,QAEAH,WAAA,SAAAF,EAAA1E,EAAA3O,EAAAkQ,EAAAC,GAEA,GAAAmD,KAOA,IALAjiB,EAAAgiB,KAEAA,EAAA/hB,GAAA+hB,EAAAre,KAAA00C,UAAA10C,KAAA20C,SAGAv3C,EAAAihB,GAEA,IAAA,GAAAxhB,GAAA,EAAAA,EAAAwhB,EAAAthB,OAAAF,IACA,CACA,GAAAg4C,GAAAx2B,EAAAxhB,GACAo9B,EAAAj6B,KAAA80C,UAAAD,EAAAl7B,EAAA3O,EAAAkQ,EAAAC,EAEAmD,GAAAhf,KAAA26B,OAGA,IAAA77B,EAAAigB,GAEA,IAAA,GAAAw2B,KAAAx2B,GACA,CACA,GAAA02B,GAAA12B,EAAAw2B,GAEAG,EAAA52C,EAAA22C,GAAAA,EAAA55B,QACA9e,EAAA04C,GAAAA,EAAA/4C,EAEAi5C,EAAA72C,EAAA22C,IAAAA,EAAA55B,QAAA45B,EAAAvgC,MACAnY,EAAA04C,GAAA/4C,EAAA+4C,EAEA9a,EAAAj6B,KAAA80C,UAAAD,EAAAl7B,EAAA3O,EAAAkQ,EAAA85B,GAAA75B,EAAA85B,EAEA32B,GAAAhf,KAAA26B,GAIA,MAAA3b,IAGAw2B,UAAA,SAAAD,EAAAl7B,EAAA3O,EAAAkQ,EAAAC,EAAA3G,GAEA,GAAA4J,GAAAy2B,EAAAr4C,QAAAwD,KAAA40C,eACAh6B,EAAA,KAAAwD,EAAAy2B,EAAAA,EAAAzzC,UAAA,EAAAgd,EAEA,IAAA,MAAAxD,EAAAtY,OAAA,GAEA,MAAAtC,MAAAk1C,gBAAAt6B,EAAAjB,EAAA3O,EAAAkQ,EAAAC,EAGA,IAAAg6B,GAAA,KAAA/2B,EAAA5J,EAAAqgC,EAAAzzC,UAAAgd,EAAA,GACAg3B,EAAAr6B,GAAAC,MAAAJ,EAEA,KAAAw6B,EAEA,KAAAx6B,GAAA,sBAGA,OAAAw6B,GAAAz7B,EAAAw7B,EAAAnqC,EAAAkQ,EAAAC,IAGA6B,gBAAA,SAAAzU,EAAAyC,GAIA,IAAA,GAFAqqC,GAAAt6B,GAAA05B,YAEA53C,EAAA,EAAAA,EAAAw4C,EAAAt4C,OAAAF,IACA,CACA,GAAAy4C,GAAAD,EAAAx4C,GACA04C,EAAAD,EAAA/sC,EAAAyC,EAEA,IAAA9K,EAAAq1C,GAEA,MAAAA,GAIA,MAAA10C,IAGAq0C,gBAAA,SAAAvxC,EAAAgW,EAAA3O,EAAAkQ,EAAAC,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAEA,GAAArX,GAAAiD,EAAAxD,GAAAyC,EAAA8U,EAAAC,EAOA,OALA9e,GAAA6H,IAEAqX,EAAArX,GAGAkC,IAOAW,IAAAgU,WAAAA,GAEAhU,GAAA4T,cAAAA,GACA5T,GAAA8X,mBAAAA,GACA9X,GAAAuV,wBAAAA,GACAvV,GAAA+V,kBAAAA,GACA/V,GAAAoW,uBAAAA,GACApW,GAAA2W,oBAAAA,GACA3W,GAAAgX,qBAAAA,GACAhX,GAAAmX,iBAAAA,GACAnX,GAAA4X,kBAAAA,GACA5X,GAAA2Y,mBAAAA,GACA3Y,GAAA6Y,kBAAAA,GAEA7Y,GAAA4U,aAAAA,GACA5U,GAAAuT,cAAAA,GACAvT,GAAAwT,YAAAA,GACAxT,GAAAyT,WAAAA,GACAzT,GAAA2T,SAAAA,GACA3T,GAAAuU,iBAAAA,GACAvU,GAAAiV,aAAAA,GACAjV,GAAAqU,cAAAA,GACArU,GAAA2U,gBAAAA,GC7OAX,GAAAy5B,WAAAv6B,KACAc,GAAA05B,YAAAn1C,KAAA,SAAAiJ,EAAAyC,GAEA,GAAAzI,GAAAyG,GAAAT,EAEA,IAAAhG,KAAA,EACA,CACA,GAAA0a,GAAA1a,EAAAd,SAEA,OAAA,UAAA2E,EAAAe,GAEA,MAAA8V,OAGA,ECdAlC,GAAAy5B,WAAA76B,MACAoB,GAAA05B,YAAAn1C,KAAA,SAAAiJ,EAAAyC,GAEA,MAAAxO,GAAAwO,EAAA5D,OAAAmB,GAEA,SAAAnC,EAAAe,GAEA,MAAAA,GAAAwsB,KAAAprB,IAJA,SAOA,CCTA,IAAAitC,IAAA,6BAEAC,IACAC,GAAA,EACAC,YAAA,EACAC,aAAA,EACAC,EAAA,IACA3zC,OAAA,IACA4zC,QAAA,IACApc,IAAA,IACAqc,KAAA,IACAC,OAAA,IACAC,QAAA,IACAC,GAAA,KACAC,KAAA,KACAC,MAAA,KACAC,IAAA,MACAC,KAAA,MACAC,GAAA,OACAC,KAAA,OACAC,MAAA,OACAC,OAAA,WAAA,YACAC,QAAA,WAAA,YACAC,IAAA,cAAA,eACAC,MAAA,cAAA,eACAC,OAAA,cAAA,eAGA/7B,IAAAy5B,WAAAuC,SACAh8B,GAAA05B,YAAAn1C,KAAA,SAAAiJ,EAAAyC,GAEA,GAAAzI,GAAAizC,GAAAwB,KAAAzuC,EAEA,IAAA,OAAAhG,EACA,CACA,GAAA00C,GAAAztC,WAAAjH,EAAA,IACA20C,EAAA30C,EAAA,GACA40C,EAAA1B,GAAAyB,EAEA,KAAAC,EAEA,KAAAD,GAAA,uBAGA,OAAA,UAAA9wC,EAAAe,GAEA,GAAA4vC,GAAA,GAAAr2C,KAEA,IAAAJ,EAAA62C,GAEAJ,EAAAK,QAAAL,EAAAt1C,UAAA01C,EAAAF,OAGA,CACA,GAAAI,GAAAF,EAAA,GACA39B,EAAA29B,EAAA,EAEAJ,GAAAv9B,GAAAu9B,EAAAM,KAAAJ,GAGA,MAAAF,GAAAt1C,cAGA,EChEAsZ,GAAAy5B,WAAA8C,MACAv8B,GAAA05B,YAAAn1C,KAAA,SAAAiJ,EAAAyC,GAEA,MAAA,UAAAzC,EAEA,SAAAnC,EAAAe,GAEA,GAAAmwC,GAAA,GAAA52C,KAIA,OAFA8Z,IAAA88B,GAEAA,EAAA71C,WARA,SAWA,ECdAsZ,GAAAy5B,WAAA+C,SACAx8B,GAAA05B,YAAAn1C,KAAA,SAAAiJ,EAAAyC,GAEA,MAAA,aAAAzC,EAEA,SAAAnC,EAAAe,GAEA,GAAAowC,GAAA,GAAA72C,KAKA,OAHA62C,GAAAC,QAAAD,EAAAE,UAAA,GACAj9B,GAAA+8B,GAEAA,EAAA91C,WATA,SAYA,ECfAsZ,GAAAy5B,WAAAkD,UACA38B,GAAA05B,YAAAn1C,KAAA,SAAAiJ,EAAAyC,GAEA,MAAA,cAAAzC,EAEA,SAAAnC,EAAAe,GAEA,GAAAuwC,GAAA,GAAAh3C,KAKA,OAHAg3C,GAAAF,QAAAE,EAAAD,UAAA,GACAj9B,GAAAk9B,GAEAA,EAAAj2C,WATA,SAYA,ECdAsZ,GAAAC,MAAA28B,SAAA,SAAAh+B,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEAC,GAAA,WAAAzB,EAAAsB,EAEA,IAAAI,GAAAC,GAAA,WAAAH,GACAy8B,EAAA78B,GAAAC,MAAA28B,SAAAC,UAEA,OAAA,UAAAxxC,EAAAe,EAAAoU,GAEA,GAAAs8B,IAAAzxC,EAAA,IAAA0xC,cACAH,EAAAC,EAAAC,EAOA,OALAF,IAEAp8B,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,IAGAjV,IAIA2U,GAAAC,MAAA28B,SAAAx8B,QAAA,kCAEAJ,GAAAC,MAAA28B,SAAAC,YAEAG,GAAA,EACAC,KAAA,EACAl0C,IAAA,EACAm0C,GAAA,EACAC,QAAA,G1C7BA57B,GAAA,WACA,8EACA,SAAAlW,EAAAe,EAAAoV,EAAAC,EAAA1V,GAEA,OAAAV,EAAAq1B,SAAA,SAAA0c,GAEA,MAAAA,KAAAhxC,GAAAL,EAAA0V,EAAA27B,EAAAxkB,KAAApX,QAMAD,GAAA,eACA,sEACA,SAAAlW,EAAAe,EAAAoV,EAAAC,EAAA1V,GAEA,MAAAV,GAAAq1B,SAAA,SAAA0c,GAEA,MAAAA,KAAAhxC,GAAAL,EAAA0V,EAAA27B,EAAAxkB,KAAApX,QAwEAxB,GAAAC,MAAAo9B,SAAA,SAAAz+B,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAGA,GAAAk9B,GAAAp9B,GAAA,UACAI,EAAAC,GAAA,WAAAH,EAEA,OAAA,UAAA/U,EAAAe,EAAAoU,GAEA,GAAAne,EAAAgJ,GACA,CAGA,IAAA,GAFAkyC,GAAA,GAAA96C,IAEAX,EAAA,EAAAA,EAAAuJ,EAAArJ,OAAAF,IACA,CACA,GAAAsK,GAAAf,EAAAvJ,EAEAsK,IAAAA,EAAAotC,YAAAptC,EAAAotC,aAEA+D,EAAAh5C,KAAA6H,GAIA,GAAAmxC,EAAAv7C,OAEA,OAAAs7C,GAEA,IAAA,SACA98B,EAAA+8B,EACA,MACA,KAAA,cACA/8B,EAAA+8B,EAAA5d,MAAA,eAAA,SACA,MACA,SACAnf,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,KAMA,MAAAjV,KAIA2U,GAAAC,MAAAo9B,SAAAj9B,QAAA,yBCrIA2B,GAAA,QACA,kCACA,SAAA1W,EAAA6T,GACA,MAAA7T,GAAAsU,GAAAT,KAKA6C,GAAA,WACA,8CACA,SAAA1W,EAAA6T,GACA,MAAAA,GAAA7T,IAKA0W,GAAA,SACA,mCACA,SAAA1W,EAAA6T,GACA,MAAA7T,GAAA6T,IAKA6C,GAAA,YACA,+CACA,SAAA1W,EAAA6T,GACA,MAAA7T,GAAAsU,GAAAT,KAKAU,GAAA,YACA,iCACA,SAAAvU,EAAAe,EAAAqU,GACA,GAAAjZ,GAAAyG,GAAA5C,GACAkyC,EAAA/1C,KAAA,CAIA,OAHA+1C,IACA98B,EAAAjZ,EAAAd,WAEA62C,ICvCAn7B,GAAA,cACA,wBACA,SAAA/W,EAAAe,EAAAwS,EAAAzc,EAAAma,GACA,GAAAw8B,GAAAx8B,EAAAlQ,EAAAwsB,KAAAha,GAEA,OAAAk6B,IAAAryC,EAAA4E,KAKA+W,GAAA,kBACA,wBACA,SAAA/W,EAAAe,EAAAwS,EAAAzc,EAAAma,GACA,GAAAw8B,IAAAx8B,EAAAlQ,EAAAwsB,KAAAha,GAEA,OAAAk6B,IAAAryC,EAAA4E,KChBAsX,GAAA,YACA,uCACA,SAAAtX,EAAAe,EAAAC,EAAAoU,GAGA,IAAA,GAFA+8B,IAAA,EAEA17C,EAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IAEAsG,EAAAiD,EAAAe,EAAAwsB,KAAAvsB,EAAAvK,OAEA07C,GAAA,EAIA,QAAAA,IAKA76B,GAAA,YACA,2CACA,SAAAtX,EAAAe,EAAAC,EAAAoU,GAGA,IAAA,GAFAg9B,IAAA,EAEA37C,EAAA,EAAAA,EAAAuK,EAAArK,OAAAF,IAEAsG,EAAAiD,EAAAe,EAAAwsB,KAAAvsB,EAAAvK,OAEA27C,GAAA,EAIA,QAAAA,IAKA96B,GAAA,WACA,GACA,SAAAtX,EAAAe,EAAAC,EAAAoU,GAGA,IAAA,GAFA/S,IAAA,EAEA5L,EAAA,EAAAA,EAAAuK,EAAArK,QAAA0L,EAAA5L,IAEAsK,EAAA8sC,aAAA7sC,EAAAvK,MAEA4L,GAAA,EASA,OALAA,IAEA+S,EAAAT,GAAA2D,OAGA,IAMAhB,GAAA,gBACA,wBACA,SAAAtX,EAAAe,EAAAC,EAAAoU,GAGA,IAAA,GAFAq4B,IAAA,EAEAh3C,EAAA,EAAAA,EAAAuK,EAAArK,SAAA82C,EAAAh3C,IAEA2E,EAAA2F,EAAAwsB,KAAAvsB,EAAAvK,OAEAg3C,GAAA,EAIA,OAAAA,IAAAryC,EAAA4E,KAMAsX,GAAA,oBACA,wBACA,SAAAtX,EAAAe,EAAAC,EAAAoU,GAGA,IAAA,GAFAq4B,IAAA,EAEAh3C,EAAA,EAAAA,EAAAuK,EAAArK,QAAA82C,EAAAh3C,IAEA2E,EAAA2F,EAAAwsB,KAAAvsB,EAAAvK,OAEAg3C,GAAA,EAIA,OAAAA,IAAAryC,EAAA4E,KAMAsX,GAAA,mBACA,wBACA,SAAAtX,EAAAe,EAAAC,EAAAoU,GAGA,IAAA,GAFAq4B,IAAA,EAEAh3C,EAAA,EAAAA,EAAAuK,EAAArK,SAAA82C,EAAAh3C,IAEA2E,EAAA2F,EAAAwsB,KAAAvsB,EAAAvK,OAEAg3C,GAAA,EAIA,OAAAA,IAAAryC,EAAA4E,KAMAsX,GAAA,uBACA,wBACA,SAAAtX,EAAAe,EAAAC,EAAAoU,GAGA,IAAA,GAFAq4B,IAAA,EAEAh3C,EAAA,EAAAA,EAAAuK,EAAArK,QAAA82C,EAAAh3C,IAEA2E,EAAA2F,EAAAwsB,KAAAvsB,EAAAvK,OAEAg3C,GAAA,EAIA,OAAAA,IAAAryC,EAAA4E,KClIA2X,GAAA,SACA,8DACA,SAAA3X,EAAAe,EAAAyH,EAAAoP,GAEA,OAAApP,EAAA6sB,SAAA,SAAA0c,GAEA,MAAAA,KAAAhxC,GAAAhE,EAAAiD,EAAA+xC,EAAAxkB,KAAA3V,QAMAD,GAAA,SACA,wDACA,SAAA3X,EAAAe,EAAAyH,EAAAoP,GAEA,MAAApP,GAAA6sB,SAAA,SAAA0c,GAEA,MAAAA,KAAAhxC,GAAAhE,EAAAiD,EAAA+xC,EAAAxkB,KAAA3V,QChBAE,GAAA,KACA,SAAAu6B,EAAAC,GACA,MAAAD,GAAA,IAKAv6B,GAAA,SACA,SAAAu6B,EAAAC,GACA,MAAAD,IAAAC,IAKAx6B,GAAA,SACA,SAAAu6B,EAAAC,GACA,MAAAA,GAAAD,IClBA95B,GAAA,KACA,mCACA,SAAAvY,EAAAe,EAAAyX,GAEA,OAAAA,EAAAxY,EAAAe,KAKAwX,GAAA,SACA,uCACA,SAAAvY,EAAAe,EAAAyX,GAEA,MAAAA,GAAAxY,EAAAe,KCbA0X,GAAA,WACAK,OAAA,4DACAC,OAAA,gDACAC,OAAA,wDAEA,SAAAhZ,EAAA2Y,EAAAC,GACA,MAAAD,GAAA3Y,GAAAA,EAAA4Y,IAKAH,GAAA,eACAK,OAAA,gEACAC,OAAA,oDACAC,OAAA,4DAEA,SAAAhZ,EAAA2Y,EAAAC,GACA,MAAA5Y,IAAA2Y,GAAAC,GAAA5Y,IChBAsZ,GAAA,QACA,sDACA,eAGAA,GAAA,aACA,kFACA,oBAGAA,GAAA,YACA,yDACA,kBAGAA,GAAA,QACA,iCACA,eAGAA,GAAA,MACA,+BACA,8FAGAA,GAAA,MACA,+BACA,2FAGAA,GAAA,QACA,wCACA,2EAyBA3E,GAAAC,MAAA2E,MAAA,SAAAhG,EAAAsB,EAAAjQ,EAAAkQ,EAAAC,GAEA,GAAAwE,EAEA,IAAAtjB,EAAA4e,GACA,CACA,GAAA1Y,GAAA,qBAAAy0C,KAAA/7B,EAEA1Y,KAEAod,EAAA,GAAA/e,QAAA2B,EAAA,GAAAA,EAAA,SAGA5B,GAAAsa,KAEA0E,EAAA1E,EAGA,KAAA0E,EAEA,KAAA1E,GAAA,uDAGA,IAAAI,GAAAC,GAAA,QAAAH,EAEA,OAAA,UAAA/U,EAAAe,EAAAoU,GAOA,MALAoE,GAAAjZ,KAAAN,IAEAmV,EAAAG,GAAA/B,EAAAuB,EAAAvB,GAAAvT,EAAAe,EAAAkU,IAGAjV,IAIA2U,GAAAC,MAAA2E,MAAAxE,QAAA,iCmC9FAR,GAAA,WACA,wBACA,SAAAvU,GACA,MAAA5E,GAAA4E,KlCHAwZ,GAAA,OACAV,OAAA,wDACAC,OAAA,uCACAC,OAAA,gDAEA,SAAAhZ,EAAA+Y,GACA,MAAAA,GAAA/Y,IAKAwZ,GAAA,gBACAV,OAAA,qDACAC,OAAA,2CACAC,OAAA,iDAEA,SAAAhZ,EAAA+Y,GACA,MAAAA,IAAA/Y,IAKAwZ,GAAA,OACAV,OAAA,wDACAC,OAAA,2CACAC,OAAA,oDAEA,SAAAhZ,EAAA+Y,GACA,MAAA/Y,GAAA+Y,IAKAS,GAAA,aACAV,OAAA,qDACAC,OAAA,wCACAC,OAAA,iDAEA,SAAAhZ,EAAA+Y,GACA,MAAA/Y,IAAA+Y,IAKAS,GAAA,SACAV,OAAA,2CACAC,OAAA,iCACAC,OAAA,uCAEA,SAAAhZ,EAAA+Y,GACA,MAAA/Y,KAAA+Y,IAKAS,GAAA,aACAV,OAAA,+CACAC,OAAA,qCACAC,OAAA,2CAEA,SAAAhZ,EAAA+Y,GACA,MAAA/Y,KAAA+Y,ImC7DAxE,GAAA,QACA,6BACA,SAAAvU,GACA,OAAAhJ,EAAAgJ,KAIAuU,GAAA,SACA,8BACA,SAAAvU,GACA,OAAAhI,EAAAgI,KAIAuU,GAAA,SACA,6BACA,SAAAvU,GACA,OAAA/J,EAAA+J,KAIAuU,GAAA,SACA,6BACA,SAAAvU,GACA,OAAA9F,EAAA8F,KAIAuU,GAAA,UACA,oCACA,SAAAvU,GACA,OAAA5F,EAAA4F,KAIAuU,GAAA,QACA,8BACA,SAAAvU,GACA,QAAAA,YAAA/F,OAIAsa,GAAA,QACA,mCACA,SAAAvU,EAAAe,EAAAqU,GACA,GAAAjZ,GAAAgY,GAAAnU,GACAuyC,EAAAnvC,WAAApD,GACAkyC,GAAAh4C,EAAAiC,EAOA,OANA+1C,KACAA,EAAAx6C,KAAAC,MAAAwE,KAAAo2C,EACAL,GACA98B,EAAAjZ,IAGA+1C,IAIA39B,GAAA,UACA,4BACA,SAAAvU,EAAAe,EAAAqU,GACA,GAAAjZ,GAAA+X,GAAAlU,GACAkyC,GAAAh4C,EAAAiC,EAIA,OAHA+1C,IACA98B,EAAAjZ,GAEA+1C,IAIA39B,GAAA,QACA,gCACA,SAAAvU,EAAAe,EAAAqU,GACA,GAAAyU,GAAAlV,GAAAC,MAAA49B,MAAAvhC,IAAAjR,GACAkyC,GAAA93C,EAAAyvB,EAIA,OAHAqoB,IACA98B,EAAAyU,GAEAqoB,IAIAv9B,GAAAC,MAAA49B,MAAAvhC,KAEA6gC,QAAA,EACAv6C,GAAA,EACAq6C,KAAA,EACAC,GAAA,EACAF,GAAA,EACAc,SAAA,EACAzjB,GAAA,EACA0jB,IAAA,EACAh8C,GAAA,EACAi8C,GAAA,GC9FAh+B,GAAAC,MAAAg+B,IAAA,SAAAr/B,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GASA,MAPAnV,GAAAkU,GAAAlU,GAEA9F,EAAA8F,KAEAA,EAAAtI,KAAAk7C,IAAA5yC,IAGAA,ICXA2U,GAAAC,MAAA/b,MAAA,SAAA0a,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAIA,MAFApU,GAAA+kB,KAAAvS,EAAAvT,GAEAA,ICNA2U,GAAAC,MAAAq3B,OAAA,SAAA14B,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAOA,MALAxf,GAAAk9C,OAEA7yC,EAAArK,EAAAk9C,KAAA7yC,IAGAA,ICTA2U,GAAAC,MAAAwjB,KAAA,SAAA7kB,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GASA,MAPAnV,GAAAkU,GAAAlU,GAEA9F,EAAA8F,KAEAA,EAAAtI,KAAA0gC,KAAAp4B,IAGAA,ICXA2U,GAAAC,MAAAN,SAAA,SAAAf,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAEA,MAAAb,IAAAtU,KCJA2U,GAAAC,MAAApH,OAAA,SAAA+F,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAEA,GAAAne,EAAAgJ,GAEA,IAAA,GAAAvJ,GAAAuJ,EAAArJ,OAAA,EAAAF,GAAA,EAAAA,IAEAN,EAAA6J,EAAAvJ,KAEAuJ,EAAAlB,OAAArI,EAAA,OAIA,IAAAuB,EAAAgI,GAEA,IAAA,GAAA7E,KAAA6E,GAEA7J,EAAA6J,EAAA7E,WAEA6E,GAAA7E,EAKA,OAAA6E,KCzBA2U,GAAAC,MAAAjd,MAAA,SAAA4b,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GASA,MAPAnV,GAAAkU,GAAAlU,GAEA9F,EAAA8F,KAEAA,EAAAtI,KAAAC,MAAAqI,IAGAA,ICXA2U,GAAAC,MAAAk+B,IAAA,SAAAv/B,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,GAAAgE,GAAA7E,GAAAW,EAEA,KAAA3a,EAAA6e,GAEA,KAAA,IAAAA,EAAA,2CAGA,OAAA,UAAA/Y,EAAAe,EAAAoU,GASA,MAPAnV,GAAAkU,GAAAlU,GAEA9F,EAAA8F,KAEAA,GAAA+Y,GAGA/Y,IClBA2U,GAAAC,MAAAD,QAAA,SAAApB,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAIA,MAFApU,GAAA+kB,KAAAvS,EAAA,MAEA,OCNAoB,GAAAC,MAAAm+B,MAAA,SAAAx/B,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GASA,MAPAnV,GAAAkU,GAAAlU,GAEA9F,EAAA8F,KAEAA,EAAAtI,KAAAq7C,MAAA/yC,IAGAA,ICXA2U,GAAAC,MAAAR,WAAA,SAAAb,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAEA,MAAAf,IAAApU,KCJA2U,GAAAC,MAAAo+B,KAAA,SAAAz/B,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAGA,IAAAk+B,OAAAh8C,UAAA+7C,KACA,CACA,GAAAz5B,GAAA,oCAEA05B,QAAAh8C,UAAA+7C,KAAA,WAEA,MAAAp5C,MAAA0I,QAAAiX,EAAA,KAIA,MAAA,UAAAvZ,EAAAe,EAAAoU,GAOA,MALAlf,GAAA+J,KAEAA,EAAAA,EAAAgzC,QAGAhzC,ICpBA2U,GAAAC,MAAAs+B,SAAA,SAAA3/B,EAAAsB,EAAAjQ,EAAAiR,EAAAd,GAEA,MAAA,UAAA/U,EAAAe,EAAAoU,GAOA,MALAxf,GAAAw9C,OAEAnzC,EAAArK,EAAAw9C,KAAAnzC,IAGAA,ICPArK,EAAAgL,OAAAA,GAGAA,GAAA1G,MAAAA,GACA0G,GAAA3G,SAAAA,GACA2G,GAAA2J,SAAAA,GACA3J,GAAAoO,UAAAA,GACApO,GAAA2N,OAAAA,GACA3N,GAAA8N,YAAAA,GACA9N,GAAAyI,QAAAA,GAGAzI,GAAAuL,QAAAA,GACAvL,GAAA8Z,MAAAA,GACA9Z,GAAA+Z,MAAAA,GACA/Z,GAAAka,KAAAA,GAGAla,GAAAiM,IAAAA,GACAjM,GAAAvJ,WAAAA,GACAuJ,GAAA4M,mBAAAA,GACA5M,GAAA8H,gBAAAA,GACA9H,GAAA+M,wBAAAA,GACA/M,GAAAoM,KAAAA,GAGApM,GAAAkP,OAAAA,GACAlP,GAAAiP,UAAAA,GACAjP,GAAAmP,QAAAA,GACAnP,GAAAoP,eAAAA,GACApP,GAAAqP,UAAAA,GAGArP,GAAA5G,SAAAA,EACA4G,GAAA9G,UAAAA,EACA8G,GAAA7G,WAAAA,EACA6G,GAAA1K,SAAAA,EACA0K,GAAAzG,SAAAA,EACAyG,GAAAvG,UAAAA,EACAuG,GAAAtG,OAAAA,EACAsG,GAAApG,SAAAA,EACAoG,GAAA3J,QAAAA,EACA2J,GAAA3I,SAAAA,EACA2I,GAAAxK,QAAAA,EACAwK,GAAAlG,KAAAA,EACAkG,GAAAjG,KAAAA,EACAiG,GAAA/F,KAAAA,EACA+F,GAAA1F,OAAAA,EACA0F,GAAAvF,QAAAA,EACAuF,GAAArF,SAAAA,EAGAqF,GAAA9K,QAAAA,EACA8K,GAAAvK,QAAAA,EACAuK,GAAA/J,QAAAA,EACA+J,GAAAtJ,KAAAA,EACAsJ,GAAAnJ,QAAAA,EACAmJ,GAAA/I,SAAAA,EACA+I,GAAA7I,iBAAAA,EAGA6I,GAAA1I,OAAAA,EACA0I,GAAAnI,YAAAA,EACAmI,GAAArH,UAAAA,GACAqH,GAAArI,WAAAA,EACAqI,GAAApH,cAAAA,EACAoH,GAAAtI,gBAAAA,EACAsI,GAAAhI,QAAAA,EAGAgI,GAAAhF,YAAAA,GACAgF,GAAAnF,eAAAA,EACAmF,GAAA9E,cAAAA,EACA8E,GAAA/E,iBAAAA,EAGA+E,GAAAnK,aAAAA,EACAmK,GAAA7D,cAAAA,EACA6D,GAAA5D,OAAAA,EACA4D,GAAAtD,eAAAA,EACAsD,GAAAhE,QAAAA,EAGAgE,GAAArD,iBAAAA,EACAqD,GAAAzC,YAAAA,EAGAyC,GAAAf,aAAAA,EACAe,GAAAN,WAAAA,EACAM,GAAAG,UAAAA,EACAH,GAAAO,KAAAA,EACAP,GAAAW,KAAAA,EACAX,GAAA7H,SAAAA,EACA6H,GAAAgB,SAAAA,EACAhB,GAAAiB,MAAAA,EACAjB,GAAAkB,eAAAA,EACAlB,GAAApF,KAAAA,EACAoF,GAAAqB,KAAAA,GAGArB,GAAAlE,MAAAA,GACAkE,GAAAtE,OAAAA,GACAsE,GAAAgC,gBAAAA,GACAhC,GAAAiC,UAAAA,GAGAjC,GAAAqC,gBAAAA,GACArC,GAAAmC,mBAAAA,GACAnC,GAAAsC,qBAAAA,GACAtC,GAAA4C,kBAAAA,GACA5C,GAAA0C,qBAAAA,GACA1C,GAAAwC,uBAAAA,GAGAxC,GAAAkD,YAAAA,GAGAlD,GAAAwD,OAAAA,GACAxD,GAAAuD,UAAAA,GACAvD,GAAAyD,YAAAA,IAEAxK","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc ) x += ' UTC';\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var splits = x.split( delimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  return Rekord.promises[ name ] = Rekord.promises[ name ] || new Promise( null, false );\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n};\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        (function(name, modelHandler)\n        {\n          Rekord.on( Rekord.Events.Plugins, function(model, database)\n          {\n            if ( database.name === name )\n            {\n              modelHandler( model );\n            }\n          });\n\n        })( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure)\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (e)\n  {\n    throw e;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.complete( callback, context || db );\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    }\n\n    batchExecute(function()\n    {\n      db.rest.all( onModels, onLoadError );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save();\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props)\n  {\n    function saveIt(model)\n    {\n      model.$save( props );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( isObject( props ) )\n    {\n      this.$set( props );\n    }\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = status === 0;\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 410 || status === 404 )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeFormat = options.timestampFormat || Database.Defaults.timestampFormat;\n  var timeType = options.timestampType || Database.Defaults.timestampType;\n  var timeUTC = options.timestampUTC || Database.Defaults.timestampUTC;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTimestamp()\n  {\n    return convertDate( new Date(), timeType );\n  }\n\n  function encode(x)\n  {\n    var encoded = convertDate( x, timeFormat );\n\n    return encoded || x;\n  }\n\n  function decode(x)\n  {\n    var decoded = convertDate( x, timeType, timeUTC );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = currentTimestamp();\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDatabase.Defaults.timestampFormat = Timestamp.Millis;\nDatabase.Defaults.timestampType = Timestamp.Date;\nDatabase.Defaults.timestampUTC = false;\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n","function tryParseFloat(x)\n{\n  var parsed = parseFloat( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction tryParseInt(x)\n{\n  var parsed = parseInt( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction startOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 0, 0, 0, 0 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000);\n  }\n\n  return d;\n}\n\nfunction endOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 23, 59, 59, 999 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000) + 86400000 - 1;\n  }\n\n  return d;\n}\n\nfunction ruleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nfunction determineMessage(ruleName, message)\n{\n  return message || Validation.Rules[ ruleName ].message;\n}\n\nfunction joinFriendly(arr, lastSeparator, itemSeparator, getAlias)\n{\n  var copy = arr.slice();\n\n  if ( getAlias )\n  {\n    for (var i = 0; i < copy.length; i++)\n    {\n      copy[ i ] = getAlias( copy[ i ] );\n    }\n  }\n\n  var last = copy.pop();\n  var lastSeparator = lastSeparator || 'and';\n  var itemSeparator = itemSeparator || ', ';\n\n  switch (copy.length) {\n    case 0:\n      return last;\n    case 1:\n      return copy[ 0 ] + ' ' + lastSeparator + ' ' + last;\n    default:\n      return copy.join( itemSeparator ) + itemSeparator + lastSeparator + ' ' + last;\n  }\n}\n\nfunction mapFromArray(arr, value)\n{\n  var map = {};\n\n  for (var i = 0; i < arr.length; i++)\n  {\n    map[ arr[ i ] ] = value;\n  }\n\n  return map;\n}\n\nfunction checkNoParams(ruleName, field, params)\n{\n  if ( params )\n  {\n    throw 'the rule ' + ruleName + ' for field ' + field + ' has no arguments';\n  }\n}\n\nfunction generateMessage(field, alias, value, model, message, extra)\n{\n  if ( isFunction( message ) )\n  {\n    message = message( field, alias, value, model, extra );\n  }\n\n  var base = {};\n  base.$field = field;\n  base.$alias = alias;\n  base.$value = value;\n\n  transfer( model, base );\n\n  if ( isObject( extra ) )\n  {\n    transfer( extra, base );\n  }\n\n  return format( message, base );\n}\n","// contains:field,value\ncollectionRuleGenerator('contains',\n  '{$alias} does not contain an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return !value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\n// not_contains:field,value\ncollectionRuleGenerator('not_contains',\n  '{$alias} contains an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\nfunction collectionRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var matchField, matchValue, equality;\n\n    if ( isString( params ) )\n    {\n      var comma = params.indexOf(',');\n\n      if ( comma === -1 )\n      {\n        throw ruleName + ' validation rule requires field & value arguments';\n      }\n\n      matchField = params.substring( 0, comma );\n      matchValue = params.substring( comma + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params[ 0 ];\n      matchValue = params[ 1 ];\n      equality = params[ 2 ];\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValue = params.value;\n      equality = params.equals;\n    }\n\n    if ( !isFunction( equality ) )\n    {\n      equality = equalsCompare;\n    }\n\n    if ( indexOf( database.fields, matchField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $matchValue: matchValue\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValue, equality ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.validate = function(field, params, database, getAlias, message)\n{\n  // message, models, validations\n  var messageOption = params || 'message';\n  var messageTemplate = determineMessage( 'validate', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      var invalid = new Collection();\n\n      for (var i = 0; i < value.length; i++)\n      {\n        var model = value[ i ];\n\n        if ( model && model.$validate && !model.$validate() )\n        {\n          invalid.push( model );\n        }\n      }\n\n      if ( invalid.length )\n      {\n        switch (messageOption)\n        {\n          case 'models':\n            setMessage( invalid );\n            break;\n          case 'validations':\n            setMessage( invalid.pluck( '$validations', '$$key' ) );\n            break;\n          default: // message\n            setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n            break;\n        }\n      }\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.validate.message = '{$alias} is not valid.';\n","// after:today\ndateRuleGenerator('after',\n  '{$alias} must be after {$date}.',\n  function isInvalid(value, date) {\n    return value < endOfDay( date );\n  }\n);\n\n// after_on:tomorrow\ndateRuleGenerator('after_on',\n  '{$alias} must be after or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value < date;\n  }\n);\n\n// before:yesterday\ndateRuleGenerator('before',\n  '{$alias} must be before {$date}.',\n  function isInvalid(value, date) {\n    return value > date;\n  }\n);\n\n// before_on:+2days\ndateRuleGenerator('before_on',\n  '{$alias} must be before or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value > endOfDay( date );\n  }\n);\n\n// date\nruleGenerator('date_like',\n  '{$alias} must be a valid date.',\n  function isInvalid(value, model, setValue) {\n    var parsed = parseDate( value );\n    var invalid = parsed === false;\n    if ( !invalid ) {\n      setValue( parsed.getTime() );\n    }\n    return invalid;\n  }\n);\n\nfunction dateRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a date expression argument';\n    }\n\n    var dateExpression;\n\n    if ( isString( params ) )\n    {\n      dateExpression = Validation.parseExpression( params, database );\n    }\n    else if ( isFunction( params ) )\n    {\n      dateExpression = params;\n    }\n    else\n    {\n      var parsed = parseDate( params );\n\n      if ( parsed !== false )\n      {\n        var parsedTime = parsed.getTime();\n\n        dateExpression = function()\n        {\n          return parsedTime;\n        };\n      }\n    }\n\n    if ( !dateExpression || dateExpression === noop )\n    {\n      throw params + ' is not a valid date expression for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $date: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var parsed = parseDate( value );\n\n      if ( parsed !== false )\n      {\n        value = parsed.getTime();\n\n        var date = dateExpression( value, model );\n\n        if ( isNumber( date ) && isInvalid( value, date ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","\n// required_if:X,Y,...\nfieldListRuleGenerator('required_if',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\n// required_unless:X,Y,...\nfieldListRuleGenerator('required_unless',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = !map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldListRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a field and list arguments';\n    }\n\n    var matchField, matchValues;\n\n    if ( isString( params ) )\n    {\n      var parts = split( params, /(,)/, '\\\\' );\n\n      matchField = parts.shift();\n      matchValues = parts;\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params.shift();\n      matchValues = params;\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValues = params.values;\n    }\n\n    if ( indexOf( database.fields, matchField ) === false )\n    {\n      throw matchField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( matchValues );\n    var extra = {\n      $params: params,\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $list: list\n    };\n    var map = mapFromArray( matchValues, true );\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValues, map ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// confirmed:X\nfieldsRuleGenerator('confirmed',\n  '{$alias} must match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var confirmed = true;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        confirmed = false;\n      }\n    }\n\n    return !confirmed;\n  }\n);\n\n// different:X\nfieldsRuleGenerator('different',\n  '{$alias} must not match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var different = false;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        different = true;\n      }\n    }\n\n    return !different;\n  }\n);\n\n// if_valid:X\nfieldsRuleGenerator('if_valid',\n  '',\n  function isInvalid(value, model, fields, setValue) {\n    var valid = true;\n\n    for (var i = 0; i < fields.length && valid; i++)\n    {\n      if ( model.$validations[ fields[ i ] ] )\n      {\n        valid = false;\n      }\n    }\n\n    if ( !valid )\n    {\n      setValue( Validation.Stop );\n    }\n\n    return false;\n  }\n);\n\n// The field under validation must be present only if any of the other specified fields are present.\n// required_with:X,Y,...\nfieldsRuleGenerator('required_with',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only if all of the other specified fields are present.\n// required_with_all:X,Y,...\nfieldsRuleGenerator('required_with_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when any of the other specified fields are not present.\n// required_without:X,Y,...\nfieldsRuleGenerator('required_without',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when all of the other specified fields are not present.\n// required_without_all:X,Y,...\nfieldsRuleGenerator('required_without_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldsRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires an array of fields argument';\n    }\n\n    var fields = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( indexOf( database.fields, fields[ i ] ) === -1 )\n      {\n        throw fields[ i ] + ' is not a valid field for the ' + ruleName + ' rule';\n      }\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var fieldNames = joinFriendly( fields );\n    var fieldAliases = joinFriendly( fields, false, false, getAlias );\n    var extra = {\n      $fields: fieldNames,\n      $fieldAliases: fieldAliases\n    };\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, fields, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n};\n","// exists:X,Y\nforeignRuleGenerator('exists',\n  '{$alias} must match an existing {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return !models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// unique:X,Y\nforeignRuleGenerator('unique',\n  '{$alias} must be a unique {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// 'ruleName'\n// 'ruleName:name'\n// 'ruleName:,field'\n// 'ruleName:name,field'\n// 'ruleName:name,field': '...'\n// 'ruleName': {input: {field: 'field', model: 'name'}, message: '...'}\n// 'ruleName': {input: {field: 'field', model: ModelClass}, message: '...'}\n// 'ruleName': {input: {field: 'field', models: [...]}, message: '...'}\n// 'ruleName': {field: 'field', model: 'name'}\n// 'ruleName': {field: 'field', model: ModelClass}\n// 'ruleName': {field: 'field', models: [...]}\nfunction foreignRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var modelName, models, fieldName;\n\n    if ( !isValue( params ) || isString( params ) )\n    {\n      var parts = split( params || '', /(\\s*,\\s*)/, '\\\\' );\n      modelName = parts[0] || database.name;\n      fieldName = parts[1] || field;\n      models = null;\n    }\n    else if ( isArray( params ) )\n    {\n      modelName = isString( params[0] ) ? params.shift() : database.name;\n      fieldName = isString( params[0] ) ? params.shift() : field;\n      models = new ModelCollection( database, params );\n    }\n    else if ( isObject( params ) )\n    {\n      modelName = params.model || database.name;\n      fieldName = params.field || field;\n      models = params.models;\n    }\n\n    if ( !models )\n    {\n      if ( !modelName )\n      {\n        throw 'model, model class, or models is required for ' + ruleName + ' rule';\n      }\n\n      if ( isString( modelName ) )\n      {\n        Rekord.get( modelName ).success(function(modelClass)\n        {\n          models = modelClass.all();\n        });\n      }\n      else if ( isRekord( modelName ) )\n      {\n        models = modelName.all();\n      }\n    }\n\n    if ( indexOf( database.fields, fieldName ) === false )\n    {\n      throw fieldName + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $class: modelName,\n      $matchField: fieldName,\n      $matchAlias: getAlias( fieldName )\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( models && isValue( value ) )\n      {\n        if ( isInvalid( value, model, models, fieldName ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// if:due_date:before:today|required\n\n// if all rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount > 0;\n  }\n);\n\n// if any rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_any',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount >= totalCount;\n  }\n);\n\n// if no rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_not',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount < totalCount;\n  }\n);\n\n\n\nfunction subRuleGenerator(ruleName, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a validation rule argument';\n    }\n\n    var otherField, otherRules;\n\n    if ( isString( params ) )\n    {\n      var colon = params.indexOf( ':' );\n\n      if ( colon === -1 )\n      {\n        throw params + ' is not a valid argument for the ' + ruleName + ' rule';\n      }\n\n      otherField = params.substring( 0, colon ) || field;\n      otherRules = params.substring( colon + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      otherField = params.shift() || field;\n      otherRules = params;\n    }\n    else if ( isObject( params ) )\n    {\n      otherField = params.field || field;\n      otherRules = params.rules;\n    }\n\n    if ( indexOf( database.fields, otherField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    if ( !otherRules )\n    {\n      throw 'rules are required for the ' + ruleName + ' rule';\n    }\n\n    var validators = Validation.parseRules( otherRules, otherField, database, getAlias );\n\n    return function(value, model, setMessage)\n    {\n      var invalids = 0;\n\n      var setInvalid = function(message)\n      {\n        if ( message )\n        {\n          invalids++;\n        }\n      };\n\n      for (var i = 0; i < validators.length; i++)\n      {\n        validators[ i ]( value, model, setInvalid );\n      }\n\n      return isInvalid( invalids, validators.length ) ? Validation.Stop : value;\n    };\n  };\n}\n","// in:X,Y,Z,...\nlistRuleGenerator('in',\n  '{$alias} must be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return !inList( value, model );\n  }\n);\n\n// not_in:X,Y,Z,...\nlistRuleGenerator('not_in',\n  '{$alias} must not be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return inList( value, model )\n  }\n);\n\nfunction listRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a list argument';\n    }\n\n    var values, inList = false;\n\n    if ( isString( params ) )\n    {\n      values = split( params, /(,)/, '\\\\' );\n    }\n    else if ( isArray( params ) )\n    {\n      values = params;\n    }\n    else if ( isFunction( params ) )\n    {\n      values = inList;\n    }\n\n    if ( inList !== false )\n    {\n      if ( !values || values.length === 0 )\n      {\n        throw params + ' is not a valid list of values for the ' + ruleName + ' rule';\n      }\n    }\n\n    if ( isPrimitiveArray( values ) )\n    {\n      var map = mapFromArray( values, true );\n\n      inList = function(value)\n      {\n        return map[ value ];\n      };\n    }\n    else\n    {\n      inList = function(value)\n      {\n        return indexOf( values, value, equals );\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( values, 'or' );\n    var extra = {\n      $params: params,\n      $list: list\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, inList ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// between:3,10\nrangeRuleGenerator('between', {\n    'string': '{$alias} must have between {$start} to {$end} characters.',\n    'number': '{$alias} must be between {$start} and {$end}.',\n    'object': '{$alias} must have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value < start || value > end;\n  }\n);\n\n// not_between\nrangeRuleGenerator('not_between', {\n    'string': '{$alias} must not have between {$start} to {$end} characters.',\n    'number': '{$alias} must not be between {$start} and {$end}.',\n    'object': '{$alias} must not have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value >= start && value <= end;\n  }\n);\n\nfunction rangeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a range argument';\n    }\n\n    var start, end;\n\n    if ( isString( params ) )\n    {\n      var range = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n      start = parseFloat( range[0] );\n      end = parseFloat( range[1] );\n    }\n    else if ( isArray( params ) )\n    {\n      start = params[ 0 ];\n      end = params[ 1 ];\n    }\n    else if ( isObject( params ) )\n    {\n      start = params.start;\n      end = params.end;\n    }\n\n    if ( isNaN( start ) || isNaN( end ) )\n    {\n      throw params + ' is not a valid range of numbers for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $start: start,\n      $end: end\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, start, end ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","\n\nregexRuleGenerator('alpha',\n  '{$alias} should only contain alphabetic characters.',\n    /^[a-zA-Z]*$/\n);\n\nregexRuleGenerator('alpha_dash',\n  '{$alias} should only contain alpha-numeric characters, dashes, and underscores.',\n  /^[a-zA-Z0-9_-]*$/\n);\n\nregexRuleGenerator('alpha_num',\n  '{$alias} should only contain alpha-numeric characters.',\n  /^[a-zA-Z0-9]*$/\n);\n\nregexRuleGenerator('email',\n  '{$alias} is not a valid email.',\n  /^.+@.+\\..+$/\n);\n\nregexRuleGenerator('url',\n  '{$alias} is not a valid URL.',\n  /^(https?:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('uri',\n  '{$alias} is not a valid URI.',\n  /^(\\w+:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('phone',\n  '{$alias} is not a valid phone number.',\n  /^1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?$/\n);\n\nfunction regexRuleGenerator(ruleName, defaultMessage, regex)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      if ( !regex.test( value ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.regex = function(field, params, database, getAlias, message)\n{\n  var regex;\n\n  if ( isString( params ) )\n  {\n    var parsed = /^\\/(.*)\\/([gmi]*)$/.exec( params );\n\n    if ( parsed )\n    {\n      regex = new RegExp( parsed[1], parsed[2] );\n    }\n  }\n  else if ( isRegExp( params ) )\n  {\n    regex = params;\n  }\n\n  if ( !regex )\n  {\n    throw params + ' is not a valid regular expression for the regex rule';\n  }\n\n  var messageTemplate = determineMessage( 'regex', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( !regex.test( value ) )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.regex.message = '{$alias} is not a valid value.';\n","// min:3\nsizeRuleGenerator('min', {\n    'string': '{$alias} must have a minimum of {$number} characters.',\n    'number': '{$alias} must be at least {$number}.',\n    'object': '{$alias} must have at least {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value < number;\n  }\n);\n\n// greater_than:0\nsizeRuleGenerator('greater_than', {\n    'string': '{$alias} must have more than {$number} characters.',\n    'number': '{$alias} must be greater than {$number}.',\n    'object': '{$alias} must have more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value <= number;\n  }\n);\n\n// max:10\nsizeRuleGenerator('max', {\n    'string': '{$alias} must have no more than {$number} characters.',\n    'number': '{$alias} must be no more than {$number}.',\n    'object': '{$alias} must have no more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value > number;\n  }\n);\n\n// less_than:5\nsizeRuleGenerator('less_than', {\n    'string': '{$alias} must have less than {$number} characters.',\n    'number': '{$alias} must be less than {$number}.',\n    'object': '{$alias} must have less than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value >= number;\n  }\n);\n\n// equal:4.5\nsizeRuleGenerator('equal', {\n    'string': '{$alias} must have {$number} characters.',\n    'number': '{$alias} must equal {$number}.',\n    'object': '{$alias} must have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value !== number;\n  }\n);\n\n// not_equal:0\nsizeRuleGenerator('not_equal', {\n    'string': '{$alias} must not have {$number} characters.',\n    'number': '{$alias} must not equal {$number}.',\n    'object': '{$alias} must not have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value === number;\n  }\n);\n\nfunction sizeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var number;\n\n    if ( isString( params ) )\n    {\n      number = parseFloat( params );\n    }\n    else if ( isNumber( params ) )\n    {\n      number = params;\n    }\n\n    if ( isNaN( number ) )\n    {\n      throw '\"' + params + '\" is not a valid number for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $number: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, number ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var validation = options.validation || Database.Defaults.validation;\n\n  if ( isEmpty( validation ) )\n  {\n    return;\n  }\n\n  var rules = validation.rules || {};\n  var messages = validation.messages || {};\n  var aliases = validation.aliases || {};\n  var required = !!validation.required;\n\n  function getAlias(field)\n  {\n    return aliases[ field ] || field;\n  }\n\n  db.validations = {};\n\n  for ( var field in rules )\n  {\n    db.validations[ field ] = Validation.parseRules( rules[ field ], field, db, getAlias, messages[ field ] )\n  }\n\n  addMethod( model.prototype, '$validate', function()\n  {\n    var $this = this;\n\n    this.$trigger( Model.Events.PreValidate, [this] );\n\n    this.$valid = true;\n    this.$validations = {};\n    this.$validationMessages.length = 0;\n\n    for (var field in db.validations)\n    {\n      var chain = db.validations[ field ];\n      var value = this.$get( field );\n      var fieldValid = true;\n\n      var setMessage = function(message)\n      {\n        // Only accept for the first valid message\n        if ( message && fieldValid )\n        {\n          fieldValid = false;\n\n          $this.$validations[ field ] = message;\n          $this.$validationMessages.push( message );\n          $this.$valid = false;\n        }\n      };\n\n      for (var i = 0; i < chain.length && fieldValid && value !== Validation.Stop; i++)\n      {\n        value = chain[ i ]( value, this, setMessage );\n      }\n    }\n\n    this.$trigger( this.$valid ? Model.Events.ValidatePass : Model.Events.ValidateFail, [this] );\n\n    return this.$valid;\n  });\n\n  replaceMethod( model.prototype, '$init', function($init)\n  {\n    return function()\n    {\n      this.$valid = undefined;\n      this.$validations = {};\n      this.$validationMessages = [];\n\n      return $init.apply( this, arguments );\n    };\n  });\n\n  if ( required )\n  {\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        if ( this.$isDeleted() )\n        {\n          Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n          return Promise.resolve( this );\n        }\n\n        if ( !this.$validate() )\n        {\n          return Promise.resolve( this );\n        }\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n});\n\nModel.Events.PreValidate = 'pre-validate';\n\nModel.Events.ValidatePass = 'validate-pass';\n\nModel.Events.ValidateFail = 'validate-fail';\n\nvar Validation =\n{\n  Rules: {},\n  Expression: {},\n  Expressions: [],\n  Delimiter: /([|])/,\n  Escape: '\\\\',\n  RuleSeparator: ':',\n  Stop: {},\n\n  parseRules: function(rules, field, database, getAlias, message)\n  {\n    var validators = [];\n\n    if ( isString( rules ) )\n    {\n      rules = split( rules, this.Delimiter, this.Escape );\n    }\n\n    if ( isArray( rules ) )\n    {\n      for (var i = 0; i < rules.length; i++)\n      {\n        var rule = rules[ i ];\n        var validator = this.parseRule( rule, field, database, getAlias, message );\n\n        validators.push( validator );\n      }\n    }\n    else if ( isObject( rules ) )\n    {\n      for (var rule in rules)\n      {\n        var ruleMessageOrData = rules[ rule ];\n\n        var ruleMessage = isObject( ruleMessageOrData ) ? ruleMessageOrData.message :\n          ( isString( ruleMessageOrData ) ? ruleMessageOrData : undefined );\n\n        var ruleInput = isObject( ruleMessageOrData ) && ruleMessageOrData.message ? ruleMessageOrData.input :\n          ( isString( ruleMessageOrData ) ? undefined : ruleMessageOrData );\n\n        var validator = this.parseRule( rule, field, database, getAlias, ruleMessage || message, ruleInput );\n\n        validators.push( validator );\n      }\n    }\n\n    return validators;\n  },\n\n  parseRule: function(rule, field, database, getAlias, message, input)\n  {\n    var colon = rule.indexOf( this.RuleSeparator );\n    var ruleName = colon === -1 ? rule : rule.substring( 0, colon );\n\n    if ( ruleName.charAt( 0 ) === '$' )\n    {\n      return this.customValidator( ruleName, field, database, getAlias, message );\n    }\n\n    var ruleParams = colon === -1 ? input : rule.substring( colon + 1 );\n    var validatorFactory = Validation.Rules[ ruleName ];\n\n    if ( !validatorFactory )\n    {\n      throw ruleName + ' is not a valid rule';\n    }\n\n    return validatorFactory( field, ruleParams, database, getAlias, message );\n  },\n\n  parseExpression: function(expr, database)\n  {\n    var parsers = Validation.Expressions;\n\n    for (var i = 0; i < parsers.length; i++)\n    {\n      var parser = parsers[ i ];\n      var expressionFunction = parser( expr, database );\n\n      if ( isFunction( expressionFunction ) )\n      {\n        return expressionFunction; // (value, model)\n      }\n    }\n\n    return noop;\n  },\n\n  customValidator: function(functionName, field, database, getAlias, message)\n  {\n    return function(value, model, setMessage)\n    {\n      var result = model[ functionName ]( value, getAlias, message );\n\n      if ( isString( result ) )\n      {\n        setMessage( result );\n      }\n\n      return value;\n    };\n  }\n};\n\n// Export\n\nRekord.Validation = Validation;\n\nRekord.ruleGenerator = ruleGenerator;\nRekord.rangeRuleGenerator = rangeRuleGenerator;\nRekord.collectionRuleGenerator = collectionRuleGenerator;\nRekord.dateRuleGenerator = dateRuleGenerator;\nRekord.fieldListRuleGenerator = fieldListRuleGenerator;\nRekord.fieldsRuleGenerator = fieldsRuleGenerator;\nRekord.foreignRuleGenerator = foreignRuleGenerator;\nRekord.subRuleGenerator = subRuleGenerator;\nRekord.listRuleGenerator = listRuleGenerator;\nRekord.regexRuleGenerator = regexRuleGenerator;\nRekord.sizeRuleGenerator = sizeRuleGenerator;\n\nRekord.joinFriendly = joinFriendly;\nRekord.tryParseFloat = tryParseFloat;\nRekord.tryParseInt = tryParseInt;\nRekord.startOfDay = startOfDay;\nRekord.endOfDay = endOfDay;\nRekord.determineMessage = determineMessage;\nRekord.mapFromArray = mapFromArray;\nRekord.checkNoParams = checkNoParams;\nRekord.generateMessage = generateMessage;\n","Validation.Expression.date =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = parseDate( expr );\n\n  if ( parsed !== false )\n  {\n    var parsedTime = parsed.getTime();\n\n    return function(value, model)\n    {\n      return parsedTime;\n    };\n  }\n}) - 1;\n","Validation.Expression.field =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( indexOf( database.fields, expr ) )\n  {\n    return function(value, model)\n    {\n      return model.$get( expr );\n    };\n  }\n}) - 1;\n","\nvar RELATIVE_REGEX = /^([+-]\\d+(\\.\\d+)?)\\s*(.+)$/;\n\nvar RELATIVE_UNITS = {\n  ms: 1,\n  millisecond: 1,\n  milliseconds: 1,\n  s: 1000,\n  second: 1000,\n  seconds: 1000,\n  min: 1000 * 60,\n  mins: 1000 * 60,\n  minute: 1000 * 60,\n  minutes: 1000 * 60,\n  hr: 1000 * 60 * 60,\n  hour: 1000 * 60 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n  days: 1000 * 60 * 60 * 24,\n  wk: 1000 * 60 * 60 * 24 * 7,\n  week: 1000 * 60 * 60 * 24 * 7,\n  weeks: 1000 * 60 * 60 * 24 * 7,\n  month: ['getMonth', 'setMonth'],\n  months: ['getMonth', 'setMonth'],\n  yr: ['getFullYear', 'setFullYear'],\n  year: ['getFullYear', 'setFullYear'],\n  years: ['getFullYear', 'setFullYear']\n};\n\nValidation.Expression.relative =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = RELATIVE_REGEX.exec( expr );\n\n  if ( parsed !== null )\n  {\n    var amount = parseFloat( parsed[ 1 ] );\n    var unit = parsed[ 3 ];\n    var unitScale = RELATIVE_UNITS[ unit ];\n\n    if ( !unitScale )\n    {\n      throw unit + ' is not a valid unit.';\n    }\n\n    return function(value, model)\n    {\n      var relative = new Date();\n\n      if ( isNumber( unitScale ) )\n      {\n        relative.setTime( relative.getTime() + unitScale * amount );\n      }\n      else\n      {\n        var getter = unitScale[0];\n        var setter = unitScale[1];\n\n        relative[ setter ]( relative[ getter ]() + amount );\n      }\n\n      return relative.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.today =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'today' )\n  {\n    return function(value, model)\n    {\n      var today = new Date();\n\n      startOfDay( today );\n\n      return today.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.tomorrow =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'tomorrow' )\n  {\n    return function(value, model)\n    {\n      var tomorrow = new Date();\n\n      tomorrow.setDate( tomorrow.getDate() + 1 );\n      startOfDay( tomorrow );\n\n      return tomorrow.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.yesterday =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'yesterday' )\n  {\n    return function(value, model)\n    {\n      var yesterday = new Date();\n\n      yesterday.setDate( yesterday.getDate() - 1 );\n      startOfDay( yesterday );\n\n      return yesterday.getTime();\n    };\n  }\n}) - 1;\n","// accepted\nValidation.Rules.accepted = function(field, params, database, getAlias, message)\n{\n  checkNoParams( 'accepted', field, params );\n\n  var messageTemplate = determineMessage( 'accepted', message );\n  var acceptable = Validation.Rules.accepted.acceptable;\n\n  return function(value, model, setMessage)\n  {\n    var valueString = (value + '').toLowerCase();\n    var accepted = acceptable[ valueString ];\n\n    if ( !accepted )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.accepted.message = '{$alias} has not been accepted.';\n\nValidation.Rules.accepted.acceptable =\n{\n  '1':    true,\n  'yes':  true,\n  'on':   true,\n  'y':    true,\n  'true': true\n};\n","// required\nruleGenerator('required',\n  '{$alias} is required.',\n  function isInvalid(value) {\n    return isEmpty( value );\n  }\n);\n","\nruleGenerator('array',\n  '{$alias} must be an array.',\n  function isInvalid(value) {\n    return !isArray( value );\n  }\n);\n\nruleGenerator('object',\n  '{$alias} must be an object.',\n  function isInvalid(value) {\n    return !isObject( value );\n  }\n);\n\nruleGenerator('string',\n  '{$alias} must be a string.',\n  function isInvalid(value) {\n    return !isString( value );\n  }\n);\n\nruleGenerator('number',\n  '{$alias} must be a number.',\n  function isInvalid(value) {\n    return !isNumber( value );\n  }\n);\n\nruleGenerator('boolean',\n  '{$alias} must be a true or false.',\n  function isInvalid(value) {\n    return !isBoolean( value );\n  }\n);\n\nruleGenerator('model',\n  '{$alias} must have a value.',\n  function isInvalid(value) {\n    return !(value instanceof Model);\n  }\n);\n\nruleGenerator('whole',\n  '{$alias} must be a whole number.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseInt( value );\n    var numeric = parseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      invalid = Math.floor( parsed ) !== numeric;\n      if ( !invalid ) {\n        setValue( parsed );\n      }\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('numeric',\n  '{$alias} must be numeric.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      setValue( parsed );\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('yesno',\n  '{$alias} must be a yes or no.',\n  function isInvalid(value, model, setValue) {\n    var mapped = Validation.Rules.yesno.map[ value ];\n    var invalid = !isBoolean( mapped );\n    if ( !invalid ) {\n      setValue( mapped );\n    }\n    return invalid;\n  }\n);\n\nValidation.Rules.yesno.map =\n{\n  'true':   true,\n  't':      true,\n  'yes':    true,\n  'y':      true,\n  '1':      true,\n  'false':  false,\n  'f':      false,\n  'no':     false,\n  'n':      false,\n  '0':      false\n};\n","Validation.Rules.abs = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = Math.abs( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.apply = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    model.$set( field, value );\n    \n    return value;\n  };\n};\n","Validation.Rules.base64 = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( global.btoa )\n    {\n      value = global.btoa( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.ceil = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.ceil( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.endOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    return endOfDay( value );\n  };\n};\n","Validation.Rules.filter = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      for (var i = value.length - 1; i >= 0; i--)\n      {\n        if ( !isValue( value[ i ] ) )\n        {\n          value.splice( i, 1 );\n        }\n      }\n    }\n    else if ( isObject( value ) )\n    {\n      for (var prop in value)\n      {\n        if ( !isValue( value[ prop ] ) )\n        {\n          delete value[ prop ];\n        }\n      }\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.floor = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.floor( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.mod = function(field, params, database, alias, message)\n{\n  var number = tryParseFloat( params );\n\n  if ( !isNumber( number ) )\n  {\n    throw '\"' + number + '\" is not a valid number for the mod rule.';\n  }\n\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = value % number;\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.null = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    model.$set( field, null );\n\n    return null;\n  };\n};\n","Validation.Rules.round = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = Math.round( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.startOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    return startOfDay( value );\n  };\n};\n","Validation.Rules.trim = function(field, params, database, alias, message)\n{\n  // String.trim polyfill\n  if ( !String.prototype.trim )\n  {\n    var regex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n    String.prototype.trim = function()\n    {\n      return this.replace( regex, '' );\n    };\n  }\n\n  return function(value, model, setMessage)\n  {\n    if ( isString( value ) )\n    {\n      value = value.trim();\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.unbase64 = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( global.atob )\n    {\n      value = global.atob( value );\n    }\n\n    return value;\n  };\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}