{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","batch.js","Gate.js","Database.js","Model.js","Map.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Promise.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","dynamic.js","events.js","files.js","timestamps.js","util.js","rules/collection.js","rules/dates.js","rules/field_list.js","rules/fields.js","rules/foreign.js","rules/if.js","rules/list.js","rules/range.js","rules/regex.js","rules/sizes.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","validation.js","rules/accepted.js","rules/required.js","rules/types.js","expressions/date.js","expressions/field.js","expressions/relative.js","expressions/today.js","expressions/tomorrow.js","expressions/yesterday.js","transforms/abs.js","transforms/apply.js","transforms/base64.js","transforms/ceil.js","transforms/endOfDay.js","transforms/filter.js","transforms/floor.js","transforms/mod.js","transforms/null.js","transforms/round.js","transforms/startOfDay.js","transforms/trim.js","transforms/unbase64.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","parseDate","utc","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","escape","splits","ae","joined","saveWhere","Wheres","createWhere","where","promise","get","isComplete","results","Events","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","modelName","modelHandler","createModelHandler","databaseName","modelClass","db","rest","currentBatch","batches","op","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","indices","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","tryParseFloat","tryParseInt","startOfDay","setHours","endOfDay","ruleGenerator","ruleName","defaultMessage","isInvalid","Validation","Rules","params","getAlias","message","checkNoParams","messageTemplate","determineMessage","setMessage","setValue","newValue","generateMessage","joinFriendly","lastSeparator","itemSeparator","last","pop","mapFromArray","alias","extra","$field","$alias","$value","collectionRuleGenerator","matchField","matchValue","comma","otherField","$matchField","$matchAlias","$matchValue","dateRuleGenerator","dateExpression","parseExpression","parsedTime","$date","fieldListRuleGenerator","matchValues","parts","shift","list","$params","$list","fieldsRuleGenerator","fieldNames","fieldAliases","$fields","$fieldAliases","foreignRuleGenerator","fieldName","$class","subRuleGenerator","otherRules","colon","rules","validators","parseRules","invalids","setInvalid","Stop","listRuleGenerator","inList","rangeRuleGenerator","defaultMessages","start","end","range","string","number","object","$start","$end","size","typeMessage","$size","regexRuleGenerator","regex","sizeRuleGenerator","$number","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","source","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","loadRelations","loadRemote","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","ready","persistent","hasData","saving","grabModel","checkModel","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","putRemoteData","instantiate","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","records","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","lastKey","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","add","intersect","complement","delaySort","insertAt","removed","removing","element","removeAll","removeWhere","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","firstWhere","lastWhere","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","$getDefaults","$append","$url","$results","$promise","$run","$encode","$handleSuccess","$handleFailure","isPending","offline","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","console","log","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","handleOnline","notLive","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","grabAll","searchPaged","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","aliases","validation","messages","required","validations","PreValidate","$valid","$validations","$validationMessages","chain","fieldValid","ValidatePass","ValidateFail","$validate","Expression","Expressions","Delimiter","Escape","RuleSeparator","rule","parseRule","ruleMessageOrData","ruleMessage","ruleInput","customValidator","ruleParams","validatorFactory","parsers","parser","expressionFunction","accepted","acceptable","valueString","toLowerCase","1","yes","y","true","m","validate","messageOption","invalid","confirmed","different","invalidCount","totalCount","exec","numeric","yesno","false","no","0","RELATIVE_REGEX","RELATIVE_UNITS","ms","millisecond","milliseconds","s","seconds","mins","minute","minutes","hr","hour","hours","day","days","wk","week","weeks","month","months","yr","year","years","relative","amount","unit","unitScale","setTime","getter","today","tomorrow","setDate","getDate","yesterday","abs","btoa","mod","round","trim","String","unbase64","atob"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc ) x += ' UTC';\n\n    x = Date.parse ? Date.parse( x ) : new Date( x );\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var splits = x.split( delimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  return Rekord.promises[ name ] = Rekord.promises[ name ] || new Promise( null, false );\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n};\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batchID );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        (function(name, modelHandler)\n        {\n          Rekord.on( Rekord.Events.Plugins, function(model, database)\n          {\n            if ( database.name === name )\n            {\n              modelHandler( model );\n            }\n          });\n\n        })( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction createModelHandler(operations, batchID)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n    var currentBatch = batches[ batchID ] = [];\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure)\n          {\n            currentBatch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure)\n          {\n            currentBatch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure)\n          {\n            currentBatch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure)\n          {\n            currentBatch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure)\n          {\n            currentBatch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure)\n          {\n            currentBatch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.length = 0;\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchStart();\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    batchEnd();\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.complete( callback, context || db );\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    }\n\n    batchStart();\n\n    db.rest.all( onModels, onLoadError );\n\n    batchEnd();\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchStart();\n\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n\n      batchEnd();\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchStart();\n\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n\n      batchEnd();\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchStart();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n        i--;\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    batchEnd();\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    batchStart();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    batchEnd();\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    batchStart();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    batchEnd();\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchStart();\n\n    this.eachWhere( cancelIt, properties, value, equals );\n\n    batchEnd();\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchStart();\n\n    this.eachWhere( refreshIt, properties, value, equals );\n\n    batchEnd();\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( isObject( props ) )\n    {\n      this.$set( props );\n    }\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchStart();\n\n    this.$cancel();\n    this.$promise = new Promise();\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    batchEnd();\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = status === 0;\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (e)\n      {\n        // throw error, Rekord.debug, and/or singularity.reject( e )\n        if ( global.console && global.console.log )\n        {\n          global.console.log( e );\n        }\n\n        throw e;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchStart();\n\n      db.rest.get( model, this.success(), this.failure() );\n\n      batchEnd();\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 410 || status === 404 )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchStart();\n\n      db.rest.remove( model, this.success(), this.failure() );\n\n      batchEnd();\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchStart();\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n\n      batchEnd();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchStart();\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n\n      batchEnd();\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchStart();\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n\n      batchEnd();\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchStart();\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n\n    batchEnd();\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchStart();\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n\n      batchEnd();\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeFormat = options.timestampFormat || Database.Defaults.timestampFormat;\n  var timeType = options.timestampType || Database.Defaults.timestampType;\n  var timeUTC = options.timestampUTC || Database.Defaults.timestampUTC;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTimestamp()\n  {\n    return convertDate( new Date(), timeType );\n  }\n\n  function encode(x)\n  {\n    var encoded = convertDate( x, timeFormat );\n\n    return encoded || x;\n  }\n\n  function decode(x)\n  {\n    var decoded = convertDate( x, timeType, timeUTC );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = currentTimestamp();\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDatabase.Defaults.timestampFormat = Timestamp.Millis;\nDatabase.Defaults.timestampType = Timestamp.Date;\nDatabase.Defaults.timestampUTC = false;\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n","function tryParseFloat(x)\n{\n  var parsed = parseFloat( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction tryParseInt(x)\n{\n  var parsed = parseInt( x );\n\n  if ( !isNaN( parsed ) )\n  {\n    x = parsed;\n  }\n\n  return x;\n}\n\nfunction startOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 0, 0, 0, 0 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000);\n  }\n\n  return d;\n}\n\nfunction endOfDay(d)\n{\n  if ( isDate( d ) )\n  {\n    d.setHours( 23, 59, 59, 999 );\n  }\n  else if ( isNumber( d ) )\n  {\n    d = d - (d % 86400000) + 86400000 - 1;\n  }\n\n  return d;\n}\n\nfunction ruleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nfunction determineMessage(ruleName, message)\n{\n  return message || Validation.Rules[ ruleName ].message;\n}\n\nfunction joinFriendly(arr, lastSeparator, itemSeparator, getAlias)\n{\n  var copy = arr.slice();\n\n  if ( getAlias )\n  {\n    for (var i = 0; i < copy.length; i++)\n    {\n      copy[ i ] = getAlias( copy[ i ] );\n    }\n  }\n\n  var last = copy.pop();\n  var lastSeparator = lastSeparator || 'and';\n  var itemSeparator = itemSeparator || ', ';\n\n  switch (copy.length) {\n    case 0:\n      return last;\n    case 1:\n      return copy[ 0 ] + ' ' + lastSeparator + ' ' + last;\n    default:\n      return copy.join( itemSeparator ) + itemSeparator + lastSeparator + ' ' + last;\n  }\n}\n\nfunction mapFromArray(arr, value)\n{\n  var map = {};\n\n  for (var i = 0; i < arr.length; i++)\n  {\n    map[ arr[ i ] ] = value;\n  }\n\n  return map;\n}\n\nfunction checkNoParams(ruleName, field, params)\n{\n  if ( params )\n  {\n    throw 'the rule ' + ruleName + ' for field ' + field + ' has no arguments';\n  }\n}\n\nfunction generateMessage(field, alias, value, model, message, extra)\n{\n  if ( isFunction( message ) )\n  {\n    message = message( field, alias, value, model, extra );\n  }\n\n  var base = {};\n  base.$field = field;\n  base.$alias = alias;\n  base.$value = value;\n\n  transfer( model, base );\n\n  if ( isObject( extra ) )\n  {\n    transfer( extra, base );\n  }\n\n  return format( message, base );\n}\n","// contains:field,value\ncollectionRuleGenerator('contains',\n  '{$alias} does not contain an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return !value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\n// not_contains:field,value\ncollectionRuleGenerator('not_contains',\n  '{$alias} contains an item whose {$matchAlias} equals {$matchValue}.',\n  function isInvalid(value, model, matchField, matchValue, equality)\n  {\n    return value.contains(function isMatch(m)\n    {\n      return m !== model && equality( matchValue, m.$get( matchField ) );\n    });\n  }\n);\n\nfunction collectionRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires field & value arguments';\n    }\n\n    var matchField, matchValue, equality;\n\n    if ( isString( params ) )\n    {\n      var comma = params.indexOf(',');\n\n      if ( comma === -1 )\n      {\n        throw ruleName + ' validation rule requires field & value arguments';\n      }\n\n      matchField = params.substring( 0, comma );\n      matchValue = params.substring( comma + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params[ 0 ];\n      matchValue = params[ 1 ];\n      equality = params[ 2 ];\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValue = params.value;\n      equality = params.equals;\n    }\n\n    if ( !isFunction( equality ) )\n    {\n      equality = equalsCompare;\n    }\n\n    if ( indexOf( database.fields, matchField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $matchValue: matchValue\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValue, equality ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.validate = function(field, params, database, getAlias, message)\n{\n  // message, models, validations\n  var messageOption = params || 'message';\n  var messageTemplate = determineMessage( 'validate', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      var invalid = new Collection();\n\n      for (var i = 0; i < value.length; i++)\n      {\n        var model = value[ i ];\n\n        if ( model && model.$validate && !model.$validate() )\n        {\n          invalid.push( model );\n        }\n      }\n\n      if ( invalid.length )\n      {\n        switch (messageOption)\n        {\n          case 'models':\n            setMessage( invalid );\n            break;\n          case 'validations':\n            setMessage( invalid.pluck( '$validations', '$$key' ) );\n            break;\n          default: // message\n            setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n            break;\n        }\n      }\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.validate.message = '{$alias} is not valid.';\n","// after:today\ndateRuleGenerator('after',\n  '{$alias} must be after {$date}.',\n  function isInvalid(value, date) {\n    return value < endOfDay( date );\n  }\n);\n\n// after_on:tomorrow\ndateRuleGenerator('after_on',\n  '{$alias} must be after or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value < date;\n  }\n);\n\n// before:yesterday\ndateRuleGenerator('before',\n  '{$alias} must be before {$date}.',\n  function isInvalid(value, date) {\n    return value > date;\n  }\n);\n\n// before_on:+2days\ndateRuleGenerator('before_on',\n  '{$alias} must be before or equal to {$date}.',\n  function isInvalid(value, date) {\n    return value > endOfDay( date );\n  }\n);\n\n// date\nruleGenerator('date_like',\n  '{$alias} must be a valid date.',\n  function isInvalid(value, model, setValue) {\n    var parsed = parseDate( value );\n    var invalid = parsed === false;\n    if ( !invalid ) {\n      setValue( parsed.getTime() );\n    }\n    return invalid;\n  }\n);\n\nfunction dateRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a date expression argument';\n    }\n\n    var dateExpression;\n\n    if ( isString( params ) )\n    {\n      dateExpression = Validation.parseExpression( params, database );\n    }\n    else if ( isFunction( params ) )\n    {\n      dateExpression = params;\n    }\n    else\n    {\n      var parsed = parseDate( params );\n\n      if ( parsed !== false )\n      {\n        var parsedTime = parsed.getTime();\n\n        dateExpression = function()\n        {\n          return parsedTime;\n        };\n      }\n    }\n\n    if ( !dateExpression || dateExpression === noop )\n    {\n      throw params + ' is not a valid date expression for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $date: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var parsed = parseDate( value );\n\n      if ( parsed !== false )\n      {\n        value = parsed.getTime();\n\n        var date = dateExpression( value, model );\n\n        if ( isNumber( date ) && isInvalid( value, date ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","\n// required_if:X,Y,...\nfieldListRuleGenerator('required_if',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\n// required_unless:X,Y,...\nfieldListRuleGenerator('required_unless',\n  '{$alias} is required.',\n  function isInvalid(value, model, field, values, map) {\n    var required = !map[ model.$get( field ) ];\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldListRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a field and list arguments';\n    }\n\n    var matchField, matchValues;\n\n    if ( isString( params ) )\n    {\n      var parts = split( params, /(,)/, '\\\\' );\n\n      matchField = parts.shift();\n      matchValues = parts;\n    }\n    else if ( isArray( params ) )\n    {\n      matchField = params.shift();\n      matchValues = params;\n    }\n    else if ( isObject( params ) )\n    {\n      matchField = params.field;\n      matchValues = params.values;\n    }\n\n    if ( indexOf( database.fields, matchField ) === false )\n    {\n      throw matchField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( matchValues );\n    var extra = {\n      $params: params,\n      $matchField: matchField,\n      $matchAlias: getAlias( matchField ),\n      $list: list\n    };\n    var map = mapFromArray( matchValues, true );\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, matchField, matchValues, map ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// confirmed:X\nfieldsRuleGenerator('confirmed',\n  '{$alias} must match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var confirmed = true;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        confirmed = false;\n      }\n    }\n\n    return !confirmed;\n  }\n);\n\n// different:X\nfieldsRuleGenerator('different',\n  '{$alias} must not match {$fieldAliases}.',\n  function isInvalid(value, model, fields, setValue) {\n    var different = false;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !equals( value, model.$get( fields[ i ] ) ) )\n      {\n        different = true;\n      }\n    }\n\n    return !different;\n  }\n);\n\n// if_valid:X\nfieldsRuleGenerator('if_valid',\n  '',\n  function isInvalid(value, model, fields, setValue) {\n    var valid = true;\n\n    for (var i = 0; i < fields.length && valid; i++)\n    {\n      if ( model.$validations[ fields[ i ] ] )\n      {\n        valid = false;\n      }\n    }\n\n    if ( !valid )\n    {\n      setValue( Validation.Stop );\n    }\n\n    return false;\n  }\n);\n\n// The field under validation must be present only if any of the other specified fields are present.\n// required_with:X,Y,...\nfieldsRuleGenerator('required_with',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only if all of the other specified fields are present.\n// required_with_all:X,Y,...\nfieldsRuleGenerator('required_with_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when any of the other specified fields are not present.\n// required_without:X,Y,...\nfieldsRuleGenerator('required_without',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = false;\n\n    for (var i = 0; i < fields.length && !required; i++)\n    {\n      if ( isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = true;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\n// The field under validation must be present only when all of the other specified fields are not present.\n// required_without_all:X,Y,...\nfieldsRuleGenerator('required_without_all',\n  '{$alias} is required.',\n  function isInvalid(value, model, fields, setValue) {\n    var required = true;\n\n    for (var i = 0; i < fields.length && required; i++)\n    {\n      if ( !isEmpty( model.$get( fields[ i ] ) ) )\n      {\n        required = false;\n      }\n    }\n\n    return required && isEmpty( value );\n  }\n);\n\nfunction fieldsRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires an array of fields argument';\n    }\n\n    var fields = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( indexOf( database.fields, fields[ i ] ) === -1 )\n      {\n        throw fields[ i ] + ' is not a valid field for the ' + ruleName + ' rule';\n      }\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var fieldNames = joinFriendly( fields );\n    var fieldAliases = joinFriendly( fields, false, false, getAlias );\n    var extra = {\n      $fields: fieldNames,\n      $fieldAliases: fieldAliases\n    };\n\n    return function(value, model, setMessage)\n    {\n      function setValue( newValue )\n      {\n        value = newValue;\n      }\n\n      if ( isInvalid( value, model, fields, setValue ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n};\n","// exists:X,Y\nforeignRuleGenerator('exists',\n  '{$alias} must match an existing {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return !models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// unique:X,Y\nforeignRuleGenerator('unique',\n  '{$alias} must be a unique {$matchAlias} in a {$class}',\n  function isInvalid(value, model, models, fieldName)\n  {\n    return models.contains(function isDifferentMatch(m)\n    {\n      return m !== model && equals( value, m.$get( fieldName ) );\n    });\n  }\n);\n\n// 'ruleName'\n// 'ruleName:name'\n// 'ruleName:,field'\n// 'ruleName:name,field'\n// 'ruleName:name,field': '...'\n// 'ruleName': {input: {field: 'field', model: 'name'}, message: '...'}\n// 'ruleName': {input: {field: 'field', model: ModelClass}, message: '...'}\n// 'ruleName': {input: {field: 'field', models: [...]}, message: '...'}\n// 'ruleName': {field: 'field', model: 'name'}\n// 'ruleName': {field: 'field', model: ModelClass}\n// 'ruleName': {field: 'field', models: [...]}\nfunction foreignRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var modelName, models, fieldName;\n\n    if ( !isValue( params ) || isString( params ) )\n    {\n      var parts = split( params || '', /(\\s*,\\s*)/, '\\\\' );\n      modelName = parts[0] || database.name;\n      fieldName = parts[1] || field;\n      models = null;\n    }\n    else if ( isArray( params ) )\n    {\n      modelName = isString( params[0] ) ? params.shift() : database.name;\n      fieldName = isString( params[0] ) ? params.shift() : field;\n      models = new ModelCollection( database, params );\n    }\n    else if ( isObject( params ) )\n    {\n      modelName = params.model || database.name;\n      fieldName = params.field || field;\n      models = params.models;\n    }\n\n    if ( !models )\n    {\n      if ( !modelName )\n      {\n        throw 'model, model class, or models is required for ' + ruleName + ' rule';\n      }\n\n      if ( isString( modelName ) )\n      {\n        Rekord.get( modelName ).success(function(modelClass)\n        {\n          models = modelClass.all();\n        });\n      }\n      else if ( isRekord( modelName ) )\n      {\n        models = modelName.all();\n      }\n    }\n\n    if ( indexOf( database.fields, fieldName ) === false )\n    {\n      throw fieldName + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $class: modelName,\n      $matchField: fieldName,\n      $matchAlias: getAlias( fieldName )\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( models && isValue( value ) )\n      {\n        if ( isInvalid( value, model, models, fieldName ) )\n        {\n          setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n        }\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// if:due_date:before:today|required\n\n// if all rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount > 0;\n  }\n);\n\n// if any rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_any',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount >= totalCount;\n  }\n);\n\n// if no rules pass for the given field, continue with remaining rules\nsubRuleGenerator('if_not',\n  function isInvalid(invalidCount, totalCount) {\n    return invalidCount < totalCount;\n  }\n);\n\n\n\nfunction subRuleGenerator(ruleName, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a validation rule argument';\n    }\n\n    var otherField, otherRules;\n\n    if ( isString( params ) )\n    {\n      var colon = params.indexOf( ':' );\n\n      if ( colon === -1 )\n      {\n        throw params + ' is not a valid argument for the ' + ruleName + ' rule';\n      }\n\n      otherField = params.substring( 0, colon ) || field;\n      otherRules = params.substring( colon + 1 );\n    }\n    else if ( isArray( params ) )\n    {\n      otherField = params.shift() || field;\n      otherRules = params;\n    }\n    else if ( isObject( params ) )\n    {\n      otherField = params.field || field;\n      otherRules = params.rules;\n    }\n\n    if ( indexOf( database.fields, otherField ) === -1 )\n    {\n      throw otherField + ' is not a valid field for the ' + ruleName + ' rule';\n    }\n\n    if ( !otherRules )\n    {\n      throw 'rules are required for the ' + ruleName + ' rule';\n    }\n\n    var validators = Validation.parseRules( otherRules, otherField, database, getAlias );\n\n    return function(value, model, setMessage)\n    {\n      var invalids = 0;\n\n      var setInvalid = function(message)\n      {\n        if ( message )\n        {\n          invalids++;\n        }\n      };\n\n      for (var i = 0; i < validators.length; i++)\n      {\n        validators[ i ]( value, model, setInvalid );\n      }\n\n      return isInvalid( invalids, validators.length ) ? Validation.Stop : value;\n    };\n  };\n}\n","// in:X,Y,Z,...\nlistRuleGenerator('in',\n  '{$alias} must be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return !inList( value, model );\n  }\n);\n\n// not_in:X,Y,Z,...\nlistRuleGenerator('not_in',\n  '{$alias} must not be one of {$list}.',\n  function isInvalid(value, model, inList)\n  {\n    return inList( value, model )\n  }\n);\n\nfunction listRuleGenerator(ruleName, defaultMessage, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a list argument';\n    }\n\n    var values, inList = false;\n\n    if ( isString( params ) )\n    {\n      values = split( params, /(,)/, '\\\\' );\n    }\n    else if ( isArray( params ) )\n    {\n      values = params;\n    }\n    else if ( isFunction( params ) )\n    {\n      values = inList;\n    }\n\n    if ( inList !== false )\n    {\n      if ( !values || values.length === 0 )\n      {\n        throw params + ' is not a valid list of values for the ' + ruleName + ' rule';\n      }\n    }\n\n    if ( isPrimitiveArray( values ) )\n    {\n      var map = mapFromArray( values, true );\n\n      inList = function(value)\n      {\n        return map[ value ];\n      };\n    }\n    else\n    {\n      inList = function(value)\n      {\n        return indexOf( values, value, equals );\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var list = joinFriendly( values, 'or' );\n    var extra = {\n      $params: params,\n      $list: list\n    };\n\n    return function(value, model, setMessage)\n    {\n      if ( isInvalid( value, model, inList ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n","// between:3,10\nrangeRuleGenerator('between', {\n    'string': '{$alias} must have between {$start} to {$end} characters.',\n    'number': '{$alias} must be between {$start} and {$end}.',\n    'object': '{$alias} must have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value < start || value > end;\n  }\n);\n\n// not_between\nrangeRuleGenerator('not_between', {\n    'string': '{$alias} must not have between {$start} to {$end} characters.',\n    'number': '{$alias} must not be between {$start} and {$end}.',\n    'object': '{$alias} must not have between {$start} to {$end} items.'\n  },\n  function isInvalid(value, start, end) {\n    return value >= start && value <= end;\n  }\n);\n\nfunction rangeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    if ( !params )\n    {\n      throw ruleName + ' validation rule requires a range argument';\n    }\n\n    var start, end;\n\n    if ( isString( params ) )\n    {\n      var range = split( params, /(\\s*,\\s*)/, '\\\\' );\n\n      start = parseFloat( range[0] );\n      end = parseFloat( range[1] );\n    }\n    else if ( isArray( params ) )\n    {\n      start = params[ 0 ];\n      end = params[ 1 ];\n    }\n    else if ( isObject( params ) )\n    {\n      start = params.start;\n      end = params.end;\n    }\n\n    if ( isNaN( start ) || isNaN( end ) )\n    {\n      throw params + ' is not a valid range of numbers for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $start: start,\n      $end: end\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, start, end ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","\n\nregexRuleGenerator('alpha',\n  '{$alias} should only contain alphabetic characters.',\n    /^[a-zA-Z]*$/\n);\n\nregexRuleGenerator('alpha_dash',\n  '{$alias} should only contain alpha-numeric characters, dashes, and underscores.',\n  /^[a-zA-Z0-9_-]*$/\n);\n\nregexRuleGenerator('alpha_num',\n  '{$alias} should only contain alpha-numeric characters.',\n  /^[a-zA-Z0-9]*$/\n);\n\nregexRuleGenerator('email',\n  '{$alias} is not a valid email.',\n  /^.+@.+\\..+$/\n);\n\nregexRuleGenerator('url',\n  '{$alias} is not a valid URL.',\n  /^(https?:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('uri',\n  '{$alias} is not a valid URI.',\n  /^(\\w+:\\/\\/)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\n);\n\nregexRuleGenerator('phone',\n  '{$alias} is not a valid phone number.',\n  /^1?\\W*([2-9][0-8][0-9])\\W*([2-9][0-9]{2})\\W*([0-9]{4})(\\se?x?t?(\\d*))?$/\n);\n\nfunction regexRuleGenerator(ruleName, defaultMessage, regex)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    checkNoParams( ruleName, field, params );\n\n    var messageTemplate = determineMessage( ruleName, message );\n\n    return function(value, model, setMessage)\n    {\n      if ( !regex.test( value ) )\n      {\n        setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessage;\n}\n\nValidation.Rules.regex = function(field, params, database, getAlias, message)\n{\n  var regex;\n\n  if ( isString( params ) )\n  {\n    var parsed = /^\\/(.*)\\/([gmi]*)$/.exec( params );\n\n    if ( parsed )\n    {\n      regex = new RegExp( parsed[1], parsed[2] );\n    }\n  }\n  else if ( isRegExp( params ) )\n  {\n    regex = params;\n  }\n\n  if ( !regex )\n  {\n    throw params + ' is not a valid regular expression for the regex rule';\n  }\n\n  var messageTemplate = determineMessage( 'regex', message );\n\n  return function(value, model, setMessage)\n  {\n    if ( !regex.test( value ) )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.regex.message = '{$alias} is not a valid value.';\n","// min:3\nsizeRuleGenerator('min', {\n    'string': '{$alias} must have a minimum of {$number} characters.',\n    'number': '{$alias} must be at least {$number}.',\n    'object': '{$alias} must have at least {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value < number;\n  }\n);\n\n// greater_than:0\nsizeRuleGenerator('greater_than', {\n    'string': '{$alias} must have more than {$number} characters.',\n    'number': '{$alias} must be greater than {$number}.',\n    'object': '{$alias} must have more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value <= number;\n  }\n);\n\n// max:10\nsizeRuleGenerator('max', {\n    'string': '{$alias} must have no more than {$number} characters.',\n    'number': '{$alias} must be no more than {$number}.',\n    'object': '{$alias} must have no more than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value > number;\n  }\n);\n\n// less_than:5\nsizeRuleGenerator('less_than', {\n    'string': '{$alias} must have less than {$number} characters.',\n    'number': '{$alias} must be less than {$number}.',\n    'object': '{$alias} must have less than {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value >= number;\n  }\n);\n\n// equal:4.5\nsizeRuleGenerator('equal', {\n    'string': '{$alias} must have {$number} characters.',\n    'number': '{$alias} must equal {$number}.',\n    'object': '{$alias} must have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value !== number;\n  }\n);\n\n// not_equal:0\nsizeRuleGenerator('not_equal', {\n    'string': '{$alias} must not have {$number} characters.',\n    'number': '{$alias} must not equal {$number}.',\n    'object': '{$alias} must not have {$number} items.'\n  },\n  function isInvalid(value, number) {\n    return value === number;\n  }\n);\n\nfunction sizeRuleGenerator(ruleName, defaultMessages, isInvalid)\n{\n  Validation.Rules[ ruleName ] = function(field, params, database, getAlias, message)\n  {\n    var number;\n\n    if ( isString( params ) )\n    {\n      number = parseFloat( params );\n    }\n    else if ( isNumber( params ) )\n    {\n      number = params;\n    }\n\n    if ( isNaN( number ) )\n    {\n      throw '\"' + params + '\" is not a valid number for the ' + ruleName + ' rule';\n    }\n\n    if ( isString( message ) )\n    {\n      message = {\n        'string': message,\n        'number': message,\n        'object': message\n      };\n    }\n\n    var messageTemplate = determineMessage( ruleName, message );\n    var extra = {\n      $number: params\n    };\n\n    return function(value, model, setMessage)\n    {\n      var size = sizeof( value );\n      var type = typeof( value );\n      var typeMessage = messageTemplate[ type ];\n\n      if ( typeMessage && isInvalid( size, number ) )\n      {\n        extra.$size = size;\n\n        setMessage( generateMessage( field, getAlias( field ), value, model, typeMessage, extra ) );\n      }\n\n      return value;\n    };\n  };\n\n  Validation.Rules[ ruleName ].message = defaultMessages;\n}\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var validation = options.validation || Database.Defaults.validation;\n\n  if ( isEmpty( validation ) )\n  {\n    return;\n  }\n\n  var rules = validation.rules || {};\n  var messages = validation.messages || {};\n  var aliases = validation.aliases || {};\n  var required = !!validation.required;\n\n  function getAlias(field)\n  {\n    return aliases[ field ] || field;\n  }\n\n  db.validations = {};\n\n  for ( var field in rules )\n  {\n    db.validations[ field ] = Validation.parseRules( rules[ field ], field, db, getAlias, messages[ field ] )\n  }\n\n  addMethod( model.prototype, '$validate', function()\n  {\n    var $this = this;\n\n    this.$trigger( Model.Events.PreValidate, [this] );\n\n    this.$valid = true;\n    this.$validations = {};\n    this.$validationMessages.length = 0;\n\n    for (var field in db.validations)\n    {\n      var chain = db.validations[ field ];\n      var value = this.$get( field );\n      var fieldValid = true;\n\n      var setMessage = function(message)\n      {\n        // Only accept for the first valid message\n        if ( message && fieldValid )\n        {\n          fieldValid = false;\n\n          $this.$validations[ field ] = message;\n          $this.$validationMessages.push( message );\n          $this.$valid = false;\n        }\n      };\n\n      for (var i = 0; i < chain.length && fieldValid && value !== Validation.Stop; i++)\n      {\n        value = chain[ i ]( value, this, setMessage );\n      }\n    }\n\n    this.$trigger( this.$valid ? Model.Events.ValidatePass : Model.Events.ValidateFail, [this] );\n\n    return this.$valid;\n  });\n\n  replaceMethod( model.prototype, '$init', function($init)\n  {\n    return function()\n    {\n      this.$valid = undefined;\n      this.$validations = {};\n      this.$validationMessages = [];\n\n      return $init.apply( this, arguments );\n    };\n  });\n\n  if ( required )\n  {\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        if ( this.$isDeleted() )\n        {\n          Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n          return Promise.resolve( this );\n        }\n\n        if ( !this.$validate() )\n        {\n          return Promise.resolve( this );\n        }\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n});\n\nModel.Events.PreValidate = 'pre-validate';\n\nModel.Events.ValidatePass = 'validate-pass';\n\nModel.Events.ValidateFail = 'validate-fail';\n\nvar Validation =\n{\n  Rules: {},\n  Expression: {},\n  Expressions: [],\n  Delimiter: /([|])/,\n  Escape: '\\\\',\n  RuleSeparator: ':',\n  Stop: {},\n\n  parseRules: function(rules, field, database, getAlias, message)\n  {\n    var validators = [];\n\n    if ( isString( rules ) )\n    {\n      rules = split( rules, this.Delimiter, this.Escape );\n    }\n\n    if ( isArray( rules ) )\n    {\n      for (var i = 0; i < rules.length; i++)\n      {\n        var rule = rules[ i ];\n        var validator = this.parseRule( rule, field, database, getAlias, message );\n\n        validators.push( validator );\n      }\n    }\n    else if ( isObject( rules ) )\n    {\n      for (var rule in rules)\n      {\n        var ruleMessageOrData = rules[ rule ];\n\n        var ruleMessage = isObject( ruleMessageOrData ) ? ruleMessageOrData.message :\n          ( isString( ruleMessageOrData ) ? ruleMessageOrData : undefined );\n\n        var ruleInput = isObject( ruleMessageOrData ) && ruleMessageOrData.message ? ruleMessageOrData.input :\n          ( isString( ruleMessageOrData ) ? undefined : ruleMessageOrData );\n\n        var validator = this.parseRule( rule, field, database, getAlias, ruleMessage || message, ruleInput );\n\n        validators.push( validator );\n      }\n    }\n\n    return validators;\n  },\n\n  parseRule: function(rule, field, database, getAlias, message, input)\n  {\n    var colon = rule.indexOf( this.RuleSeparator );\n    var ruleName = colon === -1 ? rule : rule.substring( 0, colon );\n\n    if ( ruleName.charAt( 0 ) === '$' )\n    {\n      return this.customValidator( ruleName, field, database, getAlias, message );\n    }\n\n    var ruleParams = colon === -1 ? input : rule.substring( colon + 1 );\n    var validatorFactory = Validation.Rules[ ruleName ];\n\n    if ( !validatorFactory )\n    {\n      throw ruleName + ' is not a valid rule';\n    }\n\n    return validatorFactory( field, ruleParams, database, getAlias, message );\n  },\n\n  parseExpression: function(expr, database)\n  {\n    var parsers = Validation.Expressions;\n\n    for (var i = 0; i < parsers.length; i++)\n    {\n      var parser = parsers[ i ];\n      var expressionFunction = parser( expr, database );\n\n      if ( isFunction( expressionFunction ) )\n      {\n        return expressionFunction; // (value, model)\n      }\n    }\n\n    return noop;\n  },\n\n  customValidator: function(functionName, field, database, getAlias, message)\n  {\n    return function(value, model, setMessage)\n    {\n      var result = model[ functionName ]( value, getAlias, message );\n\n      if ( isString( result ) )\n      {\n        setMessage( result );\n      }\n\n      return value;\n    };\n  }\n};\n\n// Export\n\nRekord.Validation = Validation;\n\nRekord.ruleGenerator = ruleGenerator;\nRekord.rangeRuleGenerator = rangeRuleGenerator;\nRekord.collectionRuleGenerator = collectionRuleGenerator;\nRekord.dateRuleGenerator = dateRuleGenerator;\nRekord.fieldListRuleGenerator = fieldListRuleGenerator;\nRekord.fieldsRuleGenerator = fieldsRuleGenerator;\nRekord.foreignRuleGenerator = foreignRuleGenerator;\nRekord.subRuleGenerator = subRuleGenerator;\nRekord.listRuleGenerator = listRuleGenerator;\nRekord.regexRuleGenerator = regexRuleGenerator;\nRekord.sizeRuleGenerator = sizeRuleGenerator;\n\nRekord.joinFriendly = joinFriendly;\nRekord.tryParseFloat = tryParseFloat;\nRekord.tryParseInt = tryParseInt;\nRekord.startOfDay = startOfDay;\nRekord.endOfDay = endOfDay;\nRekord.determineMessage = determineMessage;\nRekord.mapFromArray = mapFromArray;\nRekord.checkNoParams = checkNoParams;\nRekord.generateMessage = generateMessage;\n","// accepted\nValidation.Rules.accepted = function(field, params, database, getAlias, message)\n{\n  checkNoParams( 'accepted', field, params );\n\n  var messageTemplate = determineMessage( 'accepted', message );\n  var acceptable = Validation.Rules.accepted.acceptable;\n\n  return function(value, model, setMessage)\n  {\n    var valueString = (value + '').toLowerCase();\n    var accepted = acceptable[ valueString ];\n\n    if ( !accepted )\n    {\n      setMessage( generateMessage( field, getAlias( field ), value, model, messageTemplate ) );\n    }\n\n    return value;\n  };\n};\n\nValidation.Rules.accepted.message = '{$alias} has not been accepted.';\n\nValidation.Rules.accepted.acceptable =\n{\n  '1':    true,\n  'yes':  true,\n  'on':   true,\n  'y':    true,\n  'true': true\n};\n","// required\nruleGenerator('required',\n  '{$alias} is required.',\n  function isInvalid(value) {\n    return isEmpty( value );\n  }\n);\n","\nruleGenerator('array',\n  '{$alias} must be an array.',\n  function isInvalid(value) {\n    return !isArray( value );\n  }\n);\n\nruleGenerator('object',\n  '{$alias} must be an object.',\n  function isInvalid(value) {\n    return !isObject( value );\n  }\n);\n\nruleGenerator('string',\n  '{$alias} must be a string.',\n  function isInvalid(value) {\n    return !isString( value );\n  }\n);\n\nruleGenerator('number',\n  '{$alias} must be a number.',\n  function isInvalid(value) {\n    return !isNumber( value );\n  }\n);\n\nruleGenerator('boolean',\n  '{$alias} must be a true or false.',\n  function isInvalid(value) {\n    return !isBoolean( value );\n  }\n);\n\nruleGenerator('model',\n  '{$alias} must have a value.',\n  function isInvalid(value) {\n    return !(value instanceof Model);\n  }\n);\n\nruleGenerator('whole',\n  '{$alias} must be a whole number.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseInt( value );\n    var numeric = parseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      invalid = Math.floor( parsed ) !== numeric;\n      if ( !invalid ) {\n        setValue( parsed );\n      }\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('numeric',\n  '{$alias} must be numeric.',\n  function isInvalid(value, model, setValue) {\n    var parsed = tryParseFloat( value );\n    var invalid = !isNumber( parsed );\n    if ( !invalid ) {\n      setValue( parsed );\n    }\n    return invalid;\n  }\n);\n\nruleGenerator('yesno',\n  '{$alias} must be a yes or no.',\n  function isInvalid(value, model, setValue) {\n    var mapped = Validation.Rules.yesno.map[ value ];\n    var invalid = !isBoolean( mapped );\n    if ( !invalid ) {\n      setValue( mapped );\n    }\n    return invalid;\n  }\n);\n\nValidation.Rules.yesno.map =\n{\n  'true':   true,\n  't':      true,\n  'yes':    true,\n  'y':      true,\n  '1':      true,\n  'false':  false,\n  'f':      false,\n  'no':     false,\n  'n':      false,\n  '0':      false\n};\n","Validation.Expression.date =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = parseDate( expr );\n\n  if ( parsed !== false )\n  {\n    var parsedTime = parsed.getTime();\n\n    return function(value, model)\n    {\n      return parsedTime;\n    };\n  }\n}) - 1;\n","Validation.Expression.field =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( indexOf( database.fields, expr ) )\n  {\n    return function(value, model)\n    {\n      return model.$get( expr );\n    };\n  }\n}) - 1;\n","\nvar RELATIVE_REGEX = /^([+-]\\d+(\\.\\d+)?)\\s*(.+)$/;\n\nvar RELATIVE_UNITS = {\n  ms: 1,\n  millisecond: 1,\n  milliseconds: 1,\n  s: 1000,\n  second: 1000,\n  seconds: 1000,\n  min: 1000 * 60,\n  mins: 1000 * 60,\n  minute: 1000 * 60,\n  minutes: 1000 * 60,\n  hr: 1000 * 60 * 60,\n  hour: 1000 * 60 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24,\n  days: 1000 * 60 * 60 * 24,\n  wk: 1000 * 60 * 60 * 24 * 7,\n  week: 1000 * 60 * 60 * 24 * 7,\n  weeks: 1000 * 60 * 60 * 24 * 7,\n  month: ['getMonth', 'setMonth'],\n  months: ['getMonth', 'setMonth'],\n  yr: ['getFullYear', 'setFullYear'],\n  year: ['getFullYear', 'setFullYear'],\n  years: ['getFullYear', 'setFullYear']\n};\n\nValidation.Expression.relative =\nValidation.Expressions.push(function(expr, database)\n{\n  var parsed = RELATIVE_REGEX.exec( expr );\n\n  if ( parsed !== null )\n  {\n    var amount = parseFloat( parsed[ 1 ] );\n    var unit = parsed[ 3 ];\n    var unitScale = RELATIVE_UNITS[ unit ];\n\n    if ( !unitScale )\n    {\n      throw unit + ' is not a valid unit.';\n    }\n\n    return function(value, model)\n    {\n      var relative = new Date();\n\n      if ( isNumber( unitScale ) )\n      {\n        relative.setTime( relative.getTime() + unitScale * amount );\n      }\n      else\n      {\n        var getter = unitScale[0];\n        var setter = unitScale[1];\n\n        relative[ setter ]( relative[ getter ]() + amount );\n      }\n\n      return relative.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.today =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'today' )\n  {\n    return function(value, model)\n    {\n      var today = new Date();\n\n      startOfDay( today );\n\n      return today.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.tomorrow =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'tomorrow' )\n  {\n    return function(value, model)\n    {\n      var tomorrow = new Date();\n\n      tomorrow.setDate( tomorrow.getDate() + 1 );\n      startOfDay( tomorrow );\n\n      return tomorrow.getTime();\n    };\n  }\n}) - 1;\n","Validation.Expression.yesterday =\nValidation.Expressions.push(function(expr, database)\n{\n  if ( expr === 'yesterday' )\n  {\n    return function(value, model)\n    {\n      var yesterday = new Date();\n\n      yesterday.setDate( yesterday.getDate() - 1 );\n      startOfDay( yesterday );\n\n      return yesterday.getTime();\n    };\n  }\n}) - 1;\n","Validation.Rules.abs = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = Math.abs( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.apply = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    model.$set( field, value );\n    \n    return value;\n  };\n};\n","Validation.Rules.base64 = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( global.btoa )\n    {\n      value = global.btoa( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.ceil = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.ceil( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.endOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    return endOfDay( value );\n  };\n};\n","Validation.Rules.filter = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( isArray( value ) )\n    {\n      for (var i = value.length - 1; i >= 0; i--)\n      {\n        if ( !isValue( value[ i ] ) )\n        {\n          value.splice( i, 1 );\n        }\n      }\n    }\n    else if ( isObject( value ) )\n    {\n      for (var prop in value)\n      {\n        if ( !isValue( value[ prop ] ) )\n        {\n          delete value[ prop ];\n        }\n      }\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.floor = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n    \n    if ( isNumber( value ) )\n    {\n      value = Math.floor( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.mod = function(field, params, database, alias, message)\n{\n  var number = tryParseFloat( params );\n\n  if ( !isNumber( number ) )\n  {\n    throw '\"' + number + '\" is not a valid number for the mod rule.';\n  }\n\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = value % number;\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.null = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    model.$set( field, null );\n\n    return null;\n  };\n};\n","Validation.Rules.round = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    value = tryParseFloat( value );\n\n    if ( isNumber( value ) )\n    {\n      value = Math.round( value );\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.startOfDay = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    return startOfDay( value );\n  };\n};\n","Validation.Rules.trim = function(field, params, database, alias, message)\n{\n  // String.trim polyfill\n  if ( !String.prototype.trim )\n  {\n    var regex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n    String.prototype.trim = function()\n    {\n      return this.replace( regex, '' );\n    };\n  }\n\n  return function(value, model, setMessage)\n  {\n    if ( isString( value ) )\n    {\n      value = value.trim();\n    }\n\n    return value;\n  };\n};\n","Validation.Rules.unbase64 = function(field, params, database, alias, message)\n{\n  return function(value, model, setMessage)\n  {\n    if ( global.atob )\n    {\n      value = global.atob( value );\n    }\n\n    return value;\n  };\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.parse = parse;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}