{"version":3,"sources":["header.js","functions.js","eventize.js","Rekord.js","dynamic.js","events.js","files.js","Gate.js","Database.js","Model.js","Map.js","Request.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Transaction.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","footer.js"],"names":["global","undefined","isDefined","x","isFunction","constructor","call","apply","isRekord","Database","prototype","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isArray","Array","isObject","toArray","delimiter","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","noop","bind","context","func","arguments","uuid","S4","Math","random","toString","substring","propsMatch","test","testFields","expected","expectedFields","equals","equality","Rekord","testProp","expectedProp","hasFields","model","fields","exists","copyConstructor","F","extend","parent","child","override","addMethods","target","methods","methodName","addMethod","factory","args","this","extendArray","extendArraySupported","create","created","transfer","EA","supported","eq","push","from","to","prop","swap","a","k","t","applyOptions","options","defaults","secret","defaultValue","option","valued","copy","$options","camelCaseReplacer","match","toUpperCase","charAt","toCamelCase","name","replace","REGEX","collect","values","slice","Collection","evaluate","grab","obj","props","copyValues","grabbed","p","pull","pulledValue","pulled","collapse","clean","cleanFunctions","copyHidden","c","getTime","diff","curr","old","d","sizeof","properties","isEmpty","b","equalsCompare","compare","at","bt","aa","ba","compareNumbers","nullsFirst","av","bv","localeCompare","isSorted","array","saveComparator","Comparators","createComparator","addComparator","second","first","parsed","af","format","bf","ap","parse","bp","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","saveWhere","Wheres","createWhere","value","where","saveHaving","having","Havings","createHaving","expr","base","valid","parseInt","template","createFormatter","addEventFunction","functionName","events","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","cache","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","$once","RemoteSave","$addOperation","SaveLocal","Cascade","Local","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","Map","indices","Request","failure","callCanceled","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","url","SearchPaged","Transaction","cascade","operation","status","completed","operations","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkRekord","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","size","types","fileToValue","filtered","whereProperties","whereValue","whereEquals","find","firstWhere","grabModel","grabAll","ready","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","encoded","update","remove","query","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","resolveModel","resolveModels","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","Status","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","onSuccess","handleCall","onFailure","request","currentCall","cancel","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","callRemove","avoidSave","updateWhere","onModelUpdated","handleModelUpdate","Ready","Success","Failure","$getDefaults","$append","$url","$results","$request","$handleSuccess","$handleFailure","$run","$encode","$off","$ready","$success","$failure","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","handleSuccess","handleFailure","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","setProperty","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n/**\n * A function for comparing two values to determine if one is greater or lesser\n * than the other or if they're equal.\n *\n * ```javascript\n * comparisonCallback( a, b ) < 0 // a < b\n * comparisonCallback( a, b ) > 0 // a > b\n * comparisonCallback( a, b ) == 0 // a == b\n * ```\n *\n * @callback comparisonCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Number} -\n *    0 if the two values are considered equal, a negative value if `a` is\n *    considered less than `b`, and a positive value if `a` is considered\n *    greater than `b`.\n * @see Rekord.compare\n * @see Rekord.compareNumbers\n */\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n var AP = Array.prototype;\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      target[ prop ] = option;\n    }\n    else\n    {\n      target[ prop ] = copy( defaultValue );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      target[ prop ] = options[ prop ];\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nRekord.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Rekord.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Rekord.Comparators )\n    {\n      return Rekord.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\nRekord.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Rekord.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Rekord.NumberResolvers )\n  {\n    return Rekord.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nRekord.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Rekord.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.PropertyResolvers )\n    {\n      return Rekord.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model[ properties ];\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nRekord.Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Rekord.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.Wheres )\n    {\n      return Rekord.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\nRekord.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Rekord.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Rekord.Havings )\n    {\n      return Rekord.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n *     target.on( events, callback, [context] )\n *     target.once( events, callback, [context] )\n *     target.off( events, callback )\n *     target.trigger( events, [a, b, c...] )\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @method eventize\n * @for Core\n * @param {Object} target The object to add `on`, `once`, `off`, and `trigger`\n *    functions to.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * **See:** {{#crossLink \"Core/eventize:method\"}}{{/crossLink}}\n   *\n   * @class eventize\n   */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !isDefined( listeners ) )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !isDefined( eventListeners ) )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the next occurrence for each of the given events and invokes\n   * the callback when any of the events are triggered.\n   *\n   * @method once\n   * @for eventize\n   * @param {String|Array|Object} events\n   * @param {Function} callback\n   * @param {Object} [context]\n   * @chainable\n   */\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  if ( options.name in Rekord.cache )\n  {\n    return Rekord.cache[ options.name ];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  Rekord.cache[ database.name ] = model;\n  Rekord.cache[ database.className ] = model;\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.trigger( Rekord.Events.Initialized, [model] );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nRekord.cache = {};\n\nRekord.get = function(name, callback, context)\n{\n  var cached = Rekord.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkRekord()\n      {\n        var cached = Rekord.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Rekord.on( Rekord.Events.Initialized, checkRekord );\n    }\n  }\n\n  return cached;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\neventize( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nRekord.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nRekord.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nRekord.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nRekord.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      model.prototype.$init = function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      };\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Rekord.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Rekord.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n\n    if ( !db.initialized || persistent )\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( Database.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Rekord.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Rekord.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( Database.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Rekord.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( Database.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( Database.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( Database.Events.NoLoad, [db, response] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( GetRemote, cascade );\n  }\n\n});\n\neventize( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Rekord.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Rekord.transactNone( cascade, this, 'save' );\n    }\n\n    return Rekord.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Rekord.transactNone( cascade, this, 'remove' );\n    }\n\n    return Rekord.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n\n    return this;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\neventize( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\nfunction Request(context, success, failure)\n{\n  this.context = context;\n  this.success = success;\n  this.failure = failure;\n  this.call = 0;\n  this.callCanceled = 0;\n}\n\naddMethods( Request.prototype,\n{\n\n  onSuccess: function()\n  {\n    return this.handleCall( this, ++this.call, this.success );\n  },\n\n  onFailure: function()\n  {\n    return this.handleCall( this, this.call, this.failure );\n  },\n\n  handleCall: function(request, currentCall, callback)\n  {\n    return function onHandleCall()\n    {\n      if ( request.call === currentCall &&\n           currentCall > request.callCanceled &&\n           isFunction( callback ) )\n      {\n        callback.apply( request.context, arguments );\n      }\n    };\n  },\n\n  cancel: function()\n  {\n    this.callCanceled = this.call;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isObject( models ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.splice.call( arguments, 0, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      var n = this.length;\n      var half = Math.floor( n / 2 );\n\n      for (var i = 0; i < half; i++)\n      {\n        var k = n - i - 1;\n        var a = this[ i ];\n        this[ i ] = this[ k ];\n        this[ k ] = a;\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\neventize( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","function Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !autoSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new ModelCollection( this.database, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  /**\n   * Builds a key from input. Discriminated collections only accept objects as\n   * input - otherwise there's no way to determine the discriminator. If the\n   * discriminator on the input doesn't map to a Rekord instance OR the input\n   * is not an object the input will be returned instead of a model instance.\n   *\n   * @param {modelInput} input -\n   *    The input to create a key for.\n   * @return {Any} -\n   *    The built key or the given input if a key could not be built.\n   */\n  collection.buildKeyFromInput = function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var discriminatedValue = input[ this.discriminator ];\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      if ( model )\n      {\n        return model.Database.buildKeyFromInput( input );\n      }\n    }\n\n    return input;\n  };\n\n  /**\n   * Takes input and returns a model instance. The input is expected to be an\n   * object, any other type will return null.\n   *\n   * @param {modelInput} input -\n   *    The input to parse to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    Whether or not the input is coming from a remote source.\n   * @return {Rekord.Model} -\n   *    The model instance parsed or null if none was found.\n   */\n  collection.parseModel = function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n\n    var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n    var model = this.discriminatorsToModel[ discriminatedValue ];\n\n    return model ? model.Database.parseModel( input, remoteData ) : null;\n  };\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  collection.clone = function()\n  {\n    return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n  };\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  collection.cloneEmpty = function()\n  {\n    return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n  };\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\nfunction Search(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$status = Search.Status.Success;\n    this.$request = new Request( this, this.$handleSuccess, this.$handleFailure );\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = this.$request.onSuccess();\n    var failure = this.$request.onFailure();\n\n    this.$status = Search.Status.Pending;\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    return this;\n  },\n\n  $cancel: function()\n  {\n    this.$off( Search.Events.Ready );\n    this.$off( Search.Events.Success );\n    this.$off( Search.Events.Failure );\n\n    this.$request.cancel();\n\n    return this;\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Success, callback, context );\n    }\n    else if ( this.$status === Search.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Failure, callback, context );\n    }\n    else if ( this.$status === Search.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(response)\n  {\n    var models = this.$decode.apply( this, arguments );\n\n    this.$status = Search.Status.Success;\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Success, [this, response] );\n  },\n\n  $handleFailure: function(response)\n  {\n    this.$status = Search.Status.Failure;\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Failure, [this, response] );\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n\neventize( Search.prototype, true );\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$once( Search.Events.Ready, this.$onMoreEnd );\n      this.$append = true;\n      this.$run();\n    }\n\n    return this;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nRekord.transaction = null;\n\nRekord.transact = function(cascade, model, operation, func)\n{\n  var transaction = Rekord.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Rekord.transaction = new Transaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Rekord.transaction = null;\n\n    return transaction;\n  }\n};\n\nRekord.transactNone = function(cascade, model, operation)\n{\n  return new Transaction( cascade, model, operation );\n};\n\nfunction Transaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\naddMethods( Transaction.prototype,\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = Transaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = Transaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Rekord.Cascade.Rest )\n      {\n        this.status = Transaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Rekord.Cascade.Local )\n      {\n        this.status = Transaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = Transaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( Transaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n});\n\neventize( Transaction.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Rekord.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Rekord.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Rekord.Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Rekord.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Rekord.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Rekord.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Rekord.Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Rekord.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Rekord.Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Rekord.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      transfer( Polymorphic, this );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Rekord.Save.Model:\n        return related.$toJSON( true );\n\n      case Rekord.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Rekord.Save.Key:\n      case Rekord.Store.Key:\n        return related.$key();\n\n      case Rekord.Save.Keys:\n      case Rekord.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Rekord.Store.Model || this.save === Rekord.Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.Local,\n  cascadeSave:          Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.NoRest,\n  cascadeSave:          Rekord.Cascade.All,\n  cascadeSaveRelated:   Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Rekord.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    transfer( methods, shard );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    transfer( methods, model.prototype );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options)\n  {\n    return new Search( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options)\n  {\n    return new SearchPaged( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || Database.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    model.prototype.$save = function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    };\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    DiscriminateCollection( search, this.discriminator, this.discriminatorToModel );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  global.Rekord.Model = Model;\n  global.Rekord.Database = Database;\n  global.Rekord.Relation = Relation;\n  global.Rekord.Operation = Operation;\n  global.Rekord.Transaction = Transaction;\n  global.Rekord.Search = Search;\n  global.Rekord.SearchPaged = SearchPaged;\n\n  /* Collections */\n  global.Rekord.Map = Map;\n  global.Rekord.Collection = Collection;\n  global.Rekord.FilteredCollection = FilteredCollection;\n  global.Rekord.ModelCollection = ModelCollection;\n  global.Rekord.FilteredModelCollection = FilteredModelCollection;\n  global.Rekord.Page = Page;\n\n  /* Relationships */\n  global.Rekord.HasOne = HasOne;\n  global.Rekord.BelongsTo = BelongsTo;\n  global.Rekord.HasMany = HasMany;\n  global.Rekord.HasManyThrough = HasManyThrough;\n  global.Rekord.HasRemote = HasRemote;\n\n  /* Utility Functions */\n  global.Rekord.isRekord = isRekord;\n  global.Rekord.isDefined = isDefined;\n  global.Rekord.isFunction = isFunction;\n  global.Rekord.isString = isString;\n  global.Rekord.isNumber = isNumber;\n  global.Rekord.isBoolean = isBoolean;\n  global.Rekord.isDate = isDate;\n  global.Rekord.isRegExp = isRegExp;\n  global.Rekord.isArray = isArray;\n  global.Rekord.isObject = isObject;\n  global.Rekord.isValue = isValue;\n\n  global.Rekord.uuid = uuid;\n  global.Rekord.indexOf = indexOf;\n  global.Rekord.propsMatch = propsMatch;\n  global.Rekord.hasFields = hasFields;\n  global.Rekord.toArray = toArray;\n\n  global.Rekord.eventize = eventize;\n\n  global.Rekord.extend = extend;\n  global.Rekord.extendArray = extendArray;\n  global.Rekord.copyConstructor = copyConstructor;\n  global.Rekord.factory = factory;\n\n  global.Rekord.transfer = transfer;\n  global.Rekord.collapse = collapse;\n  global.Rekord.swap = swap;\n  global.Rekord.grab = grab;\n  global.Rekord.pull = pull;\n  global.Rekord.copy = copy;\n  global.Rekord.noop = noop;\n  global.Rekord.bind = bind;\n  global.Rekord.diff = diff;\n  global.Rekord.sizeof = sizeof;\n  global.Rekord.isEmpty = isEmpty;\n  global.Rekord.collect = collect;\n  global.Rekord.applyOptions = applyOptions;\n  global.Rekord.toCamelCase = toCamelCase;\n  global.Rekord.evaluate = evaluate;\n\n  global.Rekord.clean = clean;\n  global.Rekord.cleanFunctions = cleanFunctions;\n\n  global.Rekord.compare = compare;\n  global.Rekord.equals = equals;\n  global.Rekord.equalsStrict = equalsStrict;\n  global.Rekord.equalsCompare = equalsCompare;\n\n  global.Rekord.isSorted = isSorted;\n  global.Rekord.saveComparator = saveComparator;\n  global.Rekord.createComparator = createComparator;\n  global.Rekord.addComparator = addComparator;\n\n  global.Rekord.saveWhere = saveWhere;\n  global.Rekord.createWhere = createWhere;\n\n  global.Rekord.savePropertyResolver = savePropertyResolver;\n  global.Rekord.createPropertyResolver = createPropertyResolver;\n\n  global.Rekord.saveNumberResolver = saveNumberResolver;\n  global.Rekord.createNumberResolver = createNumberResolver;\n\n  global.Rekord.saveHaving = saveHaving;\n  global.Rekord.createHaving = createHaving;\n\n  global.Rekord.parse = parse;\n  global.Rekord.format = format;\n  global.Rekord.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}