{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","dynamic.js","events.js","files.js","Gate.js","Database.js","Model.js","Map.js","Request.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Transaction.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","split","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isValue","isObject","copyConstructor","func","F","extend","parent","child","override","addMethods","constructor","target","methods","methodName","addMethod","factory","args","apply","this","extendArray","extendArraySupported","create","created","transfer","EA","supported","eq","push","isDefined","isFunction","isRekord","Database","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Rekord","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventable","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","saveWhere","Wheres","createWhere","where","cache","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","$once","RemoteSave","$addOperation","SaveLocal","Cascade","Local","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","Map","indices","Request","failure","callCanceled","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","url","SearchPaged","Transaction","cascade","operation","status","completed","operations","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkRekord","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","size","types","fileToValue","filtered","whereProperties","whereValue","whereEquals","find","firstWhere","grabModel","grabAll","ready","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","encoded","update","remove","query","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","resolveModel","resolveModels","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyModel","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","Status","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","onSuccess","handleCall","onFailure","request","currentCall","cancel","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","Ready","Success","Failure","$getDefaults","$append","$url","$results","$request","$handleSuccess","$handleFailure","$run","$encode","$off","$ready","$success","$failure","$offline","offline","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","isFinished","finish","then","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","handleSuccess","handleFailure","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n","\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nRekord.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Rekord.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Rekord.Comparators )\n    {\n      return Rekord.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventable(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventable\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventable\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventable\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventable\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nRekord.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Rekord.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Rekord.NumberResolvers )\n  {\n    return Rekord.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nRekord.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Rekord.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.PropertyResolvers )\n    {\n      return Rekord.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nRekord.Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Rekord.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.Wheres )\n    {\n      return Rekord.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  if ( options.name in Rekord.cache )\n  {\n    return Rekord.cache[ options.name ];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  Rekord.cache[ database.name ] = model;\n  Rekord.cache[ database.className ] = model;\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.trigger( Rekord.Events.Initialized, [model] );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nRekord.cache = {};\n\nRekord.get = function(name, callback, context)\n{\n  var cached = Rekord.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkRekord()\n      {\n        var cached = Rekord.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Rekord.on( Rekord.Events.Initialized, checkRekord );\n    }\n  }\n\n  return cached;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventable( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nRekord.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nRekord.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nRekord.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nRekord.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Rekord.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Rekord.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n\n    if ( !db.initialized || persistent )\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( Database.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Rekord.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Rekord.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( Database.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Rekord.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( Database.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( Database.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( Database.Events.NoLoad, [db, response] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( GetRemote, cascade );\n  }\n\n});\n\naddEventable( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Rekord.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Rekord.transactNone( cascade, this, 'save' );\n    }\n\n    return Rekord.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Rekord.transactNone( cascade, this, 'remove' );\n    }\n\n    return Rekord.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n\n    return this;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventable( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\nfunction Request(context, success, failure)\n{\n  this.context = context;\n  this.success = success;\n  this.failure = failure;\n  this.call = 0;\n  this.callCanceled = 0;\n}\n\naddMethods( Request.prototype,\n{\n\n  onSuccess: function()\n  {\n    return this.handleCall( this, ++this.call, this.success );\n  },\n\n  onFailure: function()\n  {\n    return this.handleCall( this, this.call, this.failure );\n  },\n\n  handleCall: function(request, currentCall, callback)\n  {\n    return function onHandleCall()\n    {\n      if ( request.call === currentCall &&\n           currentCall > request.callCanceled &&\n           isFunction( callback ) )\n      {\n        callback.apply( request.context, arguments );\n      }\n    };\n  },\n\n  cancel: function()\n  {\n    this.callCanceled = this.call;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventable( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventable( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n        i--;\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    return this.eachWhere( cancelIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    return this.eachWhere( refreshIt, properties, value, equals );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n */\nfunction Search(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline'\n};\n\nSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline'\n};\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$status = Search.Status.Success;\n    this.$request = new Request( this, this.$handleSuccess, this.$handleFailure );\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = this.$request.onSuccess();\n    var failure = this.$request.onFailure();\n\n    this.$status = Search.Status.Pending;\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    return this;\n  },\n\n  $cancel: function()\n  {\n    this.$off( Search.Events.Ready );\n    this.$off( Search.Events.Success );\n    this.$off( Search.Events.Failure );\n\n    this.$request.cancel();\n\n    return this;\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Success, callback, context );\n    }\n    else if ( this.$status === Search.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Failure, callback, context );\n    }\n    else if ( this.$status === Search.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $offline: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Offline, callback, context );\n    }\n    else if ( this.$status === Search.Status.Offline )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(response)\n  {\n    var models = this.$decode.apply( this, arguments );\n\n    this.$status = Search.Status.Success;\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Success, [this, response] );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    var offline = status === 0;\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    this.$status = offline ? Search.Status.Offline : Search.Status.Failure;\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( offline ? Search.Events.Offline : Search.Events.Failure, [this, response] );\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n\naddEventable( Search.prototype, true );\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$once( Search.Events.Ready, this.$onMoreEnd );\n      this.$append = true;\n      this.$run();\n    }\n\n    return this;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nRekord.transaction = null;\n\nRekord.transact = function(cascade, model, operation, func)\n{\n  var transaction = Rekord.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Rekord.transaction = new Transaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Rekord.transaction = null;\n\n    return transaction;\n  }\n};\n\nRekord.transactNone = function(cascade, model, operation)\n{\n  return new Transaction( cascade, model, operation );\n};\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Transaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\naddMethods( Transaction.prototype,\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = Transaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = Transaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Rekord.Cascade.Rest )\n      {\n        this.status = Transaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Rekord.Cascade.Local )\n      {\n        this.status = Transaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = Transaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( Transaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n});\n\naddEventable( Transaction.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n      else\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Rekord.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Rekord.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 410 || status === 404 )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Rekord.Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Rekord.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Rekord.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Rekord.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Rekord.Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Rekord.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Rekord.Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Rekord.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Rekord.Save.Model:\n        return related.$toJSON( true );\n\n      case Rekord.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Rekord.Save.Key:\n      case Rekord.Store.Key:\n        return related.$key();\n\n      case Rekord.Save.Keys:\n      case Rekord.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Rekord.Store.Model || this.save === Rekord.Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.Local,\n  cascadeSave:          Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( this.cascadeRemove & Rekord.Cascade.Local )\n          {\n            related.$remove( Rekord.Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.NoRest,\n  cascadeSave:          Rekord.Cascade.All,\n  cascadeSaveRelated:   Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Rekord.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Rekord.Cascade.Local : Rekord.Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options)\n  {\n    return new Search( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options)\n  {\n    return new SearchPaged( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || Database.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    addMethod( model.prototype, '$save', function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    DiscriminateCollection( search, this.discriminator, this.discriminatorToModel );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  global.Rekord.Model = Model;\n  global.Rekord.Database = Database;\n  global.Rekord.Relation = Relation;\n  global.Rekord.Operation = Operation;\n  global.Rekord.Transaction = Transaction;\n  global.Rekord.Search = Search;\n  global.Rekord.SearchPaged = SearchPaged;\n\n  /* Collections */\n  global.Rekord.Map = Map;\n  global.Rekord.Collection = Collection;\n  global.Rekord.FilteredCollection = FilteredCollection;\n  global.Rekord.ModelCollection = ModelCollection;\n  global.Rekord.FilteredModelCollection = FilteredModelCollection;\n  global.Rekord.Page = Page;\n\n  /* Relationships */\n  global.Rekord.HasOne = HasOne;\n  global.Rekord.BelongsTo = BelongsTo;\n  global.Rekord.HasMany = HasMany;\n  global.Rekord.HasManyThrough = HasManyThrough;\n  global.Rekord.HasRemote = HasRemote;\n\n  /* Utility Functions */\n  global.Rekord.isRekord = isRekord;\n  global.Rekord.isDefined = isDefined;\n  global.Rekord.isFunction = isFunction;\n  global.Rekord.isString = isString;\n  global.Rekord.isNumber = isNumber;\n  global.Rekord.isBoolean = isBoolean;\n  global.Rekord.isDate = isDate;\n  global.Rekord.isRegExp = isRegExp;\n  global.Rekord.isArray = isArray;\n  global.Rekord.isObject = isObject;\n  global.Rekord.isValue = isValue;\n\n  global.Rekord.uuid = uuid;\n  global.Rekord.indexOf = indexOf;\n  global.Rekord.propsMatch = propsMatch;\n  global.Rekord.hasFields = hasFields;\n  global.Rekord.toArray = toArray;\n\n  global.Rekord.addEventable = addEventable;\n\n  global.Rekord.extend = extend;\n  global.Rekord.extendArray = extendArray;\n  global.Rekord.copyConstructor = copyConstructor;\n  global.Rekord.factory = factory;\n\n  global.Rekord.transfer = transfer;\n  global.Rekord.collapse = collapse;\n  global.Rekord.swap = swap;\n  global.Rekord.reverse = reverse;\n  global.Rekord.grab = grab;\n  global.Rekord.pull = pull;\n  global.Rekord.copy = copy;\n  global.Rekord.noop = noop;\n  global.Rekord.bind = bind;\n  global.Rekord.diff = diff;\n  global.Rekord.sizeof = sizeof;\n  global.Rekord.isEmpty = isEmpty;\n  global.Rekord.collect = collect;\n  global.Rekord.applyOptions = applyOptions;\n  global.Rekord.toCamelCase = toCamelCase;\n  global.Rekord.evaluate = evaluate;\n\n  global.Rekord.clean = clean;\n  global.Rekord.cleanFunctions = cleanFunctions;\n\n  global.Rekord.compare = compare;\n  global.Rekord.compareNumbers = compareNumbers;\n  global.Rekord.equals = equals;\n  global.Rekord.equalsStrict = equalsStrict;\n  global.Rekord.equalsCompare = equalsCompare;\n\n  global.Rekord.isSorted = isSorted;\n  global.Rekord.saveComparator = saveComparator;\n  global.Rekord.createComparator = createComparator;\n  global.Rekord.addComparator = addComparator;\n\n  global.Rekord.saveWhere = saveWhere;\n  global.Rekord.createWhere = createWhere;\n\n  global.Rekord.savePropertyResolver = savePropertyResolver;\n  global.Rekord.createPropertyResolver = createPropertyResolver;\n\n  global.Rekord.saveNumberResolver = saveNumberResolver;\n  global.Rekord.createNumberResolver = createNumberResolver;\n\n  global.Rekord.parse = parse;\n  global.Rekord.format = format;\n  global.Rekord.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}