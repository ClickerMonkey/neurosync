{"version":3,"sources":["rekord.min.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Rekord","Events","Error","applyOptions","options","defaults","setProperty","value","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","promise","get","isComplete","results","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","keys","indices","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","convertDate","date","Timestamp","Millis","Seconds","formatDate","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","getKey","decoded","revisionRejected","hasKeyChange","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","$invalid","destroyModel","modelKey","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","quietly","$keys","getKeys","$uid","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","index","removeAt","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","buildKey","join","otherFields","akey","bkey","unshift","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","add","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","ceil","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","$off","onRemoved","dirty","$on","isDependent","handleModel","isRelatedFactory","foreign","modelDatabase","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","relatedClones","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","callbackContext","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.2.7 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n(function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      setProperty( defaultProperty, option );\n    }\n    else\n    {\n      setProperty( defaultProperty, copy( defaultValue ) );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      setProperty( optionProperty, options[ optionProperty ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( utc )\n    {\n      x += ' UTC';\n    }\n\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        throw new Error('Model keys cannot be changed');\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        this.$invalid = true;\n\n        return;\n      }\n\n      this.$db.all[ key ] = this;\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n    var off;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n\n\nfunction KeyHandler()\n{\n\n}\n\nKeyHandler.prototype =\n{\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n};\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents[ related.$uid() ] = related;\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nextend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}