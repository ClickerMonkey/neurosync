{"version":3,"sources":["rekord.min.js"],"names":["global","undefined","toArray","x","delimiter","Array","isString","split","isValue","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","reverse","half","Math","floor","isSorted","array","isPrimitiveArray","item","isObject","extend","parent","child","override","copyConstructor","addMethods","constructor","extendArray","extendArraySupported","create","factory","created","apply","transfer","EA","supported","eq","push","target","methods","methodName","addMethod","replaceMethod","methodFactory","func","F","args","this","isDefined","isFunction","isRekord","Database","Model","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","noop","bind","context","uuid","S4","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","avoidCopy","copy","saveComparator","name","comparatorInput","nullsFirst","createComparator","Comparators","addComparator","second","first","b","d","charAt","parsed","isFormatInput","formatter","createFormatter","af","bf","localeCompare","isParseInput","parser","createParser","ap","bp","compare","av","bv","parsedChain","equalsWeak","equalsCompare","equals","at","bt","ar","br","test","aa","ba","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","addEventful","onListeners","$this","property","eventsInput","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","ex","Rekord","Events","Error","applyOptions","options","defaults","setProperty","value","defaultProperty","defaultValue","option","valued","optionProperty","$options","propsMatch","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","model","fields","exists","clearFieldsReturnChanges","targetFields","changes","targetField","updateFieldsReturnChanges","source","sourceFields","targetValue","sourceField","sourceValue","grab","props","copyValues","grabbed","p","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","parse","expr","base","regex","REGEX","nodes","match","exec","format","template","parts","formatted","parseDate","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","saveNumberResolver","numbers","invalidValue","resolver","createNumberResolver","NumberResolvers","createPropertyResolver","parseFloat","savePropertyResolver","PropertyResolvers","propsArray","propsResolver","resolved","camelCaseReplacer","toUpperCase","toCamelCase","replace","escape","regexDelimiter","splits","ae","joined","saveWhere","where","createWhere","Wheres","promise","get","isComplete","results","Options","database","Function","className","classes","Plugins","autoload","loadBegin","success","loadFinish","unloaded","resolve","debug","Debugs","CREATION","canCascade","cascade","type","batch","namesInput","operationsInput","handler","names","operations","batchID","batchHandlers","batches","modelName","modelHandler","createModelHandler","earlyModelHandler","databaseName","modelClass","db","rest","op","batchOverwrites","all","failure","class","operation","encoded","update","remove","query","url","batchRun","batchStart","batchDepth","batchEnd","batchClear","batchExecute","Gate","opened","blocked","gate","AP","open","Defaults","keyHandler","key","KeyComposite","KeySimple","addToFields","models","ModelCollection","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","readyPromise","Promise","prepare","createRest","store","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","save","defaultEncode","data","forSaving","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultRest","defaultCreateStore","defaultStore","defaultCreateLive","defaultLive","defaultResolveModel","response","defaultResolveModels","$db","createModelPromise","restSuccess","restFailure","restOffline","localSuccess","localFailure","Cascade","Rest","off1","$once","off2","off3","status","reject","noline","Local","Map","keys","indices","Dependents","map","KeyHandler","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","input","discriminatedValue","Search","run","$init","SearchPaged","executor","cancelable","Status","Pending","cancel","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveLocal","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","HasList","Shard","addDynamicProperty","modelPrototype","definition","set","Object","defineProperty","configurable","enumerable","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","cached","fileProperties","RemoteSave","$addOperation","mapKeyChangeListener","oldKey","newKey","index","mapKeyChangePut","Map_put","keyChanges","$on","KeyChange","mapKeyChangeRemove","removeAt","enableKeyChanges","disableKeyChanges","Map_remove","convertDate","date","Timestamp","Millis","Seconds","formatDate","loadPromise","load","onLoadFinish","loadedSuccess","loading","promises","existing","Initialized","Online","Offline","None","NoLive","Live","NoRest","Remote","All","Cache","Store","Key","Keys","Save","Load","Lazy","Both","RestStatus","Conflict","409","NotFound","404","410","0","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","MISSING_KEY","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANY_UPDATE_KEY","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASMANYTHRU_UPDATE_KEY","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOTE_NINJA_REMOVE","HASREMOTE_NINJA_SAVE","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","HASLIST_INIT","HASLIST_SORT","HASLIST_NINJA_REMOVE","HASLIST_NINJA_SAVE","HASLIST_REMOVE","HASLIST_ADD","HASLIST_INITIAL","setRest","restSet","put","record","records","setStore","storeSet","setLive","liveSet","online","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","OperationsStarted","OperationsFinished","Loads","keySeparator","ignoredFields","publishAlways","allComplete","loadRelations","autoRefresh","cache","fullSave","fullPublish","encode","decode","resolveModel","resolveModels","setStoreEnabled","enabled","storeDisabled","setRestEnabled","restDisabled","setLiveEnabled","liveDisabled","ready","persistent","hasData","saving","grabModel","checkModel","hasLoad","missingModel","lazyLoad","buildObjectFromKey","RemoteGets","$set","$refresh","hasRemote","buildKeyFromRelations","putRemoteData","instantiate","updated","sort","revisionFunction","getKey","decoded","revisionRejected","hasKeyChange","$setKey","$saved","$toJSON","conflicts","conflicted","previous","saved","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","createModel","$status","$invalid","destroyModel","modelKey","RemoteAndRemove","destroyLocalUncachedModel","$hasChanges","removeKey","Detach","destroyLocalCachedModel","removedValue","destroyLocalModel","RemovePending","SavePending","refresh","onLoaded","onLocalLoad","Removed","triggerLoad","onLocalError","loadNone","onOnline","loadEvent","additionalParameters","concat","onOperationRest","handleRefreshSuccess","mapped","handleRefreshFailure","onRefreshOnline","executeRefresh","complete","isValid","filtered","liveSave","liveRemove","addReference","$isDeleted","UpdateAndSave","CreateAndSave","removeFromModels","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","keyFields","evaluatedValue","$$key","hasRelation","avoidChange","$hasRelation","$get","$decode","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","$hasKey","singularity","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$updated","quietly","$keys","getKeys","$uid","skipApplication","applyKey","$isSynced","$isSaving","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","ignore","$listenForOnline","$offline","$resume","$resumeCascade","JSON","stringify","lastValue","pop","lastKey","size","subtract","dest","v","rebuildIndex","partition","left","right","pivot","j","qsort","toObject","add","handleKeyChange","prefix","updateForeignKey","isSaved","callbackOnSaved","contextOnSaved","dependents","onDependentSave","uid","dependent","buildKey","join","otherFields","akey","bkey","unshift","copyFields","inKey","setKeyField","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","ignorePrimitive","page","whereProperties","whereValue","whereEquals","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","max","compareFunction","firstWhere","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesResolver","keysResolver","each","callbackContext","eachWhere","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","having","havingValue","havingEquals","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","pages","ceil","can","canFirst","canPrev","canLast","canNext","forceApply","end","more","limit","offset","desiredEnd","actualEnd","inputs","rebuild","addingKeys","callRemove","avoidSave","updateWhere","pushWhere","pushIt","popWhere","popIt","discardWhere","discardIt","cancelWhere","cancelIt","refreshWhere","refreshIt","saveIt","hasChanges","getChanges","cloneModels","cloneProperties","onModelUpdated","handleModelUpdate","unrelateWhere","$getDefaults","$append","$url","$results","$promise","$run","$unset","$encode","$handleSuccess","$handleFailure","isPending","offline","$clear","$change","change","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$total","$getTotal","$pages","$page","$can","$canFirst","$canPrev","$canLast","$canNext","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","$setPageSize","$getPageSize","$getPageOffset","$setTotal","Success","Failure","Canceled","Unsuccessful","Complete","iterable","handleSuccess","successes","goal","then","race","reason","promiseComplete","promiseCount","singularityResult","bindPromise","consuming","finish","canceled","clearListeners","listenFor","immediate","isSuccess","unsuccessful","isUnsuccessful","isFailure","catch","isOffline","isCanceled","finished","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","onSuccess","handleFailure","onFailure","previousValue","finishRemove","$saving","$publish","notLive","local","markSaving","remote","publish","changesCopy","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","dynamic","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","search","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","updateFields","getTargetFields","getSourceFields","targetKey","targetKeyHandler","debugUpdateKey","targetNewKey","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","clearModel","setRelated","clearRelated","setModel","clearForeignKey","onSaved","$off","onRemoved","dirty","isDependent","handleModel","isRelatedFactory","modelDatabase","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","src","dst","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","relatedClones","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","added","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelKeys","relatedKeys","onRefresh","hasList","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","shard","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled","boot","instance","dynamics","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","eoptions","relationCopy","fetch","fetchAll","files","fieldOption","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","types","fileToValue","find","findOrCreate","grabAll","persist","searchPaged","collapseOption","hasDefault","timeCurrent","fieldSpecific","currentTimestamp","timeType","timeFormat","timeUTC","addTimestamp","addCreatedAt","addUpdatedAt","addTimestampField","time","timestamps","timestampFormat","timestampType","timestampUTC","timestampCurrent"],"mappings":"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","file":"rekord.min.js","sourcesContent":["/* rekord 1.4.4 - A javascript REST ORM that is offline and real-time capable http://rekord.github.io/rekord/ by Philip Diffenderfer */\n(function(global, undefined)\n{\n\n\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * Rekord.toArray(1); // [1]\n * Rekord.toArray(null); // []\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  if ( x instanceof Array )\n  {\n    return x;\n  }\n  if ( isString( x ) )\n  {\n    return x.split( delimiter );\n  }\n  if ( isValue( x ) )\n  {\n    return [ x ];\n  }\n\n  return [];\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction reverse(arr)\n{\n  var n = arr.length;\n  var half = Math.floor( n / 2 );\n\n  for (var i = 0; i < half; i++)\n  {\n    swap( arr, n - i - 1, i );\n  }\n\n  return arr;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPrimitiveArray(array)\n{\n  for (var i = 0; i < array.length; i++)\n  {\n    var item = array[i];\n\n    if ( isValue( item ) )\n    {\n      return !isObject( item );\n    }\n  }\n\n  return true;\n}\n\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  function EA() {}\n\n  if ( extendArraySupported.supported === undefined )\n  {\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\nfunction replaceMethod(target, methodName, methodFactory)\n{\n  addMethod( target, methodName, methodFactory( target[ methodName ] ) );\n}\n\n\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {}\n  F.prototype = func.prototype;\n  return F;\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\n\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x) // jshint ignore:line\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n  else if ( isNumber( x ) )\n  {\n    return x;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === undefined || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x) // jshint ignore:line\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x, avoidCopy, context)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return context ? x.apply( context ) : x();\n  }\n\n  return avoidCopy ? x : copy( x );\n}\n\n\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nvar Comparators = {};\n\nfunction saveComparator(name, comparatorInput, nullsFirst)\n{\n  var comparator = createComparator( comparatorInput, nullsFirst );\n\n  Comparators[ name ] = comparator;\n\n  return comparator;\n}\n\nfunction addComparator(second, comparatorInput, nullsFirst)\n{\n  var first = createComparator( comparatorInput, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Comparators )\n    {\n      return Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( isFormatInput( comparator ) )\n    {\n      var formatter = createFormatter( comparator );\n\n      return function compareFormatted(a, b)\n      {\n        var af = formatter( a );\n        var bf = formatter( b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( isParseInput( comparator ) )\n    {\n      var parser = createParser( comparator );\n\n      return function compareExpression(a, b)\n      {\n        var ap = parser( a );\n        var bp = parser( b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsedChain = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsedChain[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsedChain.length && d === 0; i++)\n      {\n        d = parsedChain[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n\n\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsWeak(a, b)\n{\n  return a == b; // jshint ignore:line\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b)\n  {\n    return true;\n  }\n  if (a === null || b === null)\n  {\n    return false;\n  }\n  if (a !== a && b !== b)\n  {\n    return true; // NaN === NaN\n  }\n\n  var at = typeof a;\n  var bt = typeof b;\n  var ar = isRegExp(a);\n  var br = isRegExp(b);\n\n  if (at === 'string' && br)\n  {\n    return b.test(a);\n  }\n  if (bt === 'string' && ar)\n  {\n    return a.test(b);\n  }\n\n  if (at !== bt)\n  {\n    return false;\n  }\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba)\n  {\n    return false;\n  }\n\n  if (aa)\n  {\n    if (a.length !== b.length)\n    {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; i++)\n    {\n      if (!equals(a[i], b[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (isDate(a))\n  {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (ar)\n  {\n    return br && a.toString() === b.toString();\n  }\n\n  if (at === 'object')\n  {\n    for (var ap in a)\n    {\n      if (ap.charAt(0) !== '$' && !isFunction(a[ap]))\n      {\n        if (!(ap in b) || !equals(a[ap], b[ap]))\n        {\n          return false;\n        }\n      }\n    }\n\n    for (var bp in b)\n    {\n      if (bp.charAt(0) !== '$' && !isFunction(b[bp]))\n      {\n        if (!(bp in a))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b) // jshint ignore:line\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return (a ? -1 : 1);\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n\n\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    }\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction addEventful(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.addEventful\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.addEventful\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, eventsInput, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( eventsInput, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  }\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for addEventful\n   * @param {String|Array|Object} [eventsInput]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(eventsInput, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( eventsInput ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for addEventful\n   * @param {String} eventsInput\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(eventsInput, args)\n  {\n    try\n    {\n      var events = toArray( eventsInput, ' ' );\n\n      for (var i = 0; i < events.length; i++)\n      {\n        var e = events[ i ];\n\n        triggerListeners( this.$$on, e, args, false );\n        triggerListeners( this.$$once, e, args, true );\n        triggerListeners( this.$$after, e, args, false );\n      }\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n}\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var defaultProperty in defaults)\n  {\n    var defaultValue = defaults[ defaultProperty ];\n    var option = options[ defaultProperty ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw defaultProperty + ' is a required option';\n    }\n    else if ( valued )\n    {\n      setProperty( defaultProperty, option );\n    }\n    else\n    {\n      setProperty( defaultProperty, copy( defaultValue ) );\n    }\n  }\n\n  for (var optionProperty in options)\n  {\n    if ( !(optionProperty in defaults) )\n    {\n      setProperty( optionProperty, options[ optionProperty ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\nfunction clearFieldsReturnChanges(target, targetFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n\n      if ( target[ targetField ] )\n      {\n        target[ targetField ] = null;\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    if ( target[ targetFields ] )\n    {\n      target[ targetFields ] = null;\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\nfunction updateFieldsReturnChanges(target, targetFields, source, sourceFields)\n{\n  var changes = false;\n\n  if ( isArray( targetFields ) ) // && isArray( sourceFields )\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetField = targetFields[ i ];\n      var targetValue = target[ targetField ];\n      var sourceField = sourceFields[ i ];\n      var sourceValue = source[ sourceField ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetField ] = copy( sourceValue );\n        changes = true;\n      }\n    }\n  }\n  else\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n      changes = true;\n    }\n  }\n\n  return changes;\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n\n\nfunction isParseInput(x)\n{\n  return x.indexOf('.') !== -1 || x.indexOf('[') !== -1 || x.indexOf('(') !== -1;\n}\n\nfunction parse(expr, base)\n{\n  return createParser( expr )( base );\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction createParser(expr)\n{\n  var regex = parse.REGEX;\n  var nodes = [];\n  var match = null;\n\n  while ((match = regex.exec( expr )) !== null)\n  {\n    nodes.push( match[ 1 ] );\n  }\n\n  return function(base)\n  {\n    for (var i = 0; i < nodes.length && base !== undefined; i++)\n    {\n      var n = nodes[ i ];\n\n      if ( isObject( base ) )\n      {\n        base = evaluate( base[ n ], true, base );\n      }\n    }\n\n    return base;\n  };\n}\n\nfunction isFormatInput(x)\n{\n  return x.indexOf('{') !== -1;\n}\n\nfunction format(template, base)\n{\n  return createFormatter( template )( base );\n}\n\nformat.REGEX = /[\\{\\}]/;\n\nfunction createFormatter(template)\n{\n  // Every odd element in parts is a parse expression\n  var parts = template.split( format.REGEX );\n\n  for (var i = 1; i < parts.length; i += 2 )\n  {\n    parts[ i ] = createParser( parts[ i ] );\n  }\n\n  return function formatter(base)\n  {\n    var formatted = '';\n\n    for (var i = 0; i < parts.length; i++)\n    {\n      if ( (i & 1) === 0 )\n      {\n        formatted += parts[ i ];\n      }\n      else\n      {\n        var parsed = parts[ i ]( base );\n\n        formatted += isValue( parsed ) ? parsed : '';\n      }\n    }\n\n    return formatted;\n  };\n}\n\nfunction parseDate(x, utc)\n{\n  if ( isString( x ) )\n  {\n    if ( Date.parse )\n    {\n      x = Date.parse( x );\n    }\n\n    if ( !isNumber( x ) )\n    {\n      x = new Date( x );\n    }\n  }\n  if ( isNumber( x ) )\n  {\n    x = new Date( x );\n  }\n  if ( isDate( x ) && isNumber( x.getTime() ) )\n  {\n    if ( utc )\n    {\n      x = new Date( x.getUTCFullYear(), x.getUTCMonth(), x.getUTCDate(), x.getUTCHours(), x.getUTCMinutes(), x.getUTCSeconds() );\n    }\n\n    return x;\n  }\n\n  return false;\n}\n\n\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties resolves to an array of values\n * {age:null, user:'first'} // multiple properties including a sub property returns an object of values\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nvar NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers, invalidValue)\n{\n  var resolver = createNumberResolver( numbers, invalidValue );\n\n  NumberResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\nfunction createNumberResolver(numbers, invalidValue)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in NumberResolvers )\n  {\n    return NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    var parsed = parseFloat( resolver( model ) );\n\n    return isNaN( parsed ) ? invalidValue : parsed;\n  };\n}\n\nvar PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties)\n{\n  var resolver = createPropertyResolver( properties );\n\n  PropertyResolvers[ name ] = resolver;\n\n  return resolver;\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // ['tom', 6]\n * createPropertyResolver( {age:null, user:'first'})( x ) // {age: 6, user:'jack'}\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in PropertyResolvers )\n    {\n      return PropertyResolvers[ properties ];\n    }\n\n    if ( isFormatInput( properties ) )\n    {\n      return createFormatter( properties );\n    }\n    else if ( isParseInput( properties ) )\n    {\n      return createParser( properties );\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model ? model[ properties ] : undefined;\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ] ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var resolved = {};\n\n      for (var i = 0; i < propsArray.length; i++)\n      {\n        var prop = propsArray[ i ];\n\n        resolved[ prop ] = propsResolver[ i ]( model[ prop ] );\n      }\n\n      return resolved;\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    };\n  }\n}\n\n\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n\nfunction split(x, delimiter, escape)\n{\n  var regexDelimiter = isRegExp( delimiter ) ? delimiter : new RegExp( '(' + delimiter + ')' );\n  var splits = x.split( regexDelimiter );\n  var i = 0;\n  var n = splits.length - 2;\n\n  while (i < n)\n  {\n    var a = splits[ i ];\n    var ae = a.length - escape.length;\n\n    if ( a.substring( ae ) === escape )\n    {\n      var b = splits[ i + 1 ];\n      var c = splits[ i + 2 ];\n      var joined = a.substring( 0, ae ) + b + c;\n\n      splits.splice( i, 3, joined );\n      n -= 2;\n    }\n    else\n    {\n      i += 1;\n      splits.splice( i, 1 );\n      n -= 1;\n    }\n  }\n\n  return splits;\n}\n\n\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nvar Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  var where = createWhere( properties, values, equals );\n\n  Wheres[ name ] = where;\n\n  return where;\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Wheres )\n    {\n      return Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n\n\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  var promise = Rekord.get( options.name );\n\n  if ( promise.isComplete() )\n  {\n    return promise.results[0];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')(); // jshint ignore:line\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.classes[ database.name ] = model;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.get( database.name ).resolve( model );\n  Rekord.get( database.className ).resolve( model );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.classes = {};\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.loadPromise = null;\n\nRekord.load = function(callback, context)\n{\n  var promise = Rekord.loadPromise = Rekord.loadPromise || new Promise( null, false );\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  promise.success( callback, context || this );\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      promise.reset().resolve();\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n\n  return promise;\n};\n\nRekord.promises = {};\n\nRekord.get = function(name)\n{\n  var existing = Rekord.promises[ name ];\n\n  if ( !existing )\n  {\n    existing = Rekord.promises[ name ] = new Promise( null, false );\n  }\n\n  return existing;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\naddEventful( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline',\n  Error:        'error'\n};\n\nvar Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nfunction canCascade(cascade, type)\n{\n  return !isNumber( cascade ) || (cascade & type) === type;\n}\n\nvar Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nvar Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nvar Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n\nvar Load =\n{\n  None:   0,\n  All:    1,\n  Lazy:   2,\n  Both:   3\n};\n\nvar RestStatus =\n{\n  Conflict:   {409: true},\n  NotFound:   {404: true, 410: true},\n  Offline:    {0: true}\n};\n\n\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  MISSING_KEY: 33,            // encoded\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, targetFields, Model, sourceFields\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, targetFields, Model, sourceFields\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n  HASMANY_UPDATE_KEY: 129,      // Model, targetFields, Model, sourceFields\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n  HASMANYTHRU_UPDATE_KEY: 130,      // Model, targetFields, Model, sourceFields\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOTE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOTE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOTE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOTE_QUERY_RESULTS: 120,     // Model, RemoteQuery\n\n  HASLIST_INIT: 122,                // HasList\n  HASLIST_SORT: 123,                // relation\n  HASLIST_NINJA_REMOVE: 124,        // Model, Model, relation\n  HASLIST_NINJA_SAVE: 125,          // Model, Model, relation\n  HASLIST_REMOVE: 126,              // HasList, relation, Model\n  HASLIST_ADD: 127,                 // HasList, relation, Model\n  HASLIST_INITIAL: 128              // HasList, Model, relation, initial\n};\n\n\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.defaultRest = Rekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n\n/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.defaultStore = Rekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, undefined );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    },\n\n\n    /**\n     * Resets the store so it contains ONLY the given keys & record pairs.\n     *\n     * @param {String[]} keys -\n     *    The array of keys.\n     * @param {Object[]} records -\n     *    The array of records to save.\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    reset: function(keys, records, success, failure)\n    {\n      success( keys, records );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n\n\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.defaultLive = Rekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n\n\n// Initial online\nRekord.online = global.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n\n  batchExecute(function()\n  {\n    Rekord.trigger( Rekord.Events.Online );\n  });\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for\n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (global.addEventListener)\n  {\n    global.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    global.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  }\n  else\n  {\n    global.document.body.ononline = Rekord.setOnline;\n    global.document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = global.navigator.onLine;\n\n  if ( Rekord.forceOffline )\n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false)\n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true)\n  {\n    Rekord.setOffline();\n  }\n};\n\n\nvar batchDepth = 0;\nvar batches = [];\nvar batchHandlers = [];\nvar batchOverwrites = [];\n\nfunction batch(namesInput, operationsInput, handler)\n{\n  var names = toArray( namesInput, /\\s*,\\s/ );\n  var operations = toArray( operationsInput, /\\s*,\\s/ );\n  var batchID = batchHandlers.push( handler ) - 1;\n  var batch = batches[ batchID ] = new Collection();\n\n  for (var i = 0; i < names.length; i++)\n  {\n    var modelName = names[ i ];\n    var modelHandler = createModelHandler( operations, batch );\n\n    if ( isString( modelName ) )\n    {\n      if ( modelName in Rekord.classes )\n      {\n        modelHandler( Rekord.classes[ modelName ] );\n      }\n      else\n      {\n        earlyModelHandler( modelName, modelHandler );\n      }\n    }\n    else if ( isRekord( modelName ) )\n    {\n      modelHandler( modelName );\n    }\n    else if ( modelName === true )\n    {\n      for (var databaseName in Rekord.classes)\n      {\n        modelHandler( Rekord.classes[ databaseName ] );\n      }\n\n      Rekord.on( Rekord.Events.Plugins, modelHandler );\n    }\n    else\n    {\n      throw modelName + ' is not a valid input for batching';\n    }\n  }\n}\n\nfunction earlyModelHandler(name, modelHandler)\n{\n  var off = Rekord.on( Rekord.Events.Plugins, function(model, database)\n  {\n    if ( database.name === name )\n    {\n      modelHandler( model );\n\n      off();\n    }\n  });\n}\n\nfunction createModelHandler(operations, batch)\n{\n  return function(modelClass)\n  {\n    var db = modelClass.Database;\n    var rest = db.rest;\n\n    for (var i = 0; i < operations.length; i++)\n    {\n      var op = operations[ i ];\n\n      batchOverwrites.push( rest, op, rest[ op ] );\n\n      switch (op)\n      {\n        case 'all':\n          rest.all = function(success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'all',\n              success: success,\n              failure: failure\n            });\n          };\n          break;\n        case 'get':\n          rest.get = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'get',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'create':\n          rest.create = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'create',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'update':\n          rest.update = function(model, encoded, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'update',\n              success: success,\n              failure: failure,\n              model: model,\n              encoded: encoded\n            });\n          };\n          break;\n        case 'remove':\n          rest.remove = function(model, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'remove',\n              success: success,\n              failure: failure,\n              model: model\n            });\n          };\n          break;\n        case 'query':\n          rest.query = function(url, query, success, failure) // jshint ignore:line\n          {\n            batch.push({\n              database: db,\n              class: modelClass,\n              operation: 'query',\n              success: success,\n              failure: failure,\n              url: url,\n              encoded: query\n            });\n          };\n          break;\n        default:\n          throw op + ' is not a valid operation you can batch';\n      }\n    }\n  };\n}\n\nfunction batchRun()\n{\n  for (var i = 0; i < batches.length; i++)\n  {\n    var batch = batches[ i ];\n    var handler = batchHandlers[ i ];\n\n    if ( batch.length )\n    {\n      handler( batch );\n\n      batch.clear();\n    }\n  }\n}\n\nfunction batchStart()\n{\n  batchDepth++;\n}\n\nfunction batchEnd()\n{\n  batchDepth--;\n\n  if ( batchDepth === 0 )\n  {\n    batchRun();\n  }\n}\n\nfunction batchClear()\n{\n  for (var i = 0; i < batchOverwrites.length; i += 3)\n  {\n    var rest = batchOverwrites[ i + 0 ];\n    var prop = batchOverwrites[ i + 1 ];\n    var func = batchOverwrites[ i + 2 ];\n\n    rest[ prop ] = func;\n  }\n\n  batches.length = 0;\n  batchHandlers.length = 0;\n  batchOverwrites.length = 0;\n}\n\nfunction batchExecute(func, context)\n{\n  try\n  {\n    batchStart();\n\n    func.apply( context );\n  }\n  catch (ex)\n  {\n    Rekord.trigger( Rekord.Events.Error, [ex] );\n\n    throw ex;\n  }\n  finally\n  {\n    batchEnd();\n  }\n}\n\nRekord.batch = batch;\nRekord.batchRun = batchRun;\nRekord.batchStart = batchStart;\nRekord.batchEnd = batchEnd;\nRekord.batchClear = batchClear;\nRekord.batchExecute = batchExecute;\nRekord.batchDepth = function() { return batchDepth; };\n\n\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  // Apply the options to this database!\n  applyOptions( this, options, Defaults );\n\n  // Create the key handler based on the given key\n  this.keyHandler = isArray( this.key ) ?\n    new KeyComposite( this ) : new KeySimple( this );\n\n  // If key fields aren't in fields array, add them in\n  this.keyHandler.addToFields( this.fields );\n\n  // Properties\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( this.fields );\n  this.readyPromise = new Promise( null, false );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return database.rest === false ? Rekord.defaultRest( database ) : Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return database.store === false ? Rekord.defaultStore( database ) : Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return database.live === false ? Rekord.defaultLive( database ) : Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:             'no-load',\n  RemoteLoad:         'remote-load',\n  LocalLoad:          'local-load',\n  Updated:            'updated',\n  ModelAdded:         'model-added',\n  ModelUpdated:       'model-updated',\n  ModelRemoved:       'model-removed',\n  OperationsStarted:  'operations-started',\n  OperationsFinished: 'operations-finished',\n  Loads:              'no-load remote-load local-load',\n  Changes:            'updated'\n};\n\nvar Defaults = Database.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  publishAlways:        [],\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  cascade:              Cascade.All,\n  load:                 Load.None,\n  allComplete:          false,\n  loadRelations:        true,\n  autoRefresh:          true,\n  cache:                Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  setStoreEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.storeDisabled )\n      {\n        this.store = this.storeDisabled;\n        this.storeDisabled = false;\n      }\n    }\n    else if ( !this.storeDisabled )\n    {\n      this.storeDisabled = this.store;\n      this.store = Rekord.defaultStore( this );\n    }\n  },\n\n  setRestEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.restDisabled )\n      {\n        this.rest = this.restDisabled;\n        this.restDisabled = false;\n      }\n    }\n    else if ( !this.restDisabled )\n    {\n      this.restDisabled = this.rest;\n      this.rest = Rekord.defaultRest( this );\n    }\n  },\n\n  setLiveEnabled: function(enabled)\n  {\n    if ( enabled )\n    {\n      if ( this.liveDisabled )\n      {\n        this.live = this.liveDisabled;\n        this.liveDisabled = false;\n      }\n    }\n    else if ( !this.liveDisabled )\n    {\n      this.liveDisabled = this.live;\n      this.live = Rekord.defaultLive( this );\n    }\n  },\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    return this.readyPromise.success( callback, context, persistent );\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var promise = new Promise();\n\n    promise.success( callback, context || db );\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !promise.isComplete() && db.initialized )\n      {\n        var remoteLoaded = db.remoteLoaded || !db.hasLoad( Load.All );\n        var missingModel = (result === null || !result.$isSaved());\n        var lazyLoad = db.hasLoad( Load.Lazy );\n\n        if ( lazyLoad && remoteLoaded && missingModel )\n        {\n          if ( !result )\n          {\n            result = db.keyHandler.buildObjectFromKey( db.keyHandler.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !promise.isComplete() )\n            {\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              promise.resolve( result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          promise.resolve( result );\n        }\n      }\n\n      return promise.isComplete() ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n\n    return promise;\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var keyHandler = db.keyHandler;\n    var hasRemote = db.remoteLoaded || !db.hasLoad( Load.All );\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = keyHandler.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        keyHandler.buildKeyFromRelations( input );\n\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      keyHandler.buildKeyFromRelations( input );\n\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.keyHandler.getKey( encoded, true );\n\n    // The remote source might be crazy, if the key isn't there then log it and ignore it\n    if ( !isValue( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n      return;\n    }\n\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      if ( db.keyHandler.hasKeyChange( model, decoded ) )\n      {\n        key = model.$setKey( db.keyHandler.getKey( decoded, true ) );\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var previous = {};\n      var saved = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        previous[ prop ] = model[ prop ];\n        saved[ prop ] = savedValue;\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated, previous, saved, conflicts] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded, updated, previous, saved, conflicts] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( model )\n      {\n        if ( db.cache === Cache.All )\n        {\n          model.$local = model.$toJSON( false );\n          model.$local.$status = model.$status;\n          model.$saved = model.$local.$saved = model.$toJSON( true );\n\n          model.$addOperation( SaveNow );\n        }\n        else\n        {\n          model.$saved = model.$toJSON( true );\n        }\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n\n    if ( model.$invalid === true )\n    {\n      Rekord.debug( Rekord.Debugs.MISSING_KEY, db, decoded );\n\n      return;\n    }\n\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyModel: function(model, modelKey)\n  {\n    var db = this;\n    var key = modelKey || model.$key();\n\n    delete db.all[ key ];\n\n    db.models.remove( key );\n    db.trigger( Database.Events.ModelRemoved, [model] );\n\n    model.$trigger( Model.Events.RemoteAndRemove );\n\n    Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      db.destroyModel( model, key );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n\n        db.keyHandler.removeKey( model );\n\n        if ( model.$local )\n        {\n          delete model.$local.$saved;\n\n          db.keyHandler.removeKey( model.$local );\n        }\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      db.destroyModel( model, key );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    batchExecute(function()\n    {\n      for (var key in db.loaded)\n      {\n        var model = db.loaded[ key ];\n\n        if ( model.$status === Model.Status.RemovePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n          model.$addOperation( RemoveRemote );\n        }\n        else\n        {\n          if ( model.$status === Model.Status.SavePending )\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n            model.$addOperation( SaveRemote );\n          }\n          else\n          {\n            Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n          }\n\n          db.models.put( key, model, true );\n        }\n      }\n    });\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  hasLoad: function(load)\n  {\n    return (this.load & load) !== 0;\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        if ( model.$invalid === true )\n        {\n          Rekord.debug( Rekord.Debugs.MISSING_KEY, db, encoded );\n\n          break;\n        }\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.localLoaded = true;\n      db.triggerLoad( Database.Events.LocalLoad );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.hasLoad( Load.All ) && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  triggerLoad: function(loadEvent, additionalParameters)\n  {\n    var db = this;\n\n    db.initialized = true;\n    db.trigger( loadEvent, [ db ].concat( additionalParameters || [] ) );\n    db.readyPromise.reset().resolve( db );\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.hasLoad( Load.All ) )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.triggerLoad( Database.Events.NoLoad );\n    }\n  },\n\n  onOnline: function()\n  {\n    var db = this;\n\n    db.afterOnline = true;\n\n    if ( db.pendingOperations === 0 )\n    {\n      db.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  handleRefreshSuccess: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshSuccess(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      if ( db.allComplete )\n      {\n        var keys = db.models.keys().slice();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var k = keys[ i ];\n\n          if ( !(k in mapped) )\n          {\n            var old = db.models.get( k );\n\n            if ( old.$saved )\n            {\n              Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n              db.destroyLocalModel( k );\n            }\n          }\n        }\n      }\n\n      db.remoteLoaded = true;\n      db.triggerLoad( Database.Events.RemoteLoad );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      promise.resolve( db.models );\n    };\n  },\n\n  handleRefreshFailure: function(promise)\n  {\n    var db = this;\n\n    return function onRefreshFailure(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.triggerLoad( Database.Events.NoLoad, [response] );\n      }\n\n      promise.reject( db.models );\n    };\n  },\n\n  executeRefresh: function(success, failure)\n  {\n    this.rest.all( success, failure );\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var promise = new Promise();\n    var success = this.handleRefreshSuccess( promise );\n    var failure = this.handleRefreshFailure( promise );\n\n    promise.complete( callback, context || db );\n\n    batchExecute(function()\n    {\n      db.executeRefresh( success, failure );\n    });\n\n    return promise;\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.keyHandler.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  }\n\n});\n\naddEventful( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n\n\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  OperationsStarted:    'operations-started',\n  OperationsFinished:   'operations-finished',\n  KeyChange:            'key-change',\n  Changes:              'saved remote-update key-update relation-update removed key-change change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = new Dependents( this );\n\n    if ( remoteData )\n    {\n      var key = this.$db.keyHandler.getKey( props, true );\n\n      if ( !isValue( key ) )\n      {\n        this.$invalid = true;\n\n        return;\n      }\n\n      this.$db.all[ key ] = this;\n      this.$set( props, undefined, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, undefined, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyHandler = this.$db.keyHandler;\n    var keyFields = this.$db.key;\n\n    if ( !isEmpty( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = null;\n\n    // First try pulling key from properties (only if it hasn't been\n    // initialized through defaults)\n    if ( props )\n    {\n      key = keyHandler.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( !isValue( key ) )\n    {\n      key = keyHandler.getKey( this );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      updateFieldsReturnChanges( this, keyFields, props, keyFields );\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( isValue( key ) )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Apply the default relation values now that this key is most likely populated\n    if ( !isEmpty( def ) )\n    {\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var hasRelation = !!this.$relations[ prop ];\n          var relation = this.$getRelation( prop, evaluatedValue );\n\n          if ( hasRelation )\n          {\n            relation.set( this, evaluatedValue );\n          }\n        }\n      }\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData, avoidChange)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData, true );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var exists = this.$hasRelation( props );\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        if ( exists )\n        {\n          relation.set( this, value, remoteData );\n        }\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( !avoidChange && isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $hasRelation: function(prop)\n  {\n    return prop in this.$relations;\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( !this.$hasKey() )\n    {\n      throw 'Key missing from model';\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteSave,\n      Model.Events.RemoteSaveFailure,\n      Model.Events.RemoteSaveOffline,\n      Model.Events.LocalSave,\n      Model.Events.LocalSaveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$db.addReference( this );\n\n        this.$set( setProperties, setValue );\n\n        this.$trigger( Model.Events.PreSave, [this] );\n\n        this.$db.save( this, cascade );\n\n        this.$trigger( Model.Events.PostSave, [this] );\n\n      }, this );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : this.$db.cascade;\n\n    if ( !this.$exists() )\n    {\n      return Promise.resolve( this );\n    }\n\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteRemove,\n      Model.Events.RemoteRemoveFailure,\n      Model.Events.RemoteRemoveOffline,\n      Model.Events.LocalRemove,\n      Model.Events.LocalRemoveFailure\n    );\n\n    return Promise.singularity( promise, this, function(singularity)\n    {\n      batchExecute(function()\n      {\n        this.$trigger( Model.Events.PreRemove, [this] );\n\n        this.$db.remove( this, cascade );\n\n        this.$trigger( Model.Events.PostRemove, [this] );\n\n      }, this );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    var promise = createModelPromise( this, cascade,\n      Model.Events.RemoteGet,\n      Model.Events.RemoteGetFailure,\n      Model.Events.RemoteGetOffline,\n      Model.Events.LocalGet,\n      Model.Events.LocalGetFailure\n    );\n\n    if ( canCascade( cascade, Cascade.Rest ) )\n    {\n      this.$addOperation( GetRemote, cascade );\n    }\n    else if ( canCascade( cascade, Cascade.Local ) )\n    {\n      this.$addOperation( GetLocal, cascade );\n    }\n    else\n    {\n      promise.resolve( this );\n    }\n\n    return promise;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.keyHandler.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $updated: function()\n  {\n    this.$changed();\n    this.$db.trigger( Database.Events.ModelUpdated, [this] );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.keyHandler.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.keyHandler.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $setKey: function(key, skipApplication)\n  {\n    var db = this.$db;\n    var newKey = db.keyHandler.buildKeyFromInput(key);\n    var oldKey = this.$$key;\n\n    if (newKey !== oldKey)\n    {\n      if (!db.keyChanges)\n      {\n        throw 'Key changes are not supported, see the documentation on how to enable key changes.';\n      }\n\n      delete db.all[ oldKey ];\n      db.all[ newKey ] = this;\n\n      this.$$key = newKey;\n\n      if ( !skipApplication )\n      {\n        db.keyHandler.applyKey( newKey, this );\n      }\n\n      this.$trigger( Model.Events.KeyChange, [this, oldKey, newKey] );\n    }\n\n    return newKey;\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isSaving: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending || this.$status === Model.Status.RemovePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  $listenForOnline: function(cascade)\n  {\n    if (!this.$offline)\n    {\n      this.$offline = true;\n\n      Rekord.once( Rekord.Events.Online, this.$resume, this );\n    }\n\n    this.$resumeCascade = cascade;\n  },\n\n  $resume: function()\n  {\n    if (this.$status === Model.Status.RemovePending)\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_RESUME, this );\n\n      this.$addOperation( RemoveRemote, this.$resumeCascade );\n    }\n    else if (this.$status === Model.Status.SavePending)\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, this );\n\n      this.$addOperation( SaveRemote, this.$resumeCascade );\n    }\n\n    this.$offline = false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\naddEventful( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n\nfunction createModelPromise(model, cascade, restSuccess, restFailure, restOffline, localSuccess, localFailure)\n{\n  var promise = new Promise( null, false );\n\n  if ( canCascade( cascade, Cascade.Rest ) )\n  {\n    var off1 = model.$once( restSuccess, function(data) {\n      off2();\n      off3();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( restFailure, function(data, status) {\n      off1();\n      off3();\n      promise.reject( model, status, data );\n    });\n    var off3 = model.$once( restOffline, function() {\n      off1();\n      off2();\n      promise.noline( model );\n    });\n  }\n  else if ( canCascade( cascade, Cascade.Local ) )\n  {\n    var off1 = model.$once( localSuccess, function(data)\n    {\n      off2();\n      promise.resolve( model, data );\n    });\n    var off2 = model.$once( localFailure, function(data, status)\n    {\n      off1();\n      promise.reject( model, data );\n    });\n  }\n  else\n  {\n    promise.resolve( model );\n  }\n\n  return promise;\n}\n\n\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    reverse( this.values );\n    reverse( this.keys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0)\n        {\n          i++;\n        }\n        while (comparator( map.values[j], pivot ) > 0)\n        {\n          j--;\n        }\n\n        if (i <= j)\n        {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  },\n\n  /**\n   * Builds an object contain the keys and values in this map.\n   *\n   * @return {Object} -\n   *         The built object.\n   */\n  toObject: function(out)\n  {\n    var target = out || {};\n    var keys = this.keys;\n    var values = this.values;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      target[ keys[ i ] ] = values[ i ];\n    }\n\n    return target;\n  }\n\n});\n\n\nfunction Dependents(subject)\n{\n  this.map = {};\n  this.listeners = {};\n\n  this.subject = subject;\n}\n\nDependents.prototype =\n{\n  add: function(model, relator)\n  {\n    var key = model.$uid();\n\n    this.map[ key ] = model;\n\n    if ( model.$db.keyChanges && !this.listeners[ key ] )\n    {\n      var listener = this.handleKeyChange( relator );\n\n      this.listeners[ key ] = model.$on( Model.Events.KeyChange, listener, this );\n    }\n  },\n\n  remove: function(model)\n  {\n    var key = model.$uid();\n\n    evaluate( this.listeners[ key ] );\n\n    delete this.listeners[ key ];\n    delete this.map[ key ];\n  },\n\n  handleKeyChange: function(relator)\n  {\n    return function(model, oldKey, newKey)\n    {\n      var prefix = model.$db.name + '$';\n\n      oldKey = prefix + oldKey;\n      newKey = prefix + newKey;\n\n      this.listeners[ newKey ] = this.listeners[ oldKey ];\n      this.map[ newKey ] = this.map[ oldKey ];\n\n      delete this.listeners[ oldKey ];\n      delete this.map[ oldKey ];\n\n      relator.updateForeignKey( this.subject, model, true );\n    };\n  },\n\n  isSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.map;\n    var off = noop;\n\n    var onDependentSave = function()\n    {\n      callbackOnSaved.apply( contextOnSaved || this, arguments );\n\n      off();\n    };\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n};\n\n\nfunction KeyHandler()\n{\n\n}\n\nKeyHandler.prototype =\n{\n  init: function(database)\n  {\n    this.key = database.key;\n    this.keySeparator = database.keySeparator;\n    this.database = database;\n  },\n\n  getKey: function(model, quietly)\n  {\n    var field = this.key;\n    var modelKey = this.buildKey( model, field );\n\n    if ( hasFields( model, field, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return null;\n  },\n\n  buildKeyFromRelations: function(input)\n  {\n    if ( isObject( input ) )\n    {\n      var relations = this.database.relations;\n\n      for (var relationName in relations)\n      {\n        if ( relationName in input )\n        {\n          relations[ relationName ].buildKey( input );\n        }\n      }\n    }\n  },\n\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.database.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return input.join( this.keySeparator );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input );\n    }\n\n    return input;\n  }\n};\n\n\nfunction KeySimple(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeySimple,\n{\n  getKeys: function(model)\n  {\n    return this.buildKey( model );\n  },\n\n  removeKey: function(model)\n  {\n    var field = this.key;\n\n    delete model[ field ];\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    var field = otherFields || this.key;\n    var key = input[ field ];\n\n    if ( !isValue( key ) )\n    {\n      key = input[ field ] = uuid();\n    }\n\n    return key;\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var field = this.key;\n    var props = {};\n\n    props[ field ] = key;\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var field = this.key;\n    var akey = a[ field ];\n    var bkey = b[ field ];\n\n    return isValue( akey ) && isValue( bkey ) && akey !== bkey;\n  },\n\n  addToFields: function(out)\n  {\n    var field = this.key;\n\n    if ( indexOf( out, field ) === false )\n    {\n      out.unshift( field );\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    var targetValue = target[ targetFields ];\n    var sourceValue = source[ sourceFields ];\n\n    if ( !isValue( targetValue ) && isValue( sourceValue ) )\n    {\n      target[ targetFields ] = copy( sourceValue );\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( field[ i ] === this.key )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return field === this.key;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    if ( field === target )\n    {\n      key[ field ] = source[ this.key ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    target[ this.key ] = input;\n  }\n\n});\n\n\nfunction KeyComposite(database)\n{\n  this.init( database );\n}\n\nextend( KeyHandler, KeyComposite,\n{\n  getKeys: function(input, otherFields)\n  {\n    this.buildKeyFromRelations( input );\n\n    return pull( input, otherFields || this.key );\n  },\n\n  removeKey: function(model)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      delete model[ fields[ i ] ];\n    }\n  },\n\n  buildKey: function(input, otherFields)\n  {\n    return this.getKeys( input, otherFields ).join( this.keySeparator );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var fields = this.key;\n    var props = {};\n\n    if ( isString( key ) )\n    {\n      key = key.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      props[ fields[ i ] ] = key[ i ];\n    }\n\n    return this.database.instantiate( props );\n  },\n\n  hasKeyChange: function(a, b)\n  {\n    var fields = this.key;\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var akey = a[ fields[ i ] ];\n      var bkey = b[ fields[ i ] ];\n\n      if ( isValue( akey ) && isValue( bkey ) && akey !== bkey )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  addToFields: function(out)\n  {\n    var fields = this.key;\n\n    for (var i = fields.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( out, fields[ i ] ) === false )\n      {\n        out.unshift( fields[ i ] );\n      }\n    }\n  },\n\n  isValid: function(key)\n  {\n    return isValue( key );\n  },\n\n  copyFields: function(target, targetFields, source, sourceFields)\n  {\n    for (var i = 0; i < targetFields.length; i++)\n    {\n      var targetValue = target[ targetFields[ i ] ];\n      var sourceValue = source[ sourceFields[ i ] ];\n\n      if ( !isValue( targetValue ) && isValue( sourceValue ) )\n      {\n        target[ targetFields[ i ] ] = copy( sourceValue );\n      }\n    }\n  },\n\n  inKey: function(field)\n  {\n    if ( isArray( field ) )\n    {\n      for (var i = 0; i < field.length; i++)\n      {\n        if ( indexOf( this.key, field[ i ] ) !== false )\n        {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return indexOf( this.key, field ) !== false;\n  },\n\n  setKeyField: function(key, field, source, target)\n  {\n    var index = indexOf( target );\n\n    if ( index !== false )\n    {\n      key[ field ] = source[ this.key[ index ] ];\n    }\n  },\n\n  applyKey: function(input, target)\n  {\n    var fields = this.key;\n\n    if ( isString( input ) )\n    {\n      input = input.split( this.keySeparator );\n    }\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      target[ fields[ i ] ] = input[ i ];\n    }\n  }\n\n});\n\n\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values, true );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @param {Boolean} [ignorePrimitive=false] -\n   *    Sorting is automatically done for non-primitive collections if a\n   *    comparator exists. This flag ensures primitive collections aren't sorted\n   *    after every operation.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst, ignorePrimitive)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) || ( !ignorePrimitive && !cmp && isPrimitiveArray( this ) ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isValue( values ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort( undefined, undefined, true );\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n\n    this.sort( undefined, undefined, true );\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort( undefined, undefined, true );\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort( undefined, undefined, true );\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort( undefined, undefined, true );\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      reverse( this );\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @param {compareCallback} [compareFunction=Rekord.compare] -\n   *    A comparison function to use.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, startingValue, compareFunction)\n  {\n    var comparator = compareFunction || compare;\n    var resolver = createPropertyResolver( properties );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( comparator( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties)\n  {\n    var resolver = createPropertyResolver( properties );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys)\n  {\n    var valuesResolver = createPropertyResolver( values );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( callbackContext, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each element in this collection that matches the where\n   * expression and passes the element and it's index to the given function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   */\n  eachWhere: function(callback, properties, values, equals)\n  {\n    var where = createWhere( properties, values, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      if ( where( item ) )\n      {\n        callback.call( this, item, i );\n\n        if ( this[ i ] !== item )\n        {\n          i--;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by );\n    var having = createWhere( grouping.having, grouping.havingValue, grouping.havingEquals );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\naddEventful( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n\n\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onCleared );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = this.page( pageIndex );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  total: function()\n  {\n    return this.collection.length;\n  },\n\n  pages: function()\n  {\n    return Math.ceil( this.total() / this.pageSize );\n  },\n\n  page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.pages() - 1 ) );\n  },\n\n  can: function(index)\n  {\n    return this.total() && index >= 0 && index < this.pageCount;\n  },\n\n  canFirst: function()\n  {\n    return this.canPrev();\n  },\n\n  canLast: function()\n  {\n    return this.canNext();\n  },\n\n  canPrev: function()\n  {\n    return this.total() && this.pageIndex > 0;\n  },\n\n  canNext: function()\n  {\n    return this.total() && this.pageIndex < this.pageCount - 1;\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var pageCount = this.pages();\n    var pageIndex = this.page( this.pageIndex );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\naddEventful( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n\n\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.keyHandler.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var k = 0; k < models.length && !exists; k++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ k ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, AP.slice.apply(values)] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.slice.call( arguments, 2 );\n    var addingKeys = [start, deleteCount];\n    for (var i = 0; i < adding.length; i++)\n    {\n      addingKeys.push( this.buildKeyFromInput( adding[ i ] ) );\n    }\n\n    var removed = AP.splice.apply( this, arguments );\n\n    AP.splice.apply( this.map.keys, addingKeys );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var key = model.$key();\n\n        if ( where( model ) )\n        {\n          this.map.remove( key );\n          removed.push( model );\n          i--;\n\n          if ( callRemove )\n          {\n            model.$remove();\n          }\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave, cascade)\n  {\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        model.$set( props, value, remoteData );\n\n        if ( !avoidSave )\n        {\n          model.$save();\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave, cascade)\n  {\n    var updated = [];\n\n    batchExecute(function()\n    {\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n\n        if ( where( model ) )\n        {\n          model.$set( props, value, remoteData );\n\n          if ( !avoidSave )\n          {\n            model.$save( cascade );\n          }\n\n          updated.push( model );\n        }\n      }\n\n    }, this );\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$push} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String[]} [fields] -\n   *    The set of fields to save for later popping or discarding. If not\n   *    specified, all model fields will be saved.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$push\n   */\n  pushWhere: function(fields, properties, value, equals)\n  {\n    function pushIt(model)\n    {\n      model.$push( fields );\n    }\n\n    return this.eachWhere( pushIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$pop} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [dontDiscard=false] -\n   *    Whether to remove the saved state after the saved state has been applied\n   *    back to the model. A falsy value will result in\n   *    {@link Rekord.Model#$discard} being called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$pop\n   */\n  popWhere: function(dontDiscard, properties, value, equals)\n  {\n    function popIt(model)\n    {\n      model.$pop( dontDiscard );\n    }\n\n    return this.eachWhere( popIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$discard} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$discard\n   */\n  discardWhere: function(properties, value, equals)\n  {\n    function discardIt(model)\n    {\n      model.$discard();\n    }\n\n    return this.eachWhere( discardIt, properties, value, equals );\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$cancel} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [reset=false] -\n   *    If reset is true and the model doesn't have a saved state -\n   *    {@link Rekord.Model#$reset} will be called.\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$cancel\n   */\n  cancelWhere: function(reset, properties, value, equals)\n  {\n    function cancelIt(model)\n    {\n      model.$cancel( reset );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( cancelIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$refresh} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  refreshWhere: function(properties, value, equals)\n  {\n    function refreshIt(model)\n    {\n      model.$refresh();\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( refreshIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Calls {@link Rekord.Model#$save} on models in this collection that meet\n   * the given where expression.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Object} [props={}] -\n   *    Properties to apply to each model in the collection that pass the where\n   *    expression.\n   * @param {Number} [cascade] -\n   *    Which operations should be performed out of: store, rest, & live.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$refresh\n   */\n  saveWhere: function(properties, value, equals, props, cascade)\n  {\n    function saveIt(model)\n    {\n      model.$save( props, cascade );\n    }\n\n    batchExecute(function()\n    {\n      this.eachWhere( saveIt, properties, value, equals );\n\n    }, this );\n\n    return this;\n  },\n\n  /**\n   * Returns whether this collection has at least one model with changes. An\n   * additional where expression can be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @return {Boolean} -\n   *    True if at least one model has changes, otherwise false.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   */\n  hasChanges: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    var hasChanges = function( model )\n    {\n      return where( model ) && model.$hasChanges();\n    };\n\n    return this.contains( hasChanges );\n  },\n\n  /**\n   * Returns a collection of all changes for each model. The changes are keyed\n   * into the collection by the models key. An additional where expression can\n   * be given to only check certain models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    See {@link Rekord.createWhere}\n   * @param {Rekord.ModelCollection} [out] -\n   *    The collection to add the changes to.\n   * @return {Rekord.ModelCollection} -\n   *    The collection with all changes to models in this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.Model#$hasChanges\n   * @see Rekord.Model#$getChanges\n   */\n  getChanges: function(properties, value, equals, out)\n  {\n    var where = createWhere( properties, value, equals );\n    var changes = out && out instanceof ModelCollection ? out : this.cloneEmpty();\n\n    this.each(function(model)\n    {\n      if ( where( model ) && model.$hasChanges() )\n      {\n        changes.put( model.$key(), model.$getChanges() );\n      }\n    });\n\n    return changes;\n  },\n\n  /**\n   * Converts this collection into an object where the keys of the models are\n   * the object properties and the models are the values.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Object} [out] -\n   *    The object to place the models in.\n   * @return {Object} -\n   *    The object containing the models in this collection.\n   */\n  toObject: function(out)\n  {\n    return this.map.toObject( out );\n  },\n\n  /**\n   * Returns a clone of this collection. Optionally the models in this\n   * collection can also be cloned.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [cloneModels=false] -\n   *    Whether or not the models should be cloned as well.\n   * @param {Boolean} [cloneProperties] -\n   *    The properties object which defines what fields should be given a\n   *    different (non-cloned) value and which relations need to be cloned.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   * @see Rekord.Model#$clone\n   */\n  clone: function(cloneModels, cloneProperties)\n  {\n    var source = this;\n\n    if ( cloneModels )\n    {\n      source = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        source[ i ] = this[ i ].$clone( cloneProperties );\n      }\n    }\n\n    return new ModelCollection( this.database, source, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n\n\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates any models in this collection which meet the where expression.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {whereInput} [properties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [value] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [equals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @see Rekord.RelationCollection.unrelate\n   * @see Rekord.RelationCollection.where\n   */\n  unrelateWhere: function(properties, value, equals)\n  {\n    return this.unrelate( this.where( properties, value, equals, [] ) );\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n\n\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.keyHandler.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n\n\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Search(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options, props, run)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$set( props );\n    this.$results = new ModelCollection( database );\n    this.$promise = Promise.resolve( this );\n\n    if ( run )\n    {\n      this.$run();\n    }\n  },\n\n  $set: function(props)\n  {\n    if ( isObject( props ) )\n    {\n      transfer( props, this );\n    }\n\n    return this;\n  },\n\n  $unset: function()\n  {\n    for (var prop in this)\n    {\n      if ( prop.charAt(0) !== '$' )\n      {\n        delete this[ prop ];\n      }\n    }\n\n    return this;\n  },\n\n  $run: function(url, props)\n  {\n    this.$url = url || this.$url;\n    this.$set( props );\n\n    var encoded = this.$encode();\n    var success = bind( this, this.$handleSuccess );\n    var failure = bind( this, this.$handleFailure );\n\n    batchExecute(function()\n    {\n      this.$cancel();\n      this.$promise = new Promise();\n      this.$db.rest.query( this.$url, encoded, success, failure );\n\n    }, this );\n\n    return this.$promise;\n  },\n\n  $handleSuccess: function(response)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var models = this.$decode.apply( this, arguments );\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$promise.resolve( this, response, this.$results );\n  },\n\n  $handleFailure: function(response, status)\n  {\n    if ( !this.$promise.isPending() )\n    {\n      return;\n    }\n\n    var offline = RestStatus.Offline[ status ];\n\n    if ( offline )\n    {\n      Rekord.checkNetworkStatus();\n\n      offline = !Rekord.online;\n    }\n\n    if ( offline )\n    {\n      this.$promise.noline( this, response, status );\n    }\n    else\n    {\n      this.$promise.reject( this, response, status );\n    }\n  },\n\n  $cancel: function()\n  {\n    this.$promise.cancel();\n  },\n\n  $clear: function()\n  {\n    this.$results.clear();\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  },\n\n  $change: function(callback, context)\n  {\n    return this.$results.change( callback, context );\n  }\n\n});\n\n\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options, props, run)\n{\n  this.$init( database, url, options, props, run );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this.$promise;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$append = true;\n      this.$run();\n      this.$promise.complete( this.$onMoreEnd, this );\n    }\n\n    return this.$promise;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $total: function()\n  {\n    return this.$getTotal();\n  },\n\n  $pages: function()\n  {\n    return this.$getPageCount();\n  },\n\n  $page: function(index)\n  {\n    return Math.max( 0, Math.min( index, this.$pages() - 1 ) );\n  },\n\n  $can: function(index)\n  {\n    return this.$getTotal() && index >= 0 && index < this.$getPageCount();\n  },\n\n  $canFirst: function()\n  {\n    return this.$canPrev();\n  },\n\n  $canLast: function()\n  {\n    return this.$canNext();\n  },\n\n  $canPrev: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() > 0;\n  },\n\n  $canNext: function()\n  {\n    return this.$getTotal() && this.$getPageIndex() < this.$getPageCount() - 1;\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n\n\nfunction Promise(executor, cancelable)\n{\n  this.status = Promise.Status.Pending;\n  this.results = null;\n  this.cancelable = cancelable !== false;\n\n  if ( isFunction( executor ) )\n  {\n    executor(\n      bind(this, this.resolve),\n      bind(this, this.reject),\n      bind(this, this.noline),\n      bind(this, this.cancel)\n    );\n  }\n}\n\nPromise.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure',\n  Offline:    'offline',\n  Canceled:   'canceled'\n};\n\nPromise.Events =\n{\n  Success:      'success',\n  Failure:      'failure',\n  Offline:      'offline',\n  Canceled:     'canceled',\n  Unsuccessful: 'failure offline canceled',\n  Complete:     'success failure offline canceled'\n};\n\nPromise.all = function(iterable)\n{\n  var all = new Promise();\n  var successes = 0;\n  var goal = iterable.length;\n  var results = [];\n\n  function handleSuccess()\n  {\n    results.push( AP.slice.apply( arguments ) );\n\n    if ( ++successes === goal )\n    {\n      all.resolve( results );\n    }\n  }\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( handleSuccess, all.reject, all.noline, all.cancel, all );\n    }\n    else\n    {\n      goal--;\n    }\n  }\n\n  return all;\n};\n\nPromise.race = function(iterable)\n{\n  var race = new Promise();\n\n  for (var i = 0; i < iterable.length; i++)\n  {\n    var p = iterable[ i ];\n\n    if ( p instanceof Promise )\n    {\n      p.then( race.resolve, race.reject, race.noline, race.cancel, race );\n    }\n  }\n\n  return race;\n};\n\nPromise.reject = function(reason)\n{\n  var p = new Promise();\n  p.reject.apply( p, arguments );\n  return p;\n};\n\nPromise.resolve = function()\n{\n  var p = new Promise();\n  p.resolve.apply( p, arguments );\n  return p;\n};\n\nPromise.noline = function(reason)\n{\n  var p = new Promise();\n  p.noline.apply( p, arguments );\n  return p;\n};\n\nPromise.cancel = function()\n{\n  var p = new Promise();\n  p.cancel.apply( p, arguments );\n  return p;\n};\n\nPromise.singularity = (function()\n{\n  var singularity = null;\n  var singularityResult = null;\n  var consuming = false;\n  var promiseCount = 0;\n  var promiseComplete = 0;\n\n  function handleSuccess()\n  {\n    if ( ++promiseComplete === promiseCount )\n    {\n      singularity.resolve( singularityResult );\n    }\n  }\n\n  function bindPromise(promise)\n  {\n    promiseCount++;\n    promise.then( handleSuccess, singularity.reject, singularity.noline, null, singularity );\n  }\n\n  return function(promise, context, callback)\n  {\n    if ( !consuming )\n    {\n      consuming = true;\n      singularity = new Promise( null, false );\n      singularityResult = context;\n      promiseCount = 0;\n      promiseComplete = 0;\n\n      bindPromise( promise );\n\n      try\n      {\n        callback.call( context, singularity );\n      }\n      catch (ex)\n      {\n        Rekord.trigger( Rekord.Events.Error, [ex] );\n\n        throw ex;\n      }\n      finally\n      {\n        consuming = false;\n      }\n    }\n    else\n    {\n      bindPromise( promise );\n\n      callback.call( context, singularity );\n    }\n\n    return singularity;\n  };\n\n})();\n\naddMethods( Promise.prototype,\n{\n  resolve: function()\n  {\n    this.finish( Promise.Status.Success, Promise.Events.Success, arguments );\n  },\n\n  reject: function()\n  {\n    this.finish( Promise.Status.Failure, Promise.Events.Failure, arguments );\n  },\n\n  noline: function()\n  {\n    this.finish( Promise.Status.Offline, Promise.Events.Offline, arguments );\n  },\n\n  cancel: function()\n  {\n    if ( this.cancelable )\n    {\n      this.finish( Promise.Status.Canceled, Promise.Events.Canceled, arguments );\n    }\n  },\n\n  then: function(success, failure, offline, canceled, context, persistent )\n  {\n    this.success( success, context, persistent );\n    this.failure( failure, context, persistent );\n    this.offline( offline, context, persistent );\n    this.canceled( canceled, context, persistent );\n\n    return this;\n  },\n\n  reset: function(clearListeners)\n  {\n    this.status = Promise.Status.Pending;\n\n    if ( clearListeners )\n    {\n      this.off();\n    }\n\n    return this;\n  },\n\n  finish: function(status, events, results)\n  {\n    if ( this.status === Promise.Status.Pending )\n    {\n      this.results = AP.slice.apply( results );\n      this.status = status;\n      this.trigger( events, results );\n    }\n  },\n\n  listenFor: function(immediate, events, callback, context, persistent)\n  {\n    if ( isFunction( callback ) )\n    {\n      if ( this.status === Promise.Status.Pending )\n      {\n        if ( persistent )\n        {\n          this.on( events, callback, context );\n        }\n        else\n        {\n          this.once( events, callback, context );\n        }\n      }\n      else if ( immediate )\n      {\n        callback.apply( context || this, this.results );\n      }\n    }\n\n    return this;\n  },\n\n  success: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isSuccess(), Promise.Events.Success, callback, context, persistent );\n  },\n\n  unsuccessful: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isUnsuccessful(), Promise.Events.Unsuccessful, callback, context, persistent );\n  },\n\n  failure: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  catch: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isFailure(), Promise.Events.Failure, callback, context, persistent );\n  },\n\n  offline: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isOffline(), Promise.Events.Offline, callback, context, persistent );\n  },\n\n  canceled: function(callback, context, persistent)\n  {\n    return this.listenFor( this.isCanceled(), Promise.Events.Canceled, callback, context, persistent );\n  },\n\n  complete: function(callback, context, persistent)\n  {\n    return this.listenFor( true, Promise.Events.Complete, callback, context, persistent );\n  },\n\n  isSuccess: function()\n  {\n    return this.status === Promise.Status.Success;\n  },\n\n  isUnsuccessful: function()\n  {\n    return this.status !== Promise.Status.Success && this.status !== Promise.Status.Pending;\n  },\n\n  isFailure: function()\n  {\n    return this.status === Promise.Status.Failure;\n  },\n\n  isOffline: function()\n  {\n    return this.status === Promise.Status.Offline;\n  },\n\n  isCanceled: function()\n  {\n    return this.status === Promise.Status.Canceled;\n  },\n\n  isPending: function()\n  {\n    return this.status === Promise.Status.Pending;\n  },\n\n  isComplete: function()\n  {\n    return this.status !== Promise.Status.Pending;\n  }\n\n});\n\naddEventful( Promise.prototype );\n\n\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n      this.model.$trigger( Model.Events.OperationsStarted );\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    if ( this.db.pendingOperations === 0 )\n    {\n      this.db.trigger( Database.Events.OperationsStarted );\n    }\n\n    this.db.pendingOperations++;\n\n    try\n    {\n      this.run( this.db, this.model );\n    }\n    catch (ex)\n    {\n      this.finish();\n\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n      this.model.$operation = this.next;\n\n      if ( this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( !this.next )\n      {\n        this.model.$trigger( Model.Events.OperationsFinished );\n      }\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n        this.db.trigger( Database.Events.OperationsFinished );\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    try\n    {\n      this.onSuccess.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    try\n    {\n      this.onFailure.apply( this, arguments );\n    }\n    catch (ex)\n    {\n      Rekord.trigger( Rekord.Events.Error, [ex] );\n\n      throw ex;\n    }\n    finally\n    {\n      this.finish();\n    }\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n\nfunction GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n\nfunction GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      batchExecute(function()\n      {\n        db.rest.get( model, this.success(), this.failure() );\n\n      }, this );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n\nfunction RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache === Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n\nfunction RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n\nfunction RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n\nfunction RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      batchExecute(function()\n      {\n        db.rest.remove( model, this.success(), this.failure() );\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove( true );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n  },\n\n  finishRemove: function(notLive)\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    if ( !notLive )\n    {\n      this.liveRemove();\n    }\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  }\n\n});\n\nfunction SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : this.publishAlways( db, changes, remote );\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  publishAlways: function(db, changes, encoded)\n  {\n    var changesCopy = null;\n\n    if ( db.publishAlways.length )\n    {\n      for (var i = 0; i < db.publishAlways.length; i++)\n      {\n        var prop = db.publishAlways[ i ];\n\n        if ( !(prop in changes) )\n        {\n          if ( !changesCopy )\n          {\n            changesCopy = copy( changes );\n          }\n\n          changesCopy[ prop ] = encoded[ prop ];\n        }\n      }\n    }\n\n    return changesCopy || changes;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n\nfunction SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n\nfunction SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$dependents.isSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      batchExecute(function()\n      {\n        if ( model.$saved )\n        {\n          db.rest.update( model, model.$saving, this.success(), this.failure() );\n        }\n        else\n        {\n          db.rest.create( model, model.$saving, this.success(), this.failure() );\n        }\n\n      }, this );\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( RestStatus.Conflict[ status ] ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( RestStatus.NotFound[ status ] )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      db.destroyModel( model );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( RestStatus.Offline[ status ] )\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        model.$listenForOnline( this.cascade );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave( data );\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( isObject(data) )\n    {\n      transfer( data, model.$publish );\n    }\n\n    if ( this.canCascade( Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveLocal, this.cascade );\n  }\n\n});\n\n\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      if ( !Polymorphic )\n      {\n        throw 'Polymorphic feature is required to use the discriminated option.';\n      }\n\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model ).complete( this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    if ( !Search )\n    {\n      throw 'Search feature is required to use the query option.';\n    }\n\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions, queryData );\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    var promise = search.$run();\n\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.keyHandler.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  buildKey: function(input)\n  {\n\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n\n        relation.lastRelated = relation.related;\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateForeignKey: function(target, source, remoteData)\n  {\n    var targetFields = this.getTargetFields( target );\n    var sourceFields = this.getSourceFields( source );\n    var targetKey = target.$key();\n    var targetKeyHandler = target.$db.keyHandler;\n    var keyChanges = target.$db.keyChanges;\n\n    Rekord.debug( this.debugUpdateKey, this, target, targetFields, source, sourceFields );\n\n    this.updateFields( target, targetFields, source, sourceFields, remoteData );\n\n    if ( keyChanges && remoteData )\n    {\n      var targetNewKey = targetKeyHandler.getKey( target, true );\n\n      if ( targetKeyHandler.inKey( targetFields ) && targetNewKey !== targetKey )\n      {\n        target.$setKey( targetNewKey, true );\n      }\n    }\n  },\n\n  getTargetFields: function(target)\n  {\n    return target.$db.key;\n  },\n\n  getSourceFields: function(source)\n  {\n    return source.$db.key;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Save.Model:\n        return related.$toJSON( true );\n\n      case Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n\n        var local = related.$toJSON( false );\n\n        if ( related.$saved )\n        {\n          local.$saved = related.$saved;\n        }\n\n        return local;\n\n      case Save.Key:\n      case Store.Key:\n        return related.$key();\n\n      case Save.Keys:\n      case Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n\nfunction RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related && relation.related !== related )\n    {\n      this.clearModel( relation );\n      this.setRelated( relation, related, remoteData );\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isSaving() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved)\n      {\n        related.$off( Model.Events.Saved, relation.onSaved );\n      }\n      if (relation.onRemoved)\n      {\n        related.$off( Model.Events.Removed, relation.onRemoved );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved)\n    {\n      related.$on( Model.Events.Saved, relation.onSaved, this );\n    }\n\n    if (relation.onRemoved)\n    {\n      related.$on( Model.Events.Removed, relation.onRemoved, this );\n    }\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    if ( this.isDependent( relation, related ) )\n    {\n      relation.parent.$dependents.add( related, this );\n    }\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  isDependent: function(relation, related)\n  {\n    return true;\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  },\n\n  buildKey: function(input)\n  {\n    var related = input[ this.name ];\n    var key = this.local;\n\n    if ( isObject( related ) && this.model )\n    {\n      var modelDatabase = this.model.Database;\n      var foreign = modelDatabase.key;\n\n      modelDatabase.keyHandler.copyFields( input, key, related, foreign );\n    }\n  }\n\n});\n\nfunction RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isSaving();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Store.Model || this.save === Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n\nfunction BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n\nfunction HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n      child: equals( this.local, model.$db.key ),\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      if ( isObject( initialValue ) && relation.child )\n      {\n        var src = toArray( this.local );\n        var dst = toArray( this.model.Database.key );\n\n        for (var k = 0; k < src.length; k++)\n        {\n          initialValue[ dst[ k ] ] = model[ src[ k ] ];\n        }\n      }\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  isDependent: function(relation, related)\n  {\n    return !relation.child;\n  },\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      relation.parent.$dependents.remove( related );\n    }\n  }\n\n});\n\nfunction HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.Local,\n  cascadeSave:          Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANY_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSave );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n\n      }, this );\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var models = relation.related;\n\n          for (var i = models.length - 1; i >= 0; i--)\n          {\n            var related = models[ i ];\n\n            related.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents.add( model, this );\n\n      this.updateForeignKey( related, model, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n    var removing = target.has( key );\n\n    if ( removing )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents.remove( model );\n\n      if ( this.cascadeRemove )\n      {\n        if ( remoteData )\n        {\n          if ( canCascade( this.cascadeRemove, Cascade.Local ) )\n          {\n            related.$remove( Cascade.Local );\n          }\n        }\n        else\n        {\n          related.$remove( this.cascadeRemove );\n        }\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n\n    return removing;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.foreign;\n  }\n\n});\n\nfunction HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Cascade.NoRest,\n  cascadeSave:          Cascade.All,\n  cascadeSaveRelated:   Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n  debugUpdateKey:       Rekord.Debugs.HASMANYTHRU_UPDATE_KEY,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through ).complete( this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    batchExecute(function()\n    {\n      if ( relation && this.cascadeSave )\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          if ( !through.$isDeleted() && through.$hasChanges() )\n          {\n            through.$save( this.cascadeSave );\n          }\n        }\n      }\n\n      if ( relation && this.cascadeSaveRelated )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n        relation.delaySaving = true;\n\n        var models = relation.related;\n\n        for (var i = 0; i < models.length; i++)\n        {\n          var related = models[ i ];\n\n          if ( !related.$isDeleted() && related.$hasChanges() )\n          {\n            related.$save( this.cascadeSaveRelated );\n          }\n        }\n\n        relation.saving = false;\n        relation.delaySaving = false;\n      }\n\n    }, this );\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      batchExecute(function()\n      {\n        this.bulk( relation, function()\n        {\n          var throughs = relation.throughs.values;\n\n          for (var i = 0; i < throughs.length; i++)\n          {\n            var through = throughs[ i ];\n\n            through.$remove( this.cascadeRemove );\n          }\n        });\n\n      }, this );\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n    var added = !throughs.has( throughKey );\n\n    if ( added )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.add( model, this );\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Cascade.None );\n        }\n      }\n    }\n\n    return added;\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.keyHandler.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.keyHandler.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents.remove( model );\n\n      if ( callRemove )\n      {\n        through.$remove( remoteData ? Cascade.Local : Cascade.All );\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelKeys = model.$db.keyHandler;\n    var relatedKeys = this.model.Database.keyHandler;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      modelKeys.setKeyField( key, prop, related, this.foreign );\n      relatedKeys.setKeyField( key, prop, model, this.local );\n    }\n\n    return key;\n  },\n\n  getTargetFields: function(target)\n  {\n    return this.local;\n  }\n\n});\n\nfunction HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Store.None,\n  save:                 Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOTE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refresh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n\nfunction HasList()\n{\n}\n\nRekord.Relations.hasList = HasList;\n\nHasList.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  store:                Store.Model,\n  save:                 Save.Model,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false\n};\n\nextend( RelationMultiple, HasList,\n{\n\n  type: 'hasList',\n\n  debugSort:            Rekord.Debugs.HASLIST_SORT,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasList.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASLIST_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASLIST_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASLIST_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClones = [];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relatedClones.push( related[ i ].$clone() );\n      }\n\n      clone[ this.name ] = relatedClones;\n    }\n  }\n\n});\n\n\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name ).complete( this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      search.$set( queryData );\n    }\n\n    DiscriminateCollection( search.$results, this.discriminator, this.discriminatorToModel );\n\n    var promise = search.$run();\n    promise.complete( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var db = related.Database;\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        updateFieldsReturnChanges( initial, db.key, model, fields );\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      callback.call( this, input );\n    }\n    // At the moment I don't think this will ever work - if we are given a plain\n    // object we can't really determine the related database.\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        relation.pending[ input.$key() ] = true;\n\n        callback.call( this, input );\n      }\n      // At the moment I don't think this will ever work - if we are given a plain\n      // object we can't really determine the related database.\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.keyHandler.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n\n\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Counts the number of models which pass the given where expression.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = Task.create({name: 't1', done: false});\n   * Task.count('done', true); // 1\n   * ```\n   *\n   * @method count\n   * @memberof Rekord.Model\n   * @return {Number} -\n   *    The number of models which pass the given where expression.\n   */\n  model.count = function(properties, value, equals)\n  {\n    return db.models.countWhere( properties, value, equals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props, cascade )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save( cascade );\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'load' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.keyHandler.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.keyHandler.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return;\n        }\n\n        var result;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.first = model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Finds or creates a model instance based on the given values. The key for\n   * the model must be derivable from the given values - or this function will\n   * always create a new model instance.\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.findOrCreate({\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * // do stuff with listItem\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to set in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.findOrCreate = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n    var created = false;\n\n    if ( !instance )\n    {\n      db.grabModel( input, function(grabbed)\n      {\n        if ( !grabbed )\n        {\n          instance = model.create( input, cascade );\n          created = true;\n        }\n        else\n        {\n          instance = grabbed;\n          instance.$set( input );\n\n          // grab model created an instance that needs to be \"created\"\n          if ( !instance.$isSaved() )\n          {\n            instance.$save( cascade );\n          }\n        }\n\n        if ( callback )\n        {\n          callback.call( callbackContext, instance, created );\n        }\n      });\n    }\n    else\n    {\n      instance.$set( input );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance, created );\n      }\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance );\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  if ( options.keyChanges )\n  {\n    enableKeyChanges();\n  }\n});\n\nvar Map_put = Map.prototype.put;\nvar Map_remove = Map.prototype.remove;\n\nfunction mapKeyChangeListener(map)\n{\n  return function onKeyChange(model, oldKey, newKey)\n  {\n    var index = map.indices[ oldKey ];\n\n    if ( isNumber( index ) )\n    {\n      var listener = map.listeners[ oldKey ];\n\n      delete map.indices[ oldKey ];\n      delete map.listeners[ oldKey ];\n\n      map.keys[ index ] = newKey;\n      map.indices[ newKey ] = index;\n      map.listeners[ newKey ] = listener;\n    }\n  };\n}\n\nfunction mapKeyChangePut(key, value)\n{\n  Map_put.apply( this, arguments );\n\n  if ( value instanceof Model && value.$db.keyChanges )\n  {\n    this.listeners = this.listeners || {};\n\n    this.listeners[ key ] = value.$on( Model.Events.KeyChange, mapKeyChangeListener( this ) );\n  }\n\n  return this;\n}\n\nfunction mapKeyChangeRemove(key)\n{\n  var index = this.indices[ key ];\n\n  if ( isNumber( index ) )\n  {\n    if ( this.listeners )\n    {\n      evaluate( this.listeners[ key ] );\n\n      delete this.listeners[ key ];\n    }\n\n    this.removeAt( index );\n  }\n\n  return this;\n}\n\nfunction enableKeyChanges()\n{\n  addMethod( Map.prototype, 'put', mapKeyChangePut );\n  addMethod( Map.prototype, 'remove', mapKeyChangeRemove );\n}\n\nfunction disableKeyChanges()\n{\n  addMethod( Map.prototype, 'put', Map_put );\n  addMethod( Map.prototype, 'remove', Map_remove );\n}\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Persists model values, creating a model instance if none exists already\n   * (determined by the key derived from the input).\n   *\n   * ```javascript\n   * var ListItem = Rekord({\n   *  key: ['list_id', 'iten_id'],\n   *  fields: ['quantity'],\n   *  belongsTo: {\n   *    list: { model: 'list' },\n   *    item: { model: 'item' }\n   *  }\n   * });\n   *\n   * var listItem = ListItem.persist({ // creates relationship if it doesn't exist already - updates existing\n   *  list: someList,\n   *  item: someItem,\n   *  quantity: 23\n   * });\n   * ```\n   *\n   * @method persist\n   * @memberof Rekord.Model\n   * @param {Object} [input] -\n   *    The values to persist in the model instance found or created.\n   * @return {Rekord.Model} -\n   *    The saved model instance or undefined if the model database has not\n   *    finished loading.\n   */\n  model.persist = function( input, cascade, callback, context )\n  {\n    var callbackContext = context || this;\n\n    return model.findOrCreate( input, cascade, function(instance, created)\n    {\n      if ( !created )\n      {\n        instance.$save( cascade );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, instance );\n      }\n    });\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `load` is Rekord.Load.All), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options, props, run)\n  {\n    return new Search( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * var promise = search.$run();\n   * promise.success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @param {Object} [props] -\n   *    Initial set of properties on the search.\n   * @param {Boolean} [run=false] -\n   *    Whether or not to run the search immediately.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options, props, run)\n  {\n    return new SearchPaged( db, url, options, props, run );\n  };\n});\n\nRekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Defaults.timestamps;\n  var timeFormat = collapseOption( options.timestampFormat, Defaults.timestampFormat );\n  var timeType = collapseOption( options.timestampType, Defaults.timestampType );\n  var timeUTC = collapseOption( options.timestampUTC, Defaults.timestampUTC );\n  var timeCurrent = options.timestampCurrent || Defaults.timestampCurrent;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function collapseOption(option, defaultValue)\n  {\n    if ( isObject( option ) && isObject( defaultValue ) )\n    {\n      return collapse( option, defaultValue );\n    }\n\n    return option || defaultValue;\n  }\n\n  function hasDefault(field)\n  {\n    return timeCurrent === true || indexOf( timeCurrent, field ) !== false;\n  }\n\n  function fieldSpecific(field, map)\n  {\n    return isObject( map ) ? map[ field ] : map;\n  }\n\n  function currentTimestamp(field)\n  {\n    var to = fieldSpecific( field, timeType );\n\n    return function()\n    {\n      return convertDate( new Date(), to );\n    };\n  }\n\n  function encode(x, model, field, forSaving)\n  {\n    var to = fieldSpecific( field, timeFormat );\n    var encoded = convertDate( x, to );\n\n    return encoded || x;\n  }\n\n  function decode(x, rawData, field)\n  {\n    var to = fieldSpecific( field, timeType );\n    var utc = fieldSpecific( field, timeUTC );\n    var decoded = convertDate( x, to, utc );\n\n    return decoded || x;\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( hasDefault( field ) && !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp( field );\n    }\n\n    if ( timeFormat && !(field in db.encodings) )\n    {\n      db.encodings[ field ] = encode;\n    }\n\n    if ( timeType && !(field in db.decodings ) )\n    {\n      db.decodings[ field ] = decode;\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    replaceMethod( model.prototype, '$save', function($save)\n    {\n      return function()\n      {\n        this[ field ] = evaluate( db.defaults[ field ] );\n\n        return $save.apply( this, arguments );\n      };\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n\n});\n\nvar Timestamp = {\n  Date: 'date',\n  Millis: 'millis',\n  Seconds: 'seconds'\n};\n\nDefaults.timestampFormat = Timestamp.Millis;\nDefaults.timestampType = Timestamp.Date;\nDefaults.timestampUTC = false;\nDefaults.timestampCurrent = ['created_at', 'updated_at'];\n\nfunction convertDate(x, to, utc)\n{\n  var date = parseDate( x, utc );\n\n  if ( date === false )\n  {\n    return false;\n  }\n\n  if ( !to )\n  {\n    return date;\n  }\n\n  switch (to)\n  {\n    case Timestamp.Date:\n      return date;\n    case Timestamp.Millis:\n      return date.getTime();\n    case Timestamp.Seconds:\n      return Math.floor( date.getTime() / 1000 );\n    default:\n      return Rekord.formatDate( date, to );\n  }\n}\n\nRekord.Timestamp = Timestamp;\nRekord.formatDate = noop;\nRekord.convertDate = convertDate;\n\nRekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.where = function(whereProperties, whereValue, whereEquals, out)\n  {\n    return db.models.where(whereProperties, whereValue, whereEquals, out);\n  };\n});\n\n\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  Rekord.Model = Model;\n  Rekord.Database = Database;\n  Rekord.Defaults = Defaults;\n  Rekord.Relation = Relation;\n  Rekord.Operation = Operation;\n  Rekord.Search = Search;\n  Rekord.SearchPaged = SearchPaged;\n  Rekord.Promise = Promise;\n\n  /* Keys */\n  Rekord.KeyHandler = KeyHandler;\n  Rekord.KeySimple = KeySimple;\n  Rekord.KeyComposite = KeyComposite;\n  Rekord.enableKeyChanges = enableKeyChanges;\n  Rekord.disableKeyChanges = disableKeyChanges;\n\n  /* Enums */\n  Rekord.Cascade = Cascade;\n  Rekord.Cache = Cache;\n  Rekord.Store = Store;\n  Rekord.Save = Save;\n  Rekord.Load = Load;\n\n  /* Collections */\n  Rekord.Map = Map;\n  Rekord.Collection = Collection;\n  Rekord.FilteredCollection = FilteredCollection;\n  Rekord.ModelCollection = ModelCollection;\n  Rekord.FilteredModelCollection = FilteredModelCollection;\n  Rekord.Page = Page;\n\n  /* Relationships */\n  Rekord.HasOne = HasOne;\n  Rekord.BelongsTo = BelongsTo;\n  Rekord.HasMany = HasMany;\n  Rekord.HasManyThrough = HasManyThrough;\n  Rekord.HasRemote = HasRemote;\n  Rekord.HasList = HasList;\n\n  /* Common Functions */\n  Rekord.isRekord = isRekord;\n  Rekord.isDefined = isDefined;\n  Rekord.isFunction = isFunction;\n  Rekord.isString = isString;\n  Rekord.isNumber = isNumber;\n  Rekord.isBoolean = isBoolean;\n  Rekord.isDate = isDate;\n  Rekord.isRegExp = isRegExp;\n  Rekord.isArray = isArray;\n  Rekord.isObject = isObject;\n  Rekord.isValue = isValue;\n  Rekord.noop = noop;\n  Rekord.bind = bind;\n  Rekord.uuid = uuid;\n  Rekord.sizeof = sizeof;\n  Rekord.isEmpty = isEmpty;\n  Rekord.evaluate = evaluate;\n\n  /* Array Functions */\n  Rekord.toArray = toArray;\n  Rekord.indexOf = indexOf;\n  Rekord.collect = collect;\n  Rekord.swap = swap;\n  Rekord.reverse = reverse;\n  Rekord.isSorted = isSorted;\n  Rekord.isPrimitiveArray = isPrimitiveArray;\n\n  /* Class Functions */\n  Rekord.extend = extend;\n  Rekord.extendArray = extendArray;\n  Rekord.addMethod = addMethod;\n  Rekord.addMethods = addMethods;\n  Rekord.replaceMethod = replaceMethod;\n  Rekord.copyConstructor = copyConstructor;\n  Rekord.factory = factory;\n\n  /* Comparator Functions */\n  Rekord.Comparators = Comparators;\n  Rekord.saveComparator = saveComparator;\n  Rekord.addComparator = addComparator;\n  Rekord.createComparator = createComparator;\n\n  /* Comparison Functions */\n  Rekord.equalsStrict = equalsStrict;\n  Rekord.equalsWeak = equalsWeak;\n  Rekord.equalsCompare = equalsCompare;\n  Rekord.equals = equals;\n  Rekord.compareNumbers = compareNumbers;\n  Rekord.compare = compare;\n\n  /* Eventful Functions */\n  Rekord.addEventFunction = addEventFunction;\n  Rekord.addEventful = addEventful;\n\n  /* Object Functions */\n  Rekord.applyOptions = applyOptions;\n  Rekord.propsMatch = propsMatch;\n  Rekord.hasFields = hasFields;\n  Rekord.updateFieldsReturnChanges = updateFieldsReturnChanges;\n  Rekord.clearFieldsReturnChanges = clearFieldsReturnChanges;\n  Rekord.grab = grab;\n  Rekord.pull = pull;\n  Rekord.transfer = transfer;\n  Rekord.collapse = collapse;\n  Rekord.clean = clean;\n  Rekord.cleanFunctions = cleanFunctions;\n  Rekord.copy = copy;\n  Rekord.diff = diff;\n\n  /* Parse Functions */\n  Rekord.isParseInput = isParseInput;\n  Rekord.parse = parse;\n  Rekord.createParser = createParser;\n  Rekord.isFormatInput = isFormatInput;\n  Rekord.format = format;\n  Rekord.createFormatter = createFormatter;\n  Rekord.parseDate = parseDate;\n\n  /* Resolver Functions */\n  Rekord.NumberResolvers = NumberResolvers;\n  Rekord.saveNumberResolver = saveNumberResolver;\n  Rekord.createNumberResolver = createNumberResolver;\n  Rekord.PropertyResolvers = PropertyResolvers;\n  Rekord.savePropertyResolver = savePropertyResolver;\n  Rekord.createPropertyResolver = createPropertyResolver;\n\n  /* String Functions */\n  Rekord.toCamelCase = toCamelCase;\n  Rekord.split = split;\n\n  /* Where Functions */\n  Rekord.Wheres = Wheres;\n  Rekord.saveWhere = saveWhere;\n  Rekord.createWhere = createWhere;\n\n})(this);\n"],"sourceRoot":"/source/"}