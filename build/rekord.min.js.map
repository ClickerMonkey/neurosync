{"version":3,"sources":["header.js","array.js","class.js","common.js","comparator.js","comparison.js","eventful.js","having.js","object.js","parse.js","resolver.js","string.js","where.js","Rekord.js","dynamic.js","events.js","files.js","Gate.js","Database.js","Model.js","Map.js","Request.js","Collection.js","Page.js","FilteredCollection.js","ModelCollection.js","FilteredModelCollection.js","RelationCollection.js","DiscriminateCollection.js","Search.js","SearchPaged.js","Transaction.js","Operation.js","GetLocal.js","GetRemote.js","RemoveCache.js","RemoveLocal.js","RemoveNow.js","RemoveRemote.js","SaveLocal.js","SaveNow.js","SaveRemote.js","Relation.js","RelationSingle.js","RelationMultiple.js","BelongsTo.js","HasOne.js","HasMany.js","HasManyThrough.js","HasRemote.js","Shard.js","all.js","boot.js","collect.js","create.js","extend.js","fetch.js","fetchAll.js","filtered.js","find.js","get.js","grab.js","grabAll.js","methods.js","ready.js","refresh.js","search.js","searchPaged.js","shard.js","timestamps.js","debug.js","rest.js","store.js","live.js","offline.js","Filtering.js","Polymorphic.js","footer.js"],"names":["global","undefined","toArray","x","delimiter","Array","split","indexOf","arr","comparator","cmp","equalsStrict","i","n","length","collect","a","values","arguments","isArray","prototype","slice","call","Collection","swap","k","t","isSorted","array","copyConstructor","func","F","extend","parent","child","override","addMethods","constructor","target","methods","methodName","addMethod","factory","args","apply","this","extendArray","extendArraySupported","create","created","transfer","EA","supported","eq","push","isDefined","isFunction","isRekord","Database","Model","isString","isNumber","isNaN","isBoolean","isDate","Date","isRegExp","RegExp","isObject","isValue","noop","bind","context","uuid","S4","Math","random","toString","substring","sizeof","properties","prop","isEmpty","getTime","evaluate","copy","saveComparator","name","nullsFirst","Rekord","Comparators","createComparator","addComparator","second","first","b","d","charAt","parsed","af","format","bf","localeCompare","ap","parse","bp","compare","av","bv","equalsCompare","equals","at","bt","aa","ba","p","compareNumbers","addEventFunction","functionName","events","secret","on","off","callback","listener","result","subject","unlistener","unlistened","eventize","onListeners","$this","property","listeners","eventName","eventListeners","offListeners","once","after","event","CALLBACK_FUNCTION","splice","deleteProperty","obj","$$on","$$once","$$after","triggerListeners","clear","triggerGroup","triggerId","CALLBACK_GROUP","CALLBACK_CONTEXT","trigger","e","saveHaving","having","Havings","createHaving","model","applyOptions","options","defaults","setProperty","value","defaultValue","option","valued","$options","propsMatch","test","testFields","expected","expectedFields","equality","testProp","expectedProp","hasFields","fields","exists","grab","props","copyValues","grabbed","pull","pulledValue","pulled","from","to","collapse","clean","cleanFunctions","copyHidden","c","diff","curr","old","expr","base","valid","replace","REGEX","parseInt","template","match","createFormatter","saveNumberResolver","numbers","NumberResolvers","createNumberResolver","resolver","createPropertyResolver","parseFloat","savePropertyResolver","delim","PropertyResolvers","join","propsArray","propsResolver","camelCaseReplacer","toUpperCase","toCamelCase","saveWhere","Wheres","createWhere","where","cache","Events","Options","database","Function","className","Plugins","autoload","loadBegin","success","loadFinish","unloaded","Initialized","debug","Debugs","CREATION","addDynamicProperty","modelPrototype","definition","get","set","Object","defineProperty","configurable","enumerable","$init","lastCalculatedValue","handleChange","current","$after","Changes","parseEventListeners","out","map","when","invoke","eventType","subcallback","applyEventListeners","l","isFilesSupported","File","FileReader","FileList","toFile","input","Blob","convertNone","convertBase64","trySave","autoSave","$isSaved","$save","putFileCache","file","$files","user","setFilesValue","processor","done","valueToUser","fileReader","method","converter","fileProcessors","FilesNotSupported","reader","onload","FILE","setter","FileOffline","FileEncoder","field","forSaving","cached","save","store","fileProperties","$once","RemoteSave","$addOperation","SaveLocal","Cascade","Local","Gate","opened","blocked","gate","AP","open","Defaults","key","unshift","keys","models","ModelCollection","all","loaded","initialized","pendingRefresh","localLoaded","remoteLoaded","firstRefresh","pendingOperations","afterOnline","saveFields","prepare","rest","createRest","createStore","live","createLive","setComparator","comparatorNullsFirst","setRevision","revision","setSummarize","summarize","relations","relationNames","relationType","Relations","RelationClass","Relation","relationMap","relationOptions","relation","init","defaultEncode","data","encodings","defaultDecode","rawData","decodings","defaultSummarize","$key","defaultCreateRest","defaultCreateStore","defaultCreateLive","defaultResolveModel","response","defaultResolveModels","db","$db","Map","indices","Request","failure","callCanceled","addAll","Page","collection","pageSize","pageIndex","onChanges","handleChanges","pageCount","setCollection","FilteredCollection","filter","remoteData","FilteredModelCollection","RelationCollection","relator","DiscriminateCollection","discriminator","discriminatorsToModel","clone","buildKeyFromInput","parseModel","cloneEmpty","discriminatedValue","Search","url","SearchPaged","Transaction","cascade","operation","status","completed","operations","Operation","GetLocal","reset","GetRemote","RemoveCache","RemoveLocal","RemoveNow","RemoveRemote","SaveNow","SaveRemote","RelationSingle","RelationMultiple","BelongsTo","HasOne","HasMany","HasManyThrough","HasRemote","Shard","load","onLoadFinish","loadedSuccess","loading","callbackContext","checkRekord","Online","Offline","None","Rest","NoLive","Live","NoRest","Remote","All","Cache","Pending","Store","Key","Keys","Save","boot","putRemoteData","instance","createModel","instantiate","dynamics","dynamic","modelEvents","databaseEvents","databaseEventString","modelEventString","tryOverwrite","edb","tryMerge","dbo","edbo","tryUnshift","sourceOptions","source","eoptions","relationCopy","fetch","buildObjectFromKey","$set","RemoteGets","$refresh","fetchAll","refresh","files","fieldOption","type","FileDecodings","FileTooLarge","FileWrongType","addFileProcessor","text","dataURL","base64","resource","capacity","size","types","fileToValue","filtered","whereProperties","whereValue","whereEquals","find","firstWhere","grabModel","grabAll","ready","persistent","search","searchPaged","shard","currentTime","currentDate","encode","decode","addTimestamp","currentTimestamp","timeAsDate","addCreatedAt","ignoredFields","addUpdatedAt","addTimestampField","time","timestamps","timestampsAsDate","setDebug","overwrite","debugSet","REST","AUTO_REFRESH","REMOTE_UPDATE","REMOTE_CREATE","REMOTE_REMOVE","REMOTE_LOAD","REMOTE_LOAD_OFFLINE","REMOTE_LOAD_ERROR","REMOTE_LOAD_REMOVE","REMOTE_LOAD_RESUME","LOCAL_LOAD","LOCAL_RESUME_DELETE","LOCAL_RESUME_SAVE","LOCAL_LOAD_SAVED","REALTIME_SAVE","REALTIME_REMOVE","SAVE_VALUES","SAVE_PUBLISH","SAVE_CONFLICT","SAVE_UPDATE_FAIL","SAVE_ERROR","SAVE_OFFLINE","SAVE_RESUME","SAVE_REMOTE","SAVE_DELETED","SAVE_OLD_REVISION","SAVE_LOCAL","SAVE_LOCAL_ERROR","SAVE_LOCAL_DELETED","SAVE_LOCAL_BLOCKED","SAVE_REMOTE_DELETED","SAVE_REMOTE_BLOCKED","REMOVE_PUBLISH","REMOVE_LOCAL","REMOVE_MISSING","REMOVE_ERROR","REMOVE_OFFLINE","REMOVE_RESUME","REMOVE_REMOTE","REMOVE_CANCEL_SAVE","REMOVE_LOCAL_ERROR","REMOVE_LOCAL_BLOCKED","REMOVE_LOCAL_NONE","REMOVE_LOCAL_UNSAVED","REMOVE_REMOTE_BLOCKED","GET_LOCAL_SKIPPED","GET_LOCAL","GET_LOCAL_ERROR","GET_REMOTE","GET_REMOTE_ERROR","ONLINE","OFFLINE","PUBSUB_CREATED","HASONE_INIT","HASONE_NINJA_REMOVE","HASONE_INITIAL_PULLED","HASONE_INITIAL","HASONE_CLEAR_MODEL","HASONE_SET_MODEL","HASONE_PRESAVE","HASONE_POSTREMOVE","HASONE_CLEAR_KEY","HASONE_UPDATE_KEY","HASONE_LOADED","HASONE_QUERY","HASONE_QUERY_RESULTS","BELONGSTO_INIT","BELONGSTO_NINJA_REMOVE","BELONGSTO_NINJA_SAVE","BELONGSTO_INITIAL_PULLED","BELONGSTO_INITIAL","BELONGSTO_CLEAR_MODEL","BELONGSTO_SET_MODEL","BELONGSTO_POSTREMOVE","BELONGSTO_CLEAR_KEY","BELONGSTO_UPDATE_KEY","BELONGSTO_LOADED","BELONGSTO_QUERY","BELONGSTO_QUERY_RESULTS","HASMANY_INIT","HASMANY_NINJA_REMOVE","HASMANY_NINJA_SAVE","HASMANY_INITIAL","HASMANY_INITIAL_PULLED","HASMANY_REMOVE","HASMANY_SORT","HASMANY_ADD","HASMANY_LAZY_LOAD","HASMANY_INITIAL_GRABBED","HASMANY_NINJA_ADD","HASMANY_AUTO_SAVE","HASMANY_PREREMOVE","HASMANY_POSTSAVE","HASMANY_QUERY","HASMANY_QUERY_RESULTS","HASMANYTHRU_INIT","HASMANYTHRU_NINJA_REMOVE","HASMANYTHRU_NINJA_SAVE","HASMANYTHRU_NINJA_THRU_REMOVE","HASMANYTHRU_INITIAL","HASMANYTHRU_INITIAL_PULLED","HASMANYTHRU_REMOVE","HASMANYTHRU_SORT","HASMANYTHRU_ADD","HASMANYTHRU_LAZY_LOAD","HASMANYTHRU_INITIAL_GRABBED","HASMANYTHRU_NINJA_ADD","HASMANYTHRU_AUTO_SAVE","HASMANYTHRU_PREREMOVE","HASMANYTHRU_POSTSAVE","HASMANYTHRU_THRU_ADD","HASMANYTHRU_THRU_REMOVE","HASMANYTHRU_QUERY","HASMANYTHRU_QUERY_RESULTS","HASREMOTE_INIT","HASREMOTE_SORT","HASREMOVE_NINJA_REMOVE","HASREMOVE_NINJA_SAVE","HASREMOVE_QUERY","HASREMOVE_QUERY_RESULTS","encoded","update","remove","query","setRest","restSet","put","record","setStore","storeSet","setLive","liveSet","online","window","navigator","onLine","forceOffline","setOnline","setOffline","listenToNetworkStatus","addEventListener","document","body","ononline","onoffline","checkNetworkStatus","NoLoad","RemoteLoad","LocalLoad","Updated","ModelAdded","ModelUpdated","ModelRemoved","Loads","keySeparator","loadRelations","loadRemote","autoRefresh","fullSave","fullPublish","resolveModel","resolveModels","onReady","invoked","hasData","saving","checkModel","hasRemote","removeKey","buildKey","buildKeys","buildKeyFromArray","getKey","quietly","modelKey","getKeys","updated","sort","revisionFunction","ar","br","decoded","revisionRejected","keyFields","mk","dk","Error","$saved","$toJSON","conflicts","conflicted","notReallySaved","currentValue","savedValue","$local","$trigger","PartialUpdate","FullUpdate","RemoteUpdate","has","$status","destroyLocalUncachedModel","$hasChanges","Detach","RemoteAndRemove","destroyLocalCachedModel","removedValue","destroyLocalModel","Status","RemovePending","SavePending","onLoaded","onLocalLoad","records","Removed","onLocalError","loadNone","onOnline","onOperationRest","onModels","mapped","onLoadError","onRefreshOnline","isValid","liveSave","liveRemove","addReference","$isDeleted","existing","UpdateAndSave","CreateAndSave","removeFromModels","refreshModel","Created","Saved","PreSave","PostSave","PreRemove","PostRemove","Change","KeyUpdate","RelationUpdate","LocalSave","LocalSaveFailure","LocalSaves","RemoteSaveFailure","RemoteSaveOffline","RemoteSaves","LocalRemove","LocalRemoveFailure","LocalRemoves","RemoteRemove","RemoteRemoveFailure","RemoteRemoveOffline","RemoteRemoves","LocalGet","LocalGetFailure","LocalGets","RemoteGet","RemoteGetFailure","RemoteGetOffline","SavedRemoteUpdate","Synced","Blocked","valueOf","$operation","$relations","$dependents","$reset","databaseRelations","lazy","$getRelation","$load","def","evaluatedValue","$$key","$get","$decode","$isDependentsSaved","callbackOnSaved","contextOnSaved","onDependentSave","dependents","uid","dependent","$relate","relate","$unrelate","unrelated","unrelate","$isRelated","related","isRelated","initialValue","setProperties","setValue","transactNone","transact","txn","$remove","$exists","$autoRefresh","$cancel","$clone","f","cloneKey","relationName","preClone","relationValues","postClone","$push","$savedState","$pop","dontDiscard","$discard","OperationType","queue","execute","$changed","$keys","$uid","$hasKey","$isSynced","$isPending","$isSavedLocally","$isNew","$getChanges","alreadyEncoded","saved","ignore","JSON","stringify","index","removeAt","lastValue","pop","lastKey","subtract","dest","v","reverse","max","half","ceil","rebuildIndex","partition","left","right","pivot","floor","j","qsort","onSuccess","handleCall","onFailure","request","currentCall","cancel","Add","Adds","Sort","Remove","Removes","Updates","Reset","Cleared","page","add","intersect","complement","delaySort","insertAt","removed","shift","removing","element","removeAll","removeWhere","start","deleteCount","adding","minModel","startingValue","min","maxModel","resolved","lastWhere","last","aggregate","validator","process","getResult","sum","avg","total","countWhere","met","count","pluck","valuesDelim","keysDelim","valuesResolver","keysResolver","each","item","reduce","reducer","chunk","chunkSize","outer","outerIndex","inner","innerIndex","contains","group","grouping","by","bySeparator","select","groupings","grouped","groupArray","propName","aggregator","track","$group","$count","Filtering","onAdd","handleAdd","onAdds","handleAdds","onRemove","handleRemove","onRemoves","handleRemoves","onReset","handleReset","onUpdates","handleUpdates","onCleared","handleCleared","disconnect","connect","sync","setFilter","onClear","matches","updates","setPageSize","setPageIndex","goto","actualIndex","next","prev","jump","forceApply","changes","end","more","pages","limit","offset","desiredEnd","actualEnd","inputs","rebuild","callRemove","avoidSave","updateWhere","onModelUpdated","handleModelUpdate","Ready","Success","Failure","$getDefaults","$append","$url","$results","$request","$handleSuccess","$handleFailure","$run","$encode","$off","$ready","$success","$failure","page_size","page_index","$goto","dontRun","$getPageIndex","$getPageCount","desired","$setPageIndex","$more","$onMoreEnd","$first","$last","$prev","$next","$updatePageSize","$updatePageIndex","$updateTotal","$decodeResults","results","$setPageSize","$getPageSize","$getPageOffset","$setTotal","$getTotal","transaction","RemoteSuccess","LocalSuccess","Any","handled","already","offs","createHandler","offline","isFinished","finish","then","finished","canCascade","cascading","actual","notCascade","interrupts","tryNext","setNext","insertNext","op","run","handleSuccess","handleFailure","previousValue","finishRemove","$saving","$publish","handleOnline","local","markSaving","remote","publish","clearLocal","markSynced","tryAgain","handleData","saveNow","clearPending","auto","preserve","discriminators","discriminatorToModel","debugQuery","debugQueryResults","getDefaults","discriminated","Polymorphic","setReferences","onInitialized","setModelReference","rekord","finishInitialization","mode","getStoredArray","getStored","listenToModelAdded","executeQuery","queryOption","queryOptions","queryData","handleExecuteQuery","createRelationCollection","createCollection","grabInitial","grabModels","initial","pending","propertyName","applied","dynamicSet","lastRelated","isModelArray","relatedDatabase","relatedKey","clearFields","targetFields","clearFieldsReturnChanges","targetField","updateFields","sourceFields","updateFieldsReturnChanges","targetValue","sourceValue","sourceField","relateds","stored","debugInit","debugClearModel","debugSetModel","debugLoaded","debugClearKey","debugUpdateKey","clearModel","setRelated","clearRelated","setModel","updateForeignKey","clearForeignKey","onSaved","onRemoved","dirty","$on","handleModel","isRelatedFactory","foreign","debugAutoSave","debugInitialGrabbed","debugSort","bulk","addModel","checkSave","delaySorting","delaySaving","given","removeModel","canRemoveRelated","belongsTo","postRemove","onKeyUpdate","modelFields","relatedFields","hasOne","preSave","relatedClone","hasMany","cascadeRemove","cascadeSave","postSave","preRemove","handleModelAdded","handleLazyLoad","hasManyThrough","through","cascadeSaveRelated","setThrough","that","throughDatabase","throughs","onThroughRemoved","removeModelFromThrough","HASMANYTHRU_PRESAVE","addModelFromThrough","finishAddModel","addThrough","throughKey","createThroughKey","onAddThrough","finishAddThrough","onAddModelFromThrough","actualRelated","removeThrough","finishRemoveRelated","keyObject","finishRemoveThrough","modelDatabase","keyIndex","keyProp","HASREMOTE_QUERY","HASREMOTE_QUERY_RESULTS","onRefresh","isRelatedDiscriminatedFactory","loadDiscriminators","getDiscriminatorForModel","discriminatorField","onLoad","handleLoaded","setDiscriminated","getDiscriminatorDatabase","discriminatorValue","ownsForeignKey","getDiscriminator","initialize","STATUS_FAIL_ALL","STATUS_FAIL_GET","STATUS_FAIL_CREATE","STATUS_FAIL_UPDATE","STATUS_FAIL_REMOVE","STATUS_FAIL_QUERY","ATOMIC_ALL","ATOMIC_GET","ATOMIC_CREATE","ATOMIC_UPDATE","ATOMIC_REMOVE","ATOMIC_QUERY","getShards","forRead","getShardForModel","getShardsForModel","single","getShardsForQuery","onShardSuccess","onShardFailure","onComplete","successful","alreadyFailed","failedStatus","shards","multiplex","gotten","returned","atomic","onShardComplete","failureCalled"],"mappings":"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","file":"rekord.min.js","sourcesContent":["(function(global, undefined)\n{\n","\nvar AP = Array.prototype;\n\n/**\n * Converts the given variable to an array of strings. If the variable is a\n * string it is split based on the delimiter given. If the variable is an\n * array then it is returned. If the variable is any other type it may result\n * in an error.\n *\n * ```javascript\n * Rekord.toArray([1, 2, 3]); // [1, 2, 3]\n * Rekord.toArray('1,2,3', ','); // ['1', '2', '3']\n * ```\n *\n * @memberof Rekord\n * @param {String|String[]} x\n *    The variable to convert to an Array.\n * @param {String} [delimiter]\n *    The delimiter to split if the given variable is a string.\n * @return {String[]} -\n *    The array of strings created.\n */\nfunction toArray(x, delimiter)\n{\n  return x instanceof Array ? x : x.split( delimiter );\n}\n\n/**\n * Finds the index of a variable in an array optionally using a custom\n * comparison function. If the variable is not found in the array then `false`\n * is returned.\n *\n * ```javascript\n * Rekord.indexOf([1, 2, 3], 1); // 0\n * Rekord.indexOf([1, 2, 3], 4); // false\n * Rekord.indexOf([1, 2, 2], 2); // 1\n * ```\n *\n *\n * @memberof Rekord\n * @param {Array} arr\n *    The array to search through.\n * @param {Any} x\n *    The variable to search for.\n * @param {Function} [comparator]\n *    The function to use which compares two values and returns a truthy\n *    value if they are considered equivalent. If a comparator is not given\n *    then strict comparison is used to determine equivalence.\n * @return {Number|Boolean} -\n *    The index in the array the variable exists at, otherwise false if\n *    the variable wasn't found in the array.\n */\nfunction indexOf(arr, x, comparator)\n{\n  var cmp = comparator || equalsStrict;\n\n  for (var i = 0, n = arr.length; i < n; i++)\n  {\n    if ( cmp( arr[i], x ) )\n    {\n      return i;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns an instance of {@link Rekord.Collection} with the initial values\n * passed as arguments to this function.\n *\n * ```javascript\n * Rekord.collect(1, 2, 3, 4);\n * Rekord.collect([1, 2, 3, 4]); // same as above\n * Rekord.collect();\n * Rekord.collect([]); // same as above\n * ```\n *\n * @memberof Rekord\n * @param {Any[]|...Any} a\n *    The initial values in the collection. You can pass an array of values\n *    or any number of arguments.\n * @return {Rekord.Collection} -\n *    A newly created instance containing the given values.\n */\nfunction collect(a)\n{\n  var values = arguments.length > 1 || !isArray(a) ? Array.prototype.slice.call( arguments ) : a;\n\n  return new Collection( values );\n}\n\nfunction swap(a, i, k)\n{\n  var t = a[ i ];\n  a[ i ] = a[ k ];\n  a[ k ] = t;\n}\n\nfunction isSorted(comparator, array)\n{\n  if ( !comparator )\n  {\n    return true;\n  }\n\n  for (var i = 0, n = array.length - 1; i < n; i++)\n  {\n    if ( comparator( array[ i ], array[ i + 1 ] ) > 0 )\n    {\n      return false;\n    }\n  }\n\n  return true;\n}\n","\n// Copies a constructor function returning a function that can be called to\n// return an instance and doesn't invoke the original constructor.\nfunction copyConstructor(func)\n{\n  function F() {};\n  F.prototype = func.prototype;\n  return F;\n}\n\nfunction extend(parent, child, override)\n{\n  // Avoid calling the parent constructor\n  parent = copyConstructor( parent );\n  // Child instances are instanceof parent\n  child.prototype = new parent();\n  // Copy new methods into child prototype\n  addMethods( child.prototype, override );\n  // Set the correct constructor\n  child.prototype.constructor = child;\n}\n\nvar addMethod = (function()\n{\n  if ( Object.defineProperty )\n  {\n    return function(target, methodName, method)\n    {\n      Object.defineProperty( target, methodName, {\n        configurable: true,\n        enumerable: false,\n        value: method\n      });\n    };\n  }\n  else\n  {\n    return function(target, methodName, method)\n    {\n      target[ methodName ] = method;\n    };\n  }\n\n})();\n\nfunction addMethods(target, methods)\n{\n  for (var methodName in methods)\n  {\n    addMethod( target, methodName, methods[ methodName ] );\n  }\n}\n\n// Creates a factory for instantiating\nfunction factory(constructor)\n{\n  function F(args)\n  {\n    return constructor.apply( this, args );\n  }\n\n  F.prototype = constructor.prototype;\n\n  return function()\n  {\n    return new F( arguments );\n  };\n}\n\nfunction extendArray(parent, child, override)\n{\n  // If direct extension of array is supported...\n  if ( extendArraySupported() )\n  {\n    extend( parent, child, override );\n    child.create = factory( child );\n  }\n  // Otherwise copy all of the methods\n  else\n  {\n    // Avoid calling the parent constructor\n    parent = copyConstructor( parent );\n\n    // TODO fix for IE8\n    child.create = function()\n    {\n      var created = new parent();\n      child.apply( created, arguments );\n      transfer( override, created );\n      return created;\n    };\n  }\n}\n\n// Is directly extending an array supported?\nfunction extendArraySupported()\n{\n  if ( extendArraySupported.supported === undefined )\n  {\n    function EA() {};\n    EA.prototype = [];\n    var eq = new EA();\n    eq.push(0);\n    extendArraySupported.supported = (eq.length === 1);\n  }\n\n  return extendArraySupported.supported;\n}\n","\n/**\n * Determines whether the given variable is defined.\n *\n * ```javascript\n * Rekord.isDefined(); // false\n * Rekord.isDefined(0); // true\n * Rekord.isDefined(true); // true\n * Rekord.isDefined(void 0); // false\n * Rekord.isDefined(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is defined, otherwise false.\n */\nfunction isDefined(x)\n{\n  return x !== undefined;\n}\n\n/**\n * Determines whether the given variable is a function.\n *\n * ```javascript\n * Rekord.isFunction(); // false\n * Rekord.isFunction(parseInt); // true\n * Rekord.isFunction(2); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a function, otherwise false.\n */\nfunction isFunction(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\n/**\n * Determines whether the given variable is a Rekord object. A Rekord object is a\n * constructor for a model and also has a Database variable. A Rekord object is\n * strictly created by the Rekord function.\n *\n * ```javascript\n * var Task = Rekord({\n *   name: 'task',\n *   fields: ['name', 'done', 'finished_at', 'created_at', 'assigned_to']\n * });\n * Rekord.isRekord( Task ); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a Rekord object, otherwise false.\n */\nfunction isRekord(x)\n{\n  return !!(x && x.Database && isFunction( x ) && x.prototype instanceof Model);\n}\n\n/**\n * Determines whether the given variable is a string.\n *\n * ```javascript\n * Rekord.isString(); // false\n * Rekord.isString('x'): // true\n * Rekord.isString(1); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a string, otherwise false.\n */\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\n/**\n * Determines whether the given variable is a valid number. NaN and Infinity are\n * not valid numbers.\n *\n * ```javascript\n * Rekord.isNumber(); // false\n * Rekord.isNumber('x'): // false\n * Rekord.isNumber(1); // true\n * Rekord.isNumber(NaN); // false\n * Rekord.isNumber(Infinity); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a valid number, otherwise false.\n */\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\n/**\n * Determines whether the given variable is a boolean value.\n *\n * ```javascript\n * Rekord.isBoolean(); // false\n * Rekord.isBoolean('x'): // false\n * Rekord.isBoolean(1); // false\n * Rekord.isBoolean(true); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a boolean value, otherwise false.\n */\nfunction isBoolean(x)\n{\n  return typeof x === 'boolean';\n}\n\n/**\n * Determines whether the given variable is an instance of Date.\n *\n * ```javascript\n * Rekord.isDate(); // false\n * Rekord.isDate('x'): // false\n * Rekord.isDate(1); // false\n * Rekord.isDate(true); // false\n * Rekord.isDate(new Date()); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Date, otherwise false.\n */\nfunction isDate(x)\n{\n  return x instanceof Date;\n}\n\n/**\n * Determines whether the given variable is an instance of RegExp.\n *\n * ```javascript\n * Rekord.isRegExp(); // false\n * Rekord.isRegExp('x'): // false\n * Rekord.isRegExp(1); // false\n * Rekord.isRegExp(true); // false\n * Rekord.isRegExp(/[xyz]/); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of RegExp, otherwise false.\n */\nfunction isRegExp(x)\n{\n  return x instanceof RegExp;\n}\n\n/**\n * Determines whether the given variable is an instance of Array.\n *\n * ```javascript\n * Rekord.isArray(); // false\n * Rekord.isArray('x'): // false\n * Rekord.isArray(1); // false\n * Rekord.isArray([]); // true\n * Rekord.isArray(Rekord.collect(1, 2, 3)); // true\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is an instance of Array, otherwise false.\n */\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Determines whether the given variable is a non-null object. As a note,\n * Arrays are considered objects.\n *\n * ```javascript\n * Rekord.isObject(); // false\n * Rekord.isObject('x'): // false\n * Rekord.isObject(1); // false\n * Rekord.isObject([]); // true\n * Rekord.isObject({}); // true\n * Rekord.isObject(null); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any} x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is a non-null object, otherwise false.\n */\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\n/**\n * Determines whether the given variable is not null and is not undefined.\n *\n * ```javascript\n * Rekord.isValue(); // false\n * Rekord.isValue('x'): // true\n * Rekord.isValue(1); // true\n * Rekord.isValue([]); // true\n * Rekord.isValue({}); // true\n * Rekord.isValue(null); // false\n * Rekord.isValue(void 0); // false\n * Rekord.isValue(undefined); // false\n * ```\n *\n * @memberof Rekord\n * @param {Any}  x\n *    The variable to test.\n * @return {Boolean} -\n *    True if the variable is non-null and not undefined.\n */\nfunction isValue(x)\n{\n  return !!(x !== undefined && x !== null);\n}\n\n/**\n * A function that doesn't perform any operations.\n *\n * @memberof Rekord\n */\nfunction noop()\n{\n\n}\n\n/**\n * Returns the given function with the given context (`this`). This also has the\n * benefits of returning a \"copy\" of the function which makes it ideal for use\n * in listening on/once events and off events.\n *\n * ```javascript\n * var context = {};\n * var func = Rekord.bind( context, function(x) {\n *   this.y = x * 2;\n * });\n * func( 4 );\n * context.y; // 8\n * ```\n *\n * @memberof Rekord\n * @param {Object} context\n *    The value of `this` for the given function.\n * @param {Function}\n *    The function to invoke with the given context.\n * @return {Function} -\n *    A new function which is a copy of the given function with a new context.\n */\nfunction bind(context, func)\n{\n  return function bindedFunction()\n  {\n    func.apply( context, arguments );\n  };\n}\n\n/**\n * Generates a UUID using the random number method.\n *\n * @memberof Rekord\n * @return {String} -\n *    The generated UUID.\n */\nfunction uuid()\n{\n  return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction S4()\n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\n\n\nfunction sizeof(x)\n{\n  if ( isArray(x) || isString(x) )\n  {\n    return x.length;\n  }\n  else if ( isObject(x) )\n  {\n    var properties = 0;\n\n    for (var prop in x)\n    {\n      properties++;\n    }\n\n    return properties;\n  }\n\n  return 0;\n}\n\nfunction isEmpty(x)\n{\n  if (x === null || x === void 0 || x === 0)\n  {\n    return true;\n  }\n  if (isArray(x) || isString(x))\n  {\n    return x.length === 0;\n  }\n  if (isDate(x))\n  {\n    return x.getTime() === 0 || isNaN( x.getTime() );\n  }\n  if (isObject(x))\n  {\n    for (var prop in x)\n    {\n      return false;\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction evaluate(x)\n{\n  if ( !isValue( x ) )\n  {\n    return x;\n  }\n\n  if ( isRekord( x ) )\n  {\n    return new x();\n  }\n  if ( isFunction( x ) )\n  {\n    return x();\n  }\n\n  return copy( x );\n}\n","\n /**\n  * A string, a function, or an array of mixed values.\n  *\n  * ```javascript\n  * 'age'                   // age property of an object\n  * '-age'                  // age property of an object, ordering reversed\n  * function(a, b) {}       // a function which compares two values\n  * ['age', 'done']         // age property of an object, and when equal, the done value\n  * 'creator.name'          // name sub-property of creator property\n  * '{creator.name}, {age}' // formatted string\n  * ```\n  *\n  * @typedef {String|comparisonCallback|Array} comparatorInput\n  */\n\n\nRekord.Comparators = {};\n\nfunction saveComparator(name, comparator, nullsFirst)\n{\n  return Rekord.Comparators[ name ] = createComparator( comparator, nullsFirst );\n}\n\nfunction addComparator(second, comparator, nullsFirst)\n{\n  var first = createComparator( comparator, nullsFirst );\n\n  if ( !isFunction( second ) )\n  {\n    return first;\n  }\n\n  return function compareCascading(a, b)\n  {\n    var d = first( a, b );\n\n    return d !== 0 ? d : second( a, b );\n  };\n}\n\n/**\n * Creates a function which compares two values.\n *\n * @memberof Rekord\n * @param {comparatorInput} comparator\n *    The input which creates a comparison function.\n * @param {Boolean} [nullsFirst=false] -\n *    True if null values should be sorted first.\n * @return {comparisonCallback}\n */\nfunction createComparator(comparator, nullsFirst)\n{\n  if ( isFunction( comparator ) )\n  {\n    return comparator;\n  }\n  else if ( isString( comparator ) )\n  {\n    if ( comparator in Rekord.Comparators )\n    {\n      return Rekord.Comparators[ comparator ];\n    }\n\n    if ( comparator.charAt(0) === '-' )\n    {\n      var parsed = createComparator( comparator.substring( 1 ), !nullsFirst );\n\n      return function compareObjectsReversed(a, b)\n      {\n        return -parsed( a, b );\n      };\n    }\n    else if ( comparator.indexOf('{') !== -1 )\n    {\n      return function compareFormatted(a, b)\n      {\n        var af = format( comparator, a );\n        var bf = format( comparator, b );\n\n        return af.localeCompare( bf );\n      };\n    }\n    else if ( comparator.indexOf('.') !== -1 )\n    {\n      return function compareExpression(a, b)\n      {\n        var ap = parse( comparator, a );\n        var bp = parse( comparator, b );\n\n        return compare( ap, bp, nullsFirst );\n      };\n    }\n    else\n    {\n      return function compareObjects(a, b)\n      {\n        var av = isValue( a ) ? a[ comparator ] : a;\n        var bv = isValue( b ) ? b[ comparator ] : b;\n\n        return compare( av, bv, nullsFirst );\n      };\n    }\n  }\n  else if ( isArray( comparator ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < comparator.length; i++)\n    {\n      parsed[ i ] = createComparator( comparator[ i ], nullsFirst );\n    }\n\n    return function compareObjectsCascade(a, b)\n    {\n      var d = 0;\n\n      for (var i = 0; i < parsed.length && d === 0; i++)\n      {\n        d = parsed[ i ]( a, b );\n      }\n\n      return d;\n    };\n  }\n\n  return null;\n}\n","\n/**\n * A function for comparing two values and determine whether they're considered\n * equal.\n *\n * @callback equalityCallback\n * @param {Any} a -\n *    The first value to test.\n * @param {Any} b -\n *    The second value to test.\n * @return {Boolean} -\n *    Whether or not the two values are considered equivalent.\n * @see Rekord.equals\n * @see Rekord.equalsStrict\n * @see Rekord.equalsCompare\n */\n\n /**\n  * A function for comparing two values to determine if one is greater or lesser\n  * than the other or if they're equal.\n  *\n  * ```javascript\n  * comparisonCallback( a, b ) < 0 // a < b\n  * comparisonCallback( a, b ) > 0 // a > b\n  * comparisonCallback( a, b ) == 0 // a == b\n  * ```\n  *\n  * @callback comparisonCallback\n  * @param {Any} a -\n  *    The first value to test.\n  * @param {Any} b -\n  *    The second value to test.\n  * @return {Number} -\n  *    0 if the two values are considered equal, a negative value if `a` is\n  *    considered less than `b`, and a positive value if `a` is considered\n  *    greater than `b`.\n  * @see Rekord.compare\n  * @see Rekord.compareNumbers\n  */\n\nfunction equalsStrict(a, b)\n{\n  return a === b;\n}\n\nfunction equalsCompare(a, b)\n{\n  return compare( a, b ) === 0;\n}\n\nfunction equals(a, b)\n{\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a !== a && b !== b) return true; // NaN === NaN\n\n  var at = typeof a;\n  var bt = typeof b;\n  if (at !== bt) return false;\n\n  var aa = isArray(a);\n  var ba = isArray(b);\n  if (aa !== ba) return false;\n\n  if (aa) {\n    if (a.length !== b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (isDate(a)) {\n    return isDate(b) && equals( a.getTime(), b.getTime() );\n  }\n  if (isRegExp(a)) {\n    return isRegExp(b) && a.toString() === b.toString();\n  }\n\n  if (at === 'object') {\n    for (var p in a) {\n      if (p.charAt(0) !== '$' && !isFunction(a[p])) {\n        if (!(p in b) || !equals(a[p], b[p])) {\n          return false;\n        }\n      }\n    }\n    for (var p in b) {\n      if (p.charAt(0) !== '$' && !isFunction(b[p])) {\n        if (!(p in a)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nfunction compareNumbers(a, b)\n{\n  return (a === b ? 0 : (a < b ? -1 : 1));\n}\n\nfunction compare(a, b, nullsFirst)\n{\n  if (a == b)\n  {\n    return 0;\n  }\n\n  var av = isValue( a );\n  var bv = isValue( b );\n\n  if (av !== bv)\n  {\n    return (av && !nullsFirst) || (bv && nullsFirst) ? -1 : 1;\n  }\n\n  if (isDate(a))\n  {\n    a = a.getTime();\n  }\n  if (isDate(b))\n  {\n    b = b.getTime();\n  }\n  if (isNumber(a) && isNumber(b))\n  {\n    return compareNumbers(a, b);\n  }\n  if (isArray(a) && isArray(b))\n  {\n    return compareNumbers(a.length, b.length);\n  }\n  if (isBoolean(a) && isBoolean(b))\n  {\n    return a ? -1 : 1;\n  }\n\n  return (a + '').localeCompare(b + '');\n}\n","\nfunction addEventFunction(target, functionName, events, secret)\n{\n  var on = secret ? '$on' : 'on';\n  var off = secret ? '$off' : 'off';\n\n  addMethod( target, functionName, function(callback, context)\n  {\n    var subject = this;\n    var unlistened = false;\n\n    function listener()\n    {\n      var result = callback.apply( context || subject, arguments );\n\n      if ( result === false )\n      {\n        unlistener();\n      }\n    };\n\n    function unlistener()\n    {\n      if ( !unlistened )\n      {\n        subject[ off ]( events, listener );\n        unlistened = true;\n      }\n    }\n\n    subject[ on ]( events, listener );\n\n    return unlistener;\n  });\n}\n\n/**\n * Adds functions to the given object (or prototype) so you can listen for any\n * number of events on the given object, optionally once. Listeners can be\n * removed later.\n *\n * The following methods will be added to the given target:\n *\n * ```\n * target.on( events, callback, [context] )\n * target.once( events, callback, [context] )\n * target.after( events, callback, [context] )\n * target.off( events, callback )\n * target.trigger( events, [a, b, c...] )\n * ```\n *\n * Where...\n * - `events` is a string of space delimited events.\n * - `callback` is a function to invoke when the event is triggered.\n * - `context` is an object that should be the `this` when the callback is\n *   invoked. If no context is given the default value is the object which has\n *   the trigger function that was invoked.\n *\n * @memberof Rekord\n * @param {Object} [target] -\n *    The object to add `on`, `once`, `off`, and `trigger` functions to.\n * @param {Boolean} [secret=false] -\n *    If true - the functions will be prefixed with `$`.\n */\nfunction eventize(target, secret)\n{\n\n  var CALLBACK_FUNCTION = 0;\n  var CALLBACK_CONTEXT = 1;\n  var CALLBACK_GROUP = 2;\n\n  var triggerId = 0;\n\n  /**\n   * A mixin which adds `on`, `once`, `after`, and `trigger` functions to\n   * another object.\n   *\n   * @class Eventful\n   * @memberof Rekord\n   * @see Rekord.eventize\n   */\n\n   /**\n    * A mixin which adds `$on`, `$once`, `$after`, and `$trigger` functions to\n    * another object.\n    *\n    * @class Eventful$\n    * @memberof Rekord\n    * @see Rekord.eventize\n    */\n\n  // Adds a listener to $this\n  function onListeners($this, property, events, callback, context)\n  {\n    if ( !isFunction( callback ) )\n    {\n      return noop;\n    }\n\n    var events = toArray( events, ' ' );\n    var listeners = $this[ property ];\n\n    if ( !listeners )\n    {\n      listeners = $this[ property ] = {};\n    }\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var eventName = events[ i ];\n      var eventListeners = listeners[ eventName ];\n\n      if ( !eventListeners )\n      {\n        eventListeners = listeners[ eventName ] = [];\n      }\n\n      eventListeners.push( [ callback, context || $this, 0 ] );\n    }\n\n    return function ignore()\n    {\n      for (var i = 0; i < events.length; i++)\n      {\n        offListeners( listeners, events[ i ], callback );\n      }\n    };\n  };\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method on\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for every occurrence of the given events and invokes the callback\n   * each time any of them are triggered.\n   *\n   * @method $on\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function on(events, callback, context)\n  {\n    return onListeners( this, '$$on', events, callback, context );\n  }\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method once\n   * @memberof Rekord.Eventful#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  /**\n   * Listens for the first of the given events to be triggered and invokes the\n   * callback once.\n   *\n   * @method $once\n   * @memberof Rekord.Eventful$#\n   * @param {String|Array} events -\n   *    The event or events to listen to.\n   * @param {Function} callback -\n   *    The function to invoke when any of the events are invoked.\n   * @param {Object} [context] -\n   *    The value of `this` when the callback is invoked. If not specified, the\n   *    reference of the object this function exists on will be `this`.\n   * @return {Function} -\n   *    A function to invoke to stop listening to all of the events given.\n   */\n\n  function once(events, callback, context)\n  {\n    return onListeners( this, '$$once', events, callback, context );\n  }\n\n  function after(events, callback, context)\n  {\n    return onListeners( this, '$$after', events, callback, context );\n  }\n\n  // Removes a listener from an array of listeners.\n  function offListeners(listeners, event, callback)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n\n      for (var k = eventListeners.length - 1; k >= 0; k--)\n      {\n        if (eventListeners[ k ][ CALLBACK_FUNCTION ] === callback)\n        {\n          eventListeners.splice( k, 1 );\n        }\n      }\n    }\n  }\n\n  // Deletes a property from the given object if it exists\n  function deleteProperty(obj, prop)\n  {\n    if ( obj && prop in obj )\n    {\n      delete obj[ prop ];\n    }\n  }\n\n  /**\n   * Stops listening for a given callback for a given set of events.\n   *\n   * **Examples:**\n   *\n   *     target.off();           // remove all listeners\n   *     target.off('a b');      // remove all listeners on events a & b\n   *     target.off(['a', 'b']); // remove all listeners on events a & b\n   *     target.off('a', x);     // remove listener x from event a\n   *\n   * @method off\n   * @for eventize\n   * @param {String|Array|Object} [events]\n   * @param {Function} [callback]\n   * @chainable\n   */\n  function off(events, callback)\n  {\n    // Remove ALL listeners\n    if ( !isDefined( events ) )\n    {\n      deleteProperty( this, '$$on' );\n      deleteProperty( this, '$$once' );\n      deleteProperty( this, '$$after' );\n    }\n    else\n    {\n      var events = toArray( events, ' ' );\n\n      // Remove listeners for given events\n      if ( !isFunction( callback ) )\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          deleteProperty( this.$$on, events[i] );\n          deleteProperty( this.$$once, events[i] );\n          deleteProperty( this.$$after, events[i] );\n        }\n      }\n      // Remove specific listener\n      else\n      {\n        for (var i = 0; i < events.length; i++)\n        {\n          offListeners( this.$$on, events[i], callback );\n          offListeners( this.$$once, events[i], callback );\n          offListeners( this.$$after, events[i], callback );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // Triggers listeneers for the given event\n  function triggerListeners(listeners, event, args, clear)\n  {\n    if (listeners && event in listeners)\n    {\n      var eventListeners = listeners[ event ];\n      var triggerGroup = ++triggerId;\n\n      for (var i = 0; i < eventListeners.length; i++)\n      {\n        var callback = eventListeners[ i ];\n\n        if ( callback )\n        {\n          if ( callback[ CALLBACK_GROUP ] !== triggerGroup )\n          {\n            callback[ CALLBACK_GROUP ] = triggerGroup;\n            callback[ CALLBACK_FUNCTION ].apply( callback[ CALLBACK_CONTEXT ], args );\n\n            if ( callback !== eventListeners[ i ] )\n            {\n              i = -1;\n            }\n          }\n        }\n      }\n\n      if ( clear )\n      {\n        delete listeners[ event ];\n      }\n    }\n  }\n\n  /**\n   * Triggers a single event optionally passing an argument to any listeners.\n   *\n   * @method trigger\n   * @for eventize\n   * @param {String} event\n   * @param {Array} args\n   * @chainable\n   */\n  function trigger(events, args)\n  {\n    var events = toArray( events, ' ' );\n\n    for (var i = 0; i < events.length; i++)\n    {\n      var e = events[ i ];\n\n      triggerListeners( this.$$on, e, args, false );\n      triggerListeners( this.$$once, e, args, true );\n      triggerListeners( this.$$after, e, args, false )\n    }\n\n    return this;\n  }\n\n  if ( secret )\n  {\n    addMethod( target, '$on', on );\n    addMethod( target, '$once', once );\n    addMethod( target, '$after', after );\n    addMethod( target, '$off', off );\n    addMethod( target, '$trigger', trigger );\n  }\n  else\n  {\n    addMethod( target, 'on', on );\n    addMethod( target, 'once', once );\n    addMethod( target, 'after', after );\n    addMethod( target, 'off', off );\n    addMethod( target, 'trigger', trigger );\n  }\n};\n","\n\nRekord.Havings = {};\n\nfunction saveHaving(name, having)\n{\n  return Rekord.Havings[ name ] = createHaving( having );\n}\n\nfunction createHaving(having)\n{\n  if ( isFunction( having ) )\n  {\n    return having;\n  }\n  else if ( isString( having ) )\n  {\n    if ( having in Rekord.Havings )\n    {\n      return Rekord.Havings[ having ];\n    }\n\n    return function hasValue(model)\n    {\n      return isValue( model ) && isValue( model[ having ] );\n    };\n  }\n  else\n  {\n    return function hasAll()\n    {\n      return true;\n    };\n  }\n}\n","\n\n\n\nfunction applyOptions( target, options, defaults, secret )\n{\n  options = options || {};\n\n  function setProperty(prop, value)\n  {\n    if ( isFunction( value ) )\n    {\n      addMethod( target, prop, value );\n    }\n    else\n    {\n      target[ prop ] = value;\n    }\n  }\n\n  for (var prop in defaults)\n  {\n    var defaultValue = defaults[ prop ];\n    var option = options[ prop ];\n    var valued = isValue( option );\n\n    if ( !valued && defaultValue === undefined )\n    {\n      throw ( prop + ' is a required option' );\n    }\n    else if ( valued )\n    {\n      setProperty( prop, option );\n    }\n    else\n    {\n      setProperty( prop, copy( defaultValue ) );\n    }\n  }\n\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      setProperty( prop, options[ prop ] );\n    }\n  }\n\n  if ( secret )\n  {\n    target.$options = options;\n  }\n  else\n  {\n    target.options = options;\n  }\n}\n\n/**\n * Determines whether the properties on one object equals the properties on\n * another object.\n *\n * @memberof Rekord\n * @param {Object} test -\n *    The object to test for matching.\n * @param {String|String[]} testFields -\n *    The property name or array of properties to test for equality on `test`.\n * @param {Object} expected -\n *    The object with the expected values.\n * @param {String|String[]} expectedFields -\n *    The property name or array of properties to test for equality on `expected`.\n * @param {equalityCallback} [equals] -\n *    The equality function which compares two values and returns whether they\n *    are considered equivalent.\n * @return {Boolean} -\n *    True if the `testFields` properties on `test` are equivalent to the\n *    `expectedFields` on `expected` according to the `equals` function.\n */\nfunction propsMatch(test, testFields, expected, expectedFields, equals)\n{\n  var equality = equals || Rekord.equals;\n\n  if ( isString( testFields ) ) // && isString( expectedFields )\n  {\n    return equality( test[ testFields ], expected[ expectedFields ] );\n  }\n  else // if ( isArray( testFields ) && isArray( expectedFields ) )\n  {\n    for (var i = 0; i < testFields.length; i++)\n    {\n      var testProp = testFields[ i ];\n      var expectedProp = expectedFields[ i ];\n\n      if ( !equality( test[ testProp ], expected[ expectedProp ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n// Determines whether the given model has the given fields\nfunction hasFields(model, fields, exists)\n{\n  if ( isArray( fields ) )\n  {\n    for (var i = 0; i < fields.length; i++)\n    {\n      if ( !exists( model[ fields[ i ] ] ) )\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  else // isString( fields )\n  {\n    return exists( model[ fields ] );\n  }\n}\n\n\nfunction grab(obj, props, copyValues)\n{\n  var grabbed = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if ( p in obj )\n    {\n      grabbed[ p ] = copyValues ? copy( obj[ p ] ) : obj[ p ];\n    }\n  }\n\n  return grabbed;\n}\n\nfunction pull(obj, props, copyValues)\n{\n  if ( isString( props ) )\n  {\n    var pulledValue = obj[ props ];\n\n    return copyValues ? copy( pulledValue ) : pulledValue;\n  }\n  else // isArray( props )\n  {\n    var pulled = [];\n\n    for (var i = 0; i < props.length; i++)\n    {\n      var p = props[ i ];\n      var pulledValue = obj[ p ];\n\n      pulled.push( copyValues ? copy( pulledValue ) : pulledValue );\n    }\n\n    return pulled;\n  }\n}\n\nfunction transfer(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction collapse()\n{\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++)\n  {\n    var a = arguments[ i ];\n\n    if ( isObject( a ) )\n    {\n      for (var prop in a)\n      {\n        if ( !(prop in target) )\n        {\n          target[ prop ] = a[ prop ];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction clean(x)\n{\n  for (var prop in x)\n  {\n    if ( prop.charAt(0) === '$' )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction cleanFunctions(x)\n{\n  for (var prop in x)\n  {\n    if ( isFunction( x[prop] ) )\n    {\n      delete x[ prop ];\n    }\n  }\n\n  return x;\n}\n\nfunction copy(x, copyHidden)\n{\n  if (x === null || x === undefined || typeof x !== 'object' || isFunction(x) || isRegExp(x))\n  {\n    return x;\n  }\n\n  if (isArray(x))\n  {\n    var c = [];\n\n    for (var i = 0; i < x.length; i++)\n    {\n      c.push( copy(x[i], copyHidden) );\n    }\n\n    return c;\n  }\n\n  if (isDate(x))\n  {\n    return new Date( x.getTime() );\n  }\n\n  var c = {};\n\n  for (var prop in x)\n  {\n    if (copyHidden || prop.charAt(0) !== '$')\n    {\n      c[ prop ] = copy( x[prop], copyHidden );\n    }\n  }\n\n  return c;\n}\n\nfunction diff(curr, old, props, comparator)\n{\n  var d = {};\n\n  for (var i = 0; i < props.length; i++)\n  {\n    var p = props[ i ];\n\n    if (!comparator( curr[ p ], old[ p ] ) )\n    {\n      d[ p ] = copy( curr[ p ] );\n    }\n  }\n\n  return d;\n}\n","\n\n\nfunction parse(expr, base)\n{\n  var valid = true;\n\n  expr.replace( parse.REGEX, function(prop)\n  {\n    if (!valid)\n    {\n      return;\n    }\n\n    if ( isArray( base ) )\n    {\n      var i = parseInt(prop);\n\n      if (!isNaN(i))\n      {\n        base = base[ i ];\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else if ( isObject( base ) )\n    {\n      if (prop in base)\n      {\n        var value = base[ prop ];\n        base = isFunction(value) ? value() : value;\n      }\n      else\n      {\n        valid = false;\n      }\n    }\n    else\n    {\n      valid = false;\n    }\n  });\n\n  return valid ? base : void 0;\n}\n\nparse.REGEX = /([\\w$]+)/g;\n\nfunction format(template, base)\n{\n  return template.replace( format.REGEX, function(match)\n  {\n    return parse( match, base );\n  });\n}\n\nformat.REGEX = /\\{[^\\}]+\\}/g;\n\nfunction createFormatter(template)\n{\n  return function formatter(base)\n  {\n    return format( template, base );\n  };\n}\n","\n\n/**\n * A function for resolving a value from a given value. Typically used to\n * transform an object into one of it's properties.\n *\n * @callback propertyResolverCallback\n * @param {Any} model -\n *    The model to use to resolve a value.\n * @return {Any} -\n *    The resolved value.\n * @see Rekord.createPropertyResolver\n */\n\n\n/**\n * An expression which resolves a value from another value.\n *\n * ```javascript\n * // {age: 6, name: 'x', user: {first: 'tom'}}\n * 'age'                    // age property of an object\n * 'user.first'             // sub property\n * '{age}, {user.first}'    // a formatted string built from object values\n * function(a) {}           // a function which returns a value itself\n * ['age', 'name']          // multiple properties joined with a delimiter\n * {age:null, user:'first'} // multiple properties joined with a delimiter including a sub property\n * ```\n *\n * @typedef {String|Function|Array|Object} propertyResolverInput\n */\n\nRekord.NumberResolvers = {};\n\nfunction saveNumberResolver(name, numbers)\n{\n  return Rekord.NumberResolvers[ name ] = createNumberResolver( numbers );\n}\n\nfunction createNumberResolver(numbers)\n{\n  var resolver = createPropertyResolver( numbers );\n\n  if ( isString( numbers ) && numbers in Rekord.NumberResolvers )\n  {\n    return Rekord.NumberResolvers[ numbers ];\n  }\n\n  return function resolveNumber(model)\n  {\n    return parseFloat( resolver( model ) );\n  };\n}\n\nRekord.PropertyResolvers = {};\n\nfunction savePropertyResolver(name, properties, delim)\n{\n  return Rekord.PropertyResolvers[ name ] = createPropertyResolver( properties, delim );\n}\n\n/**\n * Creates a function which resolves a value from another value given an\n * expression. This is often used to get a property value of an object.\n *\n * ```javascript\n * // x = {age: 6, name: 'tom', user: {first: 'jack'}}\n * createPropertyResolver()( x )                          // x\n * createPropertyResolver( 'age' )( x )                   // 6\n * createPropertyResolver( 'user.first' )( x )            // 'jack'\n * createPropertyResolver( '{name} & {user.first}')( x )  // 'tom & jack'\n * createPropertyResolver( ['name', 'age'] )( x )         // 'tom,6'\n * createPropertyResolver( ['name', 'age'], ' is ' )( x ) // 'tom is 6'\n * createPropertyResolver( {age:null, user:'first'})( x ) // '6,jack'\n * ```\n *\n * @memberof Rekord\n * @param {propertyResolverInput} [properties] -\n *    The expression which converts one value into another.\n * @param {String} [delim=','] -\n *    A delimiter to use to join multiple properties into a string.\n * @return {propertyResolverCallback} -\n *    A function to take values and resolve new ones.\n */\nfunction createPropertyResolver(properties, delim)\n{\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.PropertyResolvers )\n    {\n      return Rekord.PropertyResolvers[ properties ];\n    }\n\n    if ( properties.indexOf('{') !== -1 )\n    {\n      return function resolveFormatted(model)\n      {\n        return format( properties, model );\n      };\n    }\n    else if ( properties.indexOf('.') !== -1 )\n    {\n      return function resolveExpression(model)\n      {\n        return parse( properties, model );\n      };\n    }\n    else\n    {\n      return function resolveProperty(model)\n      {\n        return model[ properties ];\n      };\n    }\n  }\n  else if ( isArray( properties ) )\n  {\n    return function resolveProperties(model)\n    {\n      return pull( model, properties ).join( delim );\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    var propsArray = [];\n    var propsResolver = [];\n\n    for (var prop in properties)\n    {\n      propsArray.push( prop );\n      propsResolver.push( createPropertyResolver( properties[ prop ], delim ) );\n    }\n\n    return function resolvePropertyObject(model)\n    {\n      var pulled = [];\n\n      for (var i = 0; i < prop.length; i++)\n      {\n        pulled.push( propsResolver[ i ]( model[ propsArray[ i ] ] ) );\n      }\n\n      return pulled.join( delim );\n    };\n  }\n  else\n  {\n    return function resolveNone(model)\n    {\n      return model;\n    }\n  }\n}\n","\nfunction camelCaseReplacer(match)\n{\n  return match.length === 1 ? match.toUpperCase() : match.charAt(1).toUpperCase();\n}\n\nfunction toCamelCase(name)\n{\n  return name.replace( toCamelCase.REGEX, camelCaseReplacer );\n}\n\ntoCamelCase.REGEX = /(^.|_.)/g;\n","\n/**\n * A function which takes a value (typically an object) and returns a true or\n * false value.\n *\n * @callback whereCallback\n * @param {Any} value -\n *    The value to test.\n * @return {Boolean} -\n *    Whether or not the value passed the test.\n * @see Rekord.createWhere\n * @see Rekord.saveWhere\n */\n\n/**\n * An expression which can be used to generate a function for testing a value\n * and returning a boolean result. The following types can be given and will\n * result in the following tests:\n *\n * - `String`: If a string & value are given - the generated function will test\n *    if the object has a property with the given value. If a string is given\n *    and no value is given - the generated function will test if the object\n *    has the property and a non-null value.\n * - `Object`: If an object is given - the generated function will test all\n *    properties of the given object and return true only if the object being\n *    tested has the same values.\n * - `Array`: If an array is given - each element in the array is passed as\n *    arguments to generate a new function. The returned function will only\n *    return true if all generated functions return true - otherwise false.\n * - `whereCallback`: A function can be given which is immediately returned as\n *    the test function.\n *\n * @typedef {String|Object|Array|whereCallback} whereInput\n */\n\n\n/**\n * A map of saved {@link whereCallback} functions.\n *\n * @type {Object}\n */\nRekord.Wheres = {};\n\n/**\n * Saves a function created with {@link Rekord.createWhere} to a cache of\n * filter functions which can be created more quickly in subsequent calls. It's\n * advised to make use of saved where's even in simpler scenarios for several\n * reasons:\n *\n * - You can name a comparison which is self documenting\n * - When refactoring, you only need to modify a single place in the code\n * - It's slightly more efficient (time & memory) to cache filter functions\n *\n * ```javascript\n * Rekord.saveWhere('whereName', 'field', true);\n * Rekord.createWhere('whereName'); // returns the same function except quicker\n * ```\n *\n * @memberof Rekord\n * @param {String} name -\n *    The name of the filter function to save for later use.\n * @param {String|Object|Array|whereCallback} [properties] -\n *    See {@link Rekord.createWhere}\n * @param {Any} [value] -\n *    See {@link Rekord.createWhere}\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    See {@link Rekord.createWhere}\n * @see Rekord.createWhere\n */\nfunction saveWhere(name, properties, values, equals)\n{\n  return Rekord.Wheres[ name ] = createWhere( properties, values, equals );\n}\n\n/**\n * Creates a function which returns a true or false value given a test value.\n * This is also known as a filter function.\n *\n * ```javascript\n * Rekord.createWhere('field', true);  // when an object has property where field=true\n * Rekord.createWhere('field'); // when an object has the property named field\n * Rekord.createWhere(function(){}); // a function can be given which is immediately returned\n * Rekord.createWhere(['field', function(){}, ['field', true]]); // when an object meets all of the above criteria\n * Rekord.createWhere({foo: 1, bar: 2}); // when an object has foo=1 and bar=2\n * Rekord.createWhere('field', true, myEquals); // A custom comparison function can be given.\n * Rekord.createWhere(); // always returns true\n * ```\n *\n * @memberof Rekord\n * @param {whereInput} [properties] -\n *    The first expression used to generate a filter function.\n * @param {Any} [value] -\n *    When the first argument is a string this argument will be treated as a\n *    value to compare to the value of the named property on the object passed\n *    through the filter function.\n * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n *    An alternative function can be used to compare to values.\n * @return {whereCallback} -\n *    A function which takes a value (typically an object) and returns a true\n *    or false value.\n * @see Rekord.saveWhere\n */\nfunction createWhere(properties, value, equals)\n{\n  var equality = equals || equalsStrict;\n\n  if ( isFunction( properties ) )\n  {\n    return properties;\n  }\n  else if ( isArray( properties ) )\n  {\n    var parsed = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n      var where = properties[ i ];\n\n      parsed.push( isArray( where ) ? createWhere.apply( this, where ) : createWhere( where ) );\n    }\n\n    return function whereMultiple(model)\n    {\n      for (var i = 0; i < parsed.length; i++)\n      {\n        if ( !parsed[ i ]( model ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isObject( properties ) )\n  {\n    return function whereEqualsObject(model)\n    {\n      for (var prop in properties)\n      {\n        if ( !equality( model[ prop ], properties[ prop ] ) )\n        {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n  else if ( isString( properties ) )\n  {\n    if ( properties in Rekord.Wheres )\n    {\n      return Rekord.Wheres[ properties ];\n    }\n\n    var resolver = createPropertyResolver( properties );\n\n    if ( isValue( value ) )\n    {\n      return function whereEqualsValue(model)\n      {\n        return equality( resolver( model ), value );\n      };\n    }\n    else\n    {\n      return function whereHasValue(model)\n      {\n        return isValue( resolver( model ) );\n      };\n    }\n  }\n  else\n  {\n    return function whereAll(model)\n    {\n      return true;\n    };\n  }\n}\n","\n/**\n * Creates a Rekord object given a set of options. A Rekord object is also the\n * constructor for creating instances of the Rekord object defined.\n *\n * @namespace\n * @param {Object} options\n *        The options of\n */\nfunction Rekord(options)\n{\n  if ( options.name in Rekord.cache )\n  {\n    return Rekord.cache[ options.name ];\n  }\n\n  Rekord.trigger( Rekord.Events.Options, [options] );\n\n  var database = new Database( options );\n\n  var model = new Function('return function ' + database.className + '(props, remoteData) { this.$init( props, remoteData ) }')();\n  model.prototype = new Model( database );\n\n  database.Model = model;\n  model.Database = database;\n\n  Rekord.trigger( Rekord.Events.Plugins, [model, database, options] );\n\n  Rekord.cache[ database.name ] = model;\n  Rekord.cache[ database.className ] = model;\n\n  if ( Rekord.autoload )\n  {\n    database.loadBegin(function onLoadFinish(success)\n    {\n      if ( success )\n      {\n        database.loadFinish();\n      }\n    });\n  }\n  else\n  {\n    Rekord.unloaded.push( database );\n  }\n\n  Rekord.trigger( Rekord.Events.Initialized, [model] );\n\n  Rekord.debug( Rekord.Debugs.CREATION, database, options );\n\n  return model;\n}\n\nRekord.autoload = false;\n\nRekord.unloaded = [];\n\nRekord.load = function(callback, context)\n{\n  var callbackContext = context || this;\n  var loading = Rekord.unloaded.slice();\n  var loaded = [];\n  var loadedSuccess = [];\n\n  Rekord.unloaded.length = 0;\n\n  function onLoadFinish(success, db)\n  {\n    loadedSuccess.push( success );\n    loaded.push( db );\n\n    if ( loaded.length === loading.length )\n    {\n      for (var k = 0; k < loaded.length; k++)\n      {\n        var db = loaded[ k ];\n        var success = loadedSuccess[ k ];\n\n        if ( success )\n        {\n          db.loadFinish();\n        }\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext );\n      }\n    }\n  }\n\n  for (var i = 0; i < loading.length; i++)\n  {\n    loading[ i ].loadBegin( onLoadFinish );\n  }\n};\n\nRekord.cache = {};\n\nRekord.get = function(name, callback, context)\n{\n  var cached = Rekord.cache[ name ];\n  var callbackContext = context || global;\n\n  if ( isFunction( callback ) )\n  {\n    if ( cached )\n    {\n      callback.call( callbackContext, cached );\n    }\n    else\n    {\n      function checkRekord()\n      {\n        var cached = Rekord.cache[ name ];\n\n        if ( cached )\n        {\n          callback.call( callbackContext, cached );\n          off();\n        }\n      }\n\n      var off = Rekord.on( Rekord.Events.Initialized, checkRekord );\n    }\n  }\n\n  return cached;\n};\n\n/**\n * A value which identifies a model instance. This can be the key of the model,\n * an array of values (if the model has composite keys), an object which at\n * least contains fields which identify the model, an instance of a model, the\n * reference to a Rekord instance, or a function.\n *\n * If a plain object is given and it shares the same key as an existing model -\n * the other fields on the object will be applied to the existing instance. If\n * a plain object is given and it's key doesn't map to an existing model - a new\n * one is created.\n *\n * If a reference to a Rekord instance is given - a new model instance is created\n * with default values.\n *\n * If a function is given - it's invoked and the returning value is used as the\n * value to identify the model instance.\n *\n * @typedef {String|Number|String[]|Number[]|Object|Rekord|Rekord.Model|Function} modelInput\n */\n\n /**\n  * A key to a model instance.\n  *\n  * @typedef {String|Number} modelKey\n  */\n\neventize( Rekord );\n\nRekord.Events =\n{\n  Initialized:  'initialized',\n  Plugins:      'plugins',\n  Options:      'options',\n  Online:       'online',\n  Offline:      'offline'\n};\n\nRekord.Cascade =\n{\n  None:       0,\n  Local:      1,\n  Rest:       2,\n  NoLive:     3,\n  Live:       4,\n  NoRest:     5,\n  Remote:     6,\n  All:        7\n};\n\nRekord.Cache =\n{\n  None:       'none',\n  Pending:    'pending',\n  All:        'all'\n};\n\nRekord.Store =\n{\n  None:   0,\n  Model:  1,\n  Key:    2,\n  Keys:   3\n};\n\nRekord.Save =\n{\n  None:   0,\n  Model:  4,\n  Key:    5,\n  Keys:   6\n};\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var dynamics = collapse( options.dynamic, Database.Defaults.dynamic );\n\n  if ( !isEmpty( dynamics ) )\n  {\n    for ( var property in dynamics )\n    {\n      addDynamicProperty( model.prototype, property, dynamics[ property ] );\n    }\n  }\n});\n\nfunction addDynamicProperty(modelPrototype, property, definition)\n{\n  var get = isFunction( definition ) ? definition :\n          ( isObject( definition ) && isFunction( definition.get ) ? definition.get : noop );\n  var set = isObject( definition ) && isFunction( definition.set ) ? definition.set : noop;\n\n  if ( Object.defineProperty )\n  {\n    Object.defineProperty( modelPrototype, property,\n    {\n      configurable: false,\n      enumerable: true,\n      get: get,\n      set: set\n    });\n  }\n  else\n  {\n    var $init = modelPrototype.$init;\n\n    modelPrototype.$init = function()\n    {\n      $init.apply( this, arguments );\n\n      var lastCalculatedValue = this[ property ] = get.apply( this );\n\n      var handleChange = function()\n      {\n        var current = this[ property ];\n\n        if ( current !== lastCalculatedValue )\n        {\n          set.call( this, current );\n        }\n        else\n        {\n          lastCalculatedValue = this[ property ] = get.apply( this );\n        }\n      };\n\n      this.$after( Model.Events.Changes, handleChange, this );\n    };\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var events = collapse( options.events, Database.Defaults.events );\n\n  if ( !isEmpty( events ) )\n  {\n    var modelEvents = [];\n    var databaseEvents = [];\n\n    for ( var eventType in events )\n    {\n      var callback = events[ eventType ];\n      var eventName = toCamelCase( eventType );\n\n      var databaseEventString = Database.Events[ eventName ];\n      var modelEventString = Model.Events[ eventName ];\n\n      if ( databaseEventString )\n      {\n        parseEventListeners( databaseEventString, callback, false, databaseEvents );\n      }\n\n      if ( modelEventString )\n      {\n        parseEventListeners( modelEventString, callback, true, modelEvents );\n      }\n    }\n\n    applyEventListeners( db, databaseEvents );\n\n    if ( modelEvents.length )\n    {\n      var $init = model.prototype.$init;\n\n      addMethod( model.prototype, '$init', function()\n      {\n        $init.apply( this, arguments );\n\n        applyEventListeners( this, modelEvents );\n      });\n    }\n  }\n\n});\n\nfunction parseEventListeners(events, callback, secret, out)\n{\n  var map = {\n    on:     secret ? '$on' : 'on',\n    once:   secret ? '$once' : 'once',\n    after:  secret ? '$after' : 'after'\n  };\n\n  var listeners = out || [];\n\n  if ( isFunction( callback ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback\n    });\n  }\n  else if ( isArray( callback ) && callback.length === 2 && isFunction( callback[0] ) )\n  {\n    listeners.push(\n    {\n      when: map.on,\n      events: events,\n      invoke: callback[0],\n      context: callback[1]\n    });\n  }\n  else if ( isObject( callback ) )\n  {\n    for ( var eventType in callback )\n    {\n      if ( eventType in map )\n      {\n        var subcallback = callback[ eventType ];\n        var when = map[ eventType ];\n\n        if ( isFunction( subcallback ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback\n          });\n        }\n        else if ( isArray( subcallback ) && subcallback.length === 2 && isFunction( subcallback[0] ) )\n        {\n          listeners.push(\n          {\n            when: when,\n            events: events,\n            invoke: subcallback[0],\n            context: subcallback[1]\n          });\n        }\n      }\n    }\n  }\n\n  return listeners;\n}\n\nfunction applyEventListeners(target, listeners)\n{\n  for (var i = 0; i < listeners.length; i++)\n  {\n    var l = listeners[ i ];\n\n    target[ l.when ]( l.events, l.invoke, l.context );\n  }\n}\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var files = options.files || Database.Defaults.files;\n\n  if ( !isObject( files ) )\n  {\n    return;\n  }\n\n  if ( !isFilesSupported() )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n\n    return;\n  }\n\n  for (var field in files)\n  {\n    var fieldOption = files[ field ];\n\n    if ( isString( fieldOption ) )\n    {\n      fieldOption = {\n        type: fieldOption\n      };\n    }\n\n    db.decodings[ field ] = FileDecodings[ fieldOption.type ]( db, fieldOption );\n    db.encodings[ field ] = FileEncoder;\n  }\n});\n\n/**\nfiles: {\n  field: {\n    type: 'text', // base64, dataURL, resource\n    processor: 'processor_name',\n    capacity: 1024 * 1024, // maximum bytes\n    types: ['image/png', 'image/jpg', 'image/gif'], // acceptable MIME types\n    autoSave: true,\n    store: true,\n    save: true\n  }\n}\n**/\n\nRekord.fileProcessors = {};\n\nRekord.Events.FilesNotSupported = 'files-not-supported';\nRekord.Events.FileTooLarge = 'file-too-large';\nRekord.Events.FileWrongType = 'file-wrong-type';\nRekord.Events.FileOffline = 'file-offline';\n\n// {\n//  fileToValue(file, model, field, callback),\n//  valueToUser(value, model, field, callback)\n// }\nRekord.addFileProcessor = function(name, methods)\n{\n  Rekord.fileProcessors[ name ] = methods;\n};\n\nRekord.fileProperties =\n[\n  'lastModifiedDate', 'name', 'size', 'type'\n];\n\nfunction isFilesSupported()\n{\n  return global.File && global.FileReader && global.FileList;\n}\n\nfunction toFile(input)\n{\n  if ( input instanceof global.File )\n  {\n    return input;\n  }\n  else if ( input instanceof global.Blob )\n  {\n    return input;\n  }\n  else if ( input instanceof global.FileList && input.length > 0 )\n  {\n    return input[0];\n  }\n\n  return false;\n}\n\nfunction convertNone(x)\n{\n  return x;\n}\n\nfunction convertBase64(x)\n{\n  var i = isString( x ) ? x.indexOf(';base64,') : -1;\n\n  return i === -1 ? x : x.substring( i + 8 );\n}\n\nfunction trySave(model, options)\n{\n  if ( options.autoSave && model.$isSaved() )\n  {\n    model.$save();\n  }\n}\n\nfunction putFileCache(model, property, value, file, options)\n{\n  model.$files = model.$files || {};\n  model.$files[ property ] = {\n    value: value,\n    user: value,\n    file: file,\n    options: options\n  };\n}\n\nfunction setFilesValue(processor, value, model, property, options)\n{\n  var result = undefined;\n  var done = false;\n\n  if ( processor && processor.valueToUser )\n  {\n    processor.valueToUser( value, model, property, function(user)\n    {\n      model.$files[ property ].user = user;\n\n      if ( done )\n      {\n        model[ property ] = user;\n        trySave( model, options );\n      }\n      else\n      {\n        result = user;\n      }\n    });\n  }\n  else\n  {\n    result = value;\n  }\n\n  done = true;\n\n  return result;\n}\n\nfunction fileReader(method, converter, options)\n{\n  var processor = Rekord.fileProcessors[ options.processor ];\n\n  if ( !(method in global.FileReader.prototype) )\n  {\n    Rekord.trigger( Rekord.Events.FilesNotSupported );\n  }\n\n  return function(input, model, property)\n  {\n    var file = toFile( input );\n\n    if ( file !== false )\n    {\n      var reader = new global.FileReader();\n      var result = undefined;\n      var done = false;\n\n      reader.onload = function(e)\n      {\n        var value = converter( e.target.result );\n\n        putFileCache( model, property, value, file, options );\n\n        result = setFilesValue( processor, value, model, property, options );\n\n        if ( done )\n        {\n          model[ property ] = result;\n          trySave( model, options );\n        }\n      };\n\n      reader[ method ]( file );\n\n      done = true;\n\n      return result;\n    }\n    else if ( isObject( input ) && input.FILE )\n    {\n      var result = undefined;\n\n      var setter = function(value)\n      {\n          result = value;\n      };\n\n      Rekord.trigger( Rekord.Events.FileOffline, [input, model, property, setter] );\n\n      return result;\n    }\n    else\n    {\n      putFileCache( model, property, input, null, options );\n\n      return setFilesValue( processor, input, model, property, options );\n    }\n  };\n}\n\nvar FileDecodings =\n{\n  text: function(db, options)\n  {\n    return fileReader( 'readAsText', convertNone, options );\n  },\n  dataURL: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertNone, options );\n  },\n  base64: function(db, options)\n  {\n    return fileReader( 'readAsDataURL', convertBase64, options );\n  },\n  resource: function(db, options)\n  {\n    return function(input, model, property)\n    {\n      var file = toFile( input );\n      var processor = Rekord.fileProcessors[ options.processor ];\n\n      if ( !processor )\n      {\n        throw 'Processor required for resource files.';\n      }\n\n      if ( file !== false )\n      {\n        if ( isNumber( options.capacity ) && isNumber( file.size ) && file.size > options.capacity )\n        {\n          Rekord.trigger( Rekord.Events.FileTooLarge, [file, model, property] );\n\n          return undefined;\n        }\n\n        if ( isArray( options.types ) && isString( file.type ) && indexOf( options.types, file.type ) === false )\n        {\n          Rekord.trigger( Rekord.Events.FileWrongType, [file, model, property] );\n\n          return undefined;\n        }\n\n        var result = undefined;\n        var done = false;\n\n        processor.fileToValue( file, model, property, function(value)\n        {\n          putFileCache( model, property, value, file, options );\n\n          result = setFilesValue( processor, value, model, property, options );\n\n          if ( done )\n          {\n            model[ property ] = result;\n            trySave( model, options );\n          }\n        });\n\n        done = true;\n\n        return result;\n      }\n      else if ( isObject( input ) && input.FILE )\n      {\n        Rekord.trigger( Rekord.Events.FileOffline, [input, model, property] );\n      }\n      else\n      {\n        putFileCache( model, property, input, null, options );\n\n        return setFilesValue( processor, input, model, property, options );\n      }\n    };\n  }\n};\n\nfunction FileEncoder(input, model, field, forSaving)\n{\n  if ( model.$files && field in model.$files )\n  {\n    var cached = model.$files[ field ];\n\n    if ( (forSaving && cached.save === false) || (!forSaving && cached.store === false) )\n    {\n      return undefined;\n    }\n\n    if ( !forSaving && cached.file )\n    {\n      var props = grab( cached.file, Rekord.fileProperties, false );\n\n      props.FILE = true;\n\n      return props;\n    }\n\n    if ( input === cached.user )\n    {\n      if ( forSaving && cached.file )\n      {\n        model.$once( Model.Events.RemoteSave, function()\n        {\n          delete cached.file;\n\n          model.$addOperation( SaveLocal, Rekord.Cascade.Local );\n        });\n      }\n\n      return cached.value;\n    }\n  }\n\n  return input;\n}\n","\nfunction Gate(callback)\n{\n  var opened = false;\n  var blocked = [];\n\n  var gate = function()\n  {\n    if ( opened )\n    {\n      callback.apply( this, arguments );\n    }\n    else\n    {\n      blocked.push( this, AP.slice.apply( arguments ) );\n    }\n  };\n\n  gate.open = function()\n  {\n    if ( !opened )\n    {\n      for (var i = 0; i < blocked.length; i += 2)\n      {\n        var context = blocked[ i ];\n        var args = blocked[ i + 1 ];\n\n        callback.apply( context, args );\n      }\n\n      blocked.length = 0;\n      opened = true;\n    }\n  };\n\n  return gate;\n}\n","\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Database(options)\n{\n  var defaults = Database.Defaults;\n\n  // Apply the options to this database!\n  applyOptions( this, options, defaults );\n\n  // Apply options not specified in defaults\n  for (var prop in options)\n  {\n    if ( !(prop in defaults) )\n    {\n      this[ prop ] = options[ prop ];\n    }\n  }\n\n  // If key fields aren't in fields array, add them in\n  var key = this.key;\n  var fields = this.fields;\n  if ( isArray( key ) )\n  {\n    for (var i = key.length - 1; i >= 0; i--)\n    {\n      if ( indexOf( fields, key[ i ] ) === false )\n      {\n        fields.unshift( key[ i ] );\n      }\n    }\n  }\n  else // isString( key )\n  {\n    if ( indexOf( fields, key ) === false )\n    {\n      fields.unshift( key );\n    }\n  }\n\n  // Properties\n  this.keys = toArray( this.key );\n  this.models = new ModelCollection( this );\n  this.all = {};\n  this.loaded = {};\n  this.className = this.className || toCamelCase( this.name );\n  this.initialized = false;\n  this.pendingRefresh = false;\n  this.localLoaded = false;\n  this.remoteLoaded = false;\n  this.firstRefresh = false;\n  this.pendingOperations = 0;\n  this.afterOnline = false;\n  this.saveFields = copy( fields );\n\n  // Prepare\n  this.prepare( this, options );\n\n  // Services\n  this.rest   = this.createRest( this );\n  this.store  = this.createStore( this );\n  this.live   = this.createLive( this );\n\n  // Functions\n  this.setComparator( this.comparator, this.comparatorNullsFirst );\n  this.setRevision( this.revision );\n  this.setSummarize( this.summarize );\n\n  // Relations\n  this.relations = {};\n  this.relationNames = [];\n\n  for (var relationType in options)\n  {\n    if ( !(relationType in Rekord.Relations) )\n    {\n      continue;\n    }\n\n    var RelationClass = Rekord.Relations[ relationType ];\n\n    if ( !(RelationClass.prototype instanceof Relation ) )\n    {\n      continue;\n    }\n\n    var relationMap = options[ relationType ];\n\n    for ( var name in relationMap )\n    {\n      var relationOptions = relationMap[ name ];\n      var relation = new RelationClass();\n\n      relation.init( this, name, relationOptions );\n\n      if ( relation.save )\n      {\n        this.saveFields.push( name );\n      }\n\n      this.relations[ name ] = relation;\n      this.relationNames.push( name );\n    }\n  }\n}\n\nfunction defaultEncode(model, data, forSaving)\n{\n  var encodings = this.encodings;\n\n  for (var prop in data)\n  {\n    if ( prop in encodings )\n    {\n      data[ prop ] = encodings[ prop ]( data[ prop ], model, prop, forSaving );\n    }\n  }\n\n  return data;\n}\n\nfunction defaultDecode(rawData)\n{\n  var decodings = this.decodings;\n\n  for (var prop in rawData)\n  {\n    if ( prop in decodings )\n    {\n      rawData[ prop ] = decodings[ prop ]( rawData[ prop ], rawData, prop );\n    }\n  }\n\n  return rawData;\n}\n\nfunction defaultSummarize(model)\n{\n  return model.$key();\n}\n\nfunction defaultCreateRest(database)\n{\n  return Rekord.rest( database );\n}\n\nfunction defaultCreateStore(database)\n{\n  return Rekord.store( database );\n}\n\nfunction defaultCreateLive( database )\n{\n  return Rekord.live( database );\n}\n\nfunction defaultResolveModel( response )\n{\n  return response;\n}\n\nfunction defaultResolveModels( response )\n{\n  return response;\n}\n\nDatabase.Events =\n{\n  NoLoad:       'no-load',\n  RemoteLoad:   'remote-load',\n  LocalLoad:    'local-load',\n  Updated:      'updated',\n  ModelAdded:   'model-added',\n  ModelUpdated: 'model-updated',\n  ModelRemoved: 'model-removed',\n  Loads:        'no-load remote-load local-load',\n  Changes:      'updated'\n};\n\nDatabase.Defaults =\n{\n  name:                 undefined,  // required\n  className:            null,       // defaults to toCamelCase( name )\n  key:                  'id',\n  keySeparator:         '/',\n  fields:               [],\n  ignoredFields:        {},\n  defaults:             {},\n  comparator:           null,\n  comparatorNullsFirst: null,\n  revision:             null,\n  loadRelations:        true,\n  loadRemote:           true,\n  autoRefresh:          true,\n  cache:                Rekord.Cache.All,\n  fullSave:             false,\n  fullPublish:          false,\n  encodings:            {},\n  decodings:            {},\n  prepare:              noop,\n  encode:               defaultEncode,\n  decode:               defaultDecode,\n  resolveModel:         defaultResolveModel,\n  resolveModels:        defaultResolveModels,\n  summarize:            defaultSummarize,\n  createRest:           defaultCreateRest,\n  createStore:          defaultCreateStore,\n  createLive:           defaultCreateLive\n};\n\naddMethods( Database.prototype,\n{\n\n  // Notifies a callback when the database has loaded (either locally or remotely).\n  ready: function(callback, context, persistent)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var invoked = false;\n\n    if ( db.initialized )\n    {\n      callback.call( callbackContext, db );\n\n      invoked = true;\n    }\n\n    if ( !db.initialized || persistent )\n    {\n      function onReady()\n      {\n        if ( !persistent )\n        {\n          off();\n        }\n        if ( !invoked || persistent )\n        {\n          if ( callback.call( callbackContext, db ) === false )\n          {\n            off();\n          }\n\n          invoked = true;\n        }\n      }\n\n      var off = db.on( Database.Events.Loads, onReady );\n    }\n\n    return invoked;\n  },\n\n  // Determines whether the given object has data to save\n  hasData: function(saving)\n  {\n    if ( !isObject( saving ) )\n    {\n      return false;\n    }\n\n    for (var prop in saving)\n    {\n      if ( !this.ignoredFields[ prop ] )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  // Grab a model with the given input and notify the callback\n  grabModel: function(input, callback, context, remoteData)\n  {\n    var db = this;\n    var callbackContext = context || db;\n    var grabbed = false;\n\n    function checkModel()\n    {\n      var result = db.parseModel( input, remoteData );\n\n      if ( result !== false && !grabbed )\n      {\n        if ( !db.loadRemote && !db.remoteLoaded && (result === null || !result.$isSaved()) )\n        {\n          if ( !result )\n          {\n            result = db.buildObjectFromKey( db.buildKeyFromInput( input ) );\n          }\n\n          result.$once( Model.Events.RemoteGets, function()\n          {\n            if ( !grabbed )\n            {\n              grabbed = true;\n\n              if ( isObject( input ) )\n              {\n                result.$set( input );\n              }\n\n              callback.call( callbackContext, result.$isSaved() ? result : null );\n            }\n          });\n\n          result.$refresh();\n        }\n        else\n        {\n          grabbed = true;\n          callback.call( callbackContext, result );\n        }\n      }\n\n      return grabbed ? false : true;\n    }\n\n    if ( checkModel() )\n    {\n      db.ready( checkModel, db, true );\n    }\n  },\n\n  // Parses the model from the given input\n  //\n  // Returns false if the input doesn't resolve to a model at the moment\n  // Returns null if the input doesn't resolve to a model and all models have been remotely loaded\n  //\n  // parseModel( Rekord )\n  // parseModel( Rekord.Model )\n  // parseModel( 'uuid' )\n  // parseModel( ['uuid'] )\n  // parseModel( modelInstance )\n  // parseModel( {name:'new model'} )\n  // parseModel( {id:4, name:'new or existing model'} )\n  //\n  parseModel: function(input, remoteData)\n  {\n    var db = this;\n    var hasRemote = db.remoteLoaded || !db.loadRemote;\n\n    if ( !isValue( input ) )\n    {\n      return hasRemote ? null : false;\n    }\n\n    if ( isRekord( input ) )\n    {\n      input = new input();\n    }\n    if ( isFunction( input ) )\n    {\n      input = input();\n    }\n\n    var key = db.buildKeyFromInput( input );\n\n    if ( input instanceof db.Model )\n    {\n      return input;\n    }\n    else if ( key in db.all )\n    {\n      var model = db.all[ key ];\n\n      if ( isObject( input ) )\n      {\n        if ( remoteData )\n        {\n          db.putRemoteData( input, key, model );\n        }\n        else\n        {\n          model.$set( input );\n        }\n      }\n\n      return model;\n    }\n    else if ( isObject( input ) )\n    {\n      if ( remoteData )\n      {\n        return db.putRemoteData( input );\n      }\n      else\n      {\n        return db.instantiate( db.decode( input ) );\n      }\n    }\n    else if ( hasRemote )\n    {\n      return null;\n    }\n\n    return false;\n  },\n\n  // Removes the key from the given model\n  removeKey: function(model)\n  {\n    var k = this.key;\n\n    if ( isArray(k) )\n    {\n      for (var i = 0; i < k.length; i++)\n      {\n        delete model[ k[i] ];\n      }\n    }\n    else\n    {\n      delete model[ k ];\n    }\n  },\n\n  // Builds a key string from the given model and array of fields\n  buildKey: function(model, fields)\n  {\n    var key = this.buildKeys( model, fields );\n\n    if ( isArray( key ) )\n    {\n      key = key.join( this.keySeparator );\n    }\n\n    return key;\n  },\n\n  // Builds a key (possibly array) from the given model and array of fields\n  buildKeys: function(model, fields)\n  {\n    var key = null;\n\n    if ( isArray( fields ) )\n    {\n      key = [];\n\n      for (var i = 0; i < fields.length; i++)\n      {\n        key.push( model[ fields[i] ] );\n      }\n    }\n    else\n    {\n      key = model[ fields ];\n\n      if (!key)\n      {\n        key = model[ fields ] = uuid();\n      }\n    }\n\n    return key;\n  },\n\n  // Builds a key from various types of input.\n  buildKeyFromInput: function(input)\n  {\n    if ( input instanceof this.Model )\n    {\n      return input.$key();\n    }\n    else if ( isArray( input ) ) // && isArray( this.key )\n    {\n      return this.buildKeyFromArray( input );\n    }\n    else if ( isObject( input ) )\n    {\n      return this.buildKey( input, this.key );\n    }\n\n    return input;\n  },\n\n  // Builds a key from an array\n  buildKeyFromArray: function(arr)\n  {\n    return arr.join( this.keySeparator );\n  },\n\n  // Gets the key from the given model\n  getKey: function(model, quietly)\n  {\n    var key = this.key;\n    var modelKey = this.buildKey( model, key );\n\n    if ( hasFields( model, key, isValue ) )\n    {\n      return modelKey;\n    }\n    else if ( !quietly )\n    {\n      throw 'Composite key not supplied.';\n    }\n\n    return false;\n  },\n\n  // Gets the key from the given model\n  getKeys: function(model)\n  {\n    return this.buildKeys( model, this.key );\n  },\n\n  buildObjectFromKey: function(key)\n  {\n    var db = this;\n\n    var props = {};\n\n    if ( isArray( db.key ) )\n    {\n      if ( isString( key ) )\n      {\n        key = key.split( db.keySeparator );\n      }\n\n      for (var i = 0; i < db.key.length; i++)\n      {\n        props[ db.key[ i ] ] = key[ i ];\n      }\n    }\n    else\n    {\n      props[ db.key ] = key;\n    }\n\n    return db.instantiate( props );\n  },\n\n  // Sorts the models & notifies listeners that the database has been updated.\n  updated: function()\n  {\n    this.sort(); // TODO remove\n    this.trigger( Database.Events.Updated );\n  },\n\n  // Sets a revision comparision function for this database. It can be a field\n  // name or a function. This is used to avoid updating model data that is older\n  // than the model's current data.\n  setRevision: function(revision)\n  {\n    if ( isFunction( revision ) )\n    {\n      this.revisionFunction = revision;\n    }\n    else if ( isString( revision ) )\n    {\n      this.revisionFunction = function(a, b)\n      {\n        var ar = isObject( a ) && revision in a ? a[ revision ] : undefined;\n        var br = isObject( b ) && revision in b ? b[ revision ] : undefined;\n\n        return ar === undefined || br === undefined ? false : compare( ar, br ) > 0;\n      };\n    }\n    else\n    {\n      this.revisionFunction = function(a, b)\n      {\n        return false;\n      };\n    }\n  },\n\n  // Sets a comparator for this database. It can be a field name, a field name\n  // with a minus in the front to sort in reverse, or a comparator function.\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.models.setComparator( comparator, nullsFirst );\n  },\n\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.models.addComparator( comparator, nullsFirst );\n  },\n\n  setSummarize: function(summarize)\n  {\n    if ( isFunction( summarize ) )\n    {\n      this.summarize = summarize;\n    }\n    else if ( isString( summarize ) )\n    {\n      if ( indexOf( this.fields, summarize ) !== false )\n      {\n        this.summarize = function(model)\n        {\n          return isValue( model ) ? model[ summarize ] : model;\n        };\n      }\n      else\n      {\n        this.summarize = createFormatter( summarize );\n      }\n    }\n    else\n    {\n      this.summarize = function(model)\n      {\n        return model.$key();\n      };\n    }\n  },\n\n  // Sorts the database if it isn't sorted.\n  sort: function()\n  {\n    this.models.sort();\n  },\n\n  // Determines whether this database is sorted.\n  isSorted: function()\n  {\n    return this.models.isSorted();\n  },\n\n  clean: function()\n  {\n    var db = this;\n    var keys = db.models.keys;\n    var models = db.models;\n\n    db.all = {};\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      db.all[ keys[ i ] ] = models[ i ];\n    }\n  },\n\n  // Handles when we receive data from the server - either from\n  // a publish, refresh, or values being returned on a save.\n  putRemoteData: function(encoded, key, model, overwrite)\n  {\n    if ( !isObject( encoded ) )\n    {\n      return model;\n    }\n\n    var db = this;\n    var key = key || db.getKey( encoded );\n    var model = model || db.all[ key ];\n    var decoded = db.decode( copy( encoded ) );\n\n    // Reject the data if it's a lower revision\n    if ( model )\n    {\n      var revisionRejected = this.revisionFunction( model, encoded );\n\n      if ( revisionRejected )\n      {\n        Rekord.debug( Rekord.Debugs.SAVE_OLD_REVISION, db, model, encoded );\n\n        return model;\n      }\n    }\n\n    // If the model already exists, update it.\n    if ( model )\n    {\n      var keyFields = db.keys;\n\n      for (var i = 0; i < keyFields.length; i++)\n      {\n        var k = keyFields[ i ];\n        var mk = model[ k ];\n        var dk = decoded[ k ];\n\n        if ( isValue( mk ) && isValue( dk ) && mk !== dk )\n        {\n          throw new Error('Model keys cannot be changed');\n        }\n      }\n\n      db.all[ key ] = model;\n\n      if ( !model.$saved )\n      {\n        model.$saved = {};\n      }\n\n      var current = model.$toJSON( true );\n      var conflicts = {};\n      var conflicted = false;\n      var updated = {};\n      var notReallySaved = isEmpty( model.$saved );\n      var relations = db.relations;\n\n      for (var prop in encoded)\n      {\n        if ( prop.charAt(0) === '$' )\n        {\n          continue;\n        }\n\n        if ( prop in relations )\n        {\n          model.$set( prop, encoded[ prop ], true );\n\n          continue;\n        }\n\n        var currentValue = current[ prop ];\n        var savedValue = model.$saved[ prop ];\n\n        if ( notReallySaved || overwrite || equals( currentValue, savedValue ) )\n        {\n          model[ prop ] = decoded[ prop ];\n          updated[ prop ] = encoded[ prop ];\n\n          if ( model.$local )\n          {\n            model.$local[ prop ] = encoded[ prop ];\n          }\n        }\n        else\n        {\n          conflicts[ prop ] = encoded[ prop ];\n          conflicted = true;\n        }\n\n        model.$saved[ prop ] = copy( encoded[ prop ] );\n      }\n\n      if ( conflicted )\n      {\n        model.$trigger( Model.Events.PartialUpdate, [encoded, conflicts] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.FullUpdate, [encoded, updated] );\n      }\n\n      model.$trigger( Model.Events.RemoteUpdate, [encoded] );\n\n      model.$addOperation( SaveNow );\n\n      if ( !db.models.has( key ) )\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model, true] );\n      }\n    }\n    // The model doesn't exist, create it.\n    else\n    {\n      model = db.createModel( decoded, true );\n\n      if ( db.cache === Rekord.Cache.All )\n      {\n        model.$local = model.$toJSON( false );\n        model.$local.$status = model.$status;\n        model.$saved = model.$local.$saved = model.$toJSON( true );\n\n        model.$addOperation( SaveNow );\n      }\n      else\n      {\n        model.$saved = model.$toJSON( true );\n      }\n    }\n\n    return model;\n  },\n\n  createModel: function(decoded, remoteData)\n  {\n    var db = this;\n    var model = db.instantiate( decoded, remoteData );\n    var key = model.$key();\n\n    if ( !db.models.has( key ) )\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model, remoteData] );\n    }\n\n    return model;\n  },\n\n  destroyLocalUncachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      if ( model.$hasChanges() )\n      {\n        delete model.$saved;\n\n        db.removeKey( model );\n\n        model.$trigger( Model.Events.Detach );\n\n        return false;\n      }\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n\n      return true;\n    }\n\n    return false;\n  },\n\n  destroyLocalCachedModel: function(model, key)\n  {\n    var db = this;\n\n    if ( model )\n    {\n      // If a model was removed remotely but the model has changes - don't remove it.\n      if ( model.$hasChanges() )\n      {\n        // Removed saved history and the current ID\n        delete model.$saved;\n        delete model.$local.$saved;\n\n        db.removeKey( model );\n        db.removeKey( model.$local );\n\n        model.$trigger( Model.Events.Detach );\n\n        model.$addOperation( SaveNow );\n\n        return false;\n      }\n\n      model.$addOperation( RemoveNow );\n\n      delete db.all[ key ];\n\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n\n      model.$trigger( Model.Events.RemoteAndRemove );\n\n      Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, model );\n    }\n    else\n    {\n      db.store.remove( key, function(removedValue)\n      {\n        if (removedValue)\n        {\n          Rekord.debug( Rekord.Debugs.REMOTE_REMOVE, db, removedValue );\n        }\n      });\n\n      // The model didn't exist\n      return false;\n    }\n\n    return true;\n  },\n\n  // Destroys a model locally because it doesn't exist remotely\n  destroyLocalModel: function(key)\n  {\n    var db = this;\n    var model = db.all[ key ];\n\n    if ( db.cache === Rekord.Cache.All )\n    {\n      return db.destroyLocalCachedModel( model, key );\n    }\n    else\n    {\n      return db.destroyLocalUncachedModel( model, key );\n    }\n  },\n\n  loadFinish: function()\n  {\n    var db = this;\n\n    for (var key in db.loaded)\n    {\n      var model = db.loaded[ key ];\n\n      if ( model.$status === Model.Status.RemovePending )\n      {\n        Rekord.debug( Rekord.Debugs.LOCAL_RESUME_DELETE, db, model );\n\n        model.$addOperation( RemoveRemote );\n      }\n      else\n      {\n        if ( model.$status === Model.Status.SavePending )\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_RESUME_SAVE, db, model );\n\n          model.$addOperation( SaveRemote );\n        }\n        else\n        {\n          Rekord.debug( Rekord.Debugs.LOCAL_LOAD_SAVED, db, model );\n        }\n\n        db.models.put( key, model, true );\n      }\n    }\n\n    db.loaded = {};\n    db.updated();\n\n    if ( db.loadRemote )\n    {\n      if ( db.pendingOperations === 0 )\n      {\n        db.refresh();\n      }\n      else\n      {\n        db.firstRefresh = true;\n      }\n    }\n  },\n\n  loadBegin: function(onLoaded)\n  {\n    var db = this;\n\n    function onLocalLoad(records, keys)\n    {\n      Rekord.debug( Rekord.Debugs.LOCAL_LOAD, db, records );\n\n      for (var i = 0; i < records.length; i++)\n      {\n        var encoded = records[ i ];\n        var key = keys[ i ];\n        var decoded = db.decode( copy( encoded, true ) );\n        var model = db.instantiate( decoded, true );\n\n        model.$local = encoded;\n        model.$saved = encoded.$saved;\n\n        if ( model.$status !== Model.Status.Removed )\n        {\n          db.loaded[ key ] = model;\n          db.all[ key ] = model;\n        }\n      }\n\n      db.initialized = true;\n      db.localLoaded = true;\n\n      db.trigger( Database.Events.LocalLoad, [db] );\n\n      onLoaded( true, db );\n    }\n\n    function onLocalError()\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n\n    if ( db.loadRemote && db.autoRefresh )\n    {\n      Rekord.after( Rekord.Events.Online, db.onOnline, db );\n    }\n\n    if ( db.cache === Rekord.Cache.None )\n    {\n      db.loadNone();\n\n      onLoaded( false, db );\n    }\n    else\n    {\n      db.store.all( onLocalLoad, onLocalError );\n    }\n  },\n\n  loadNone: function()\n  {\n    var db = this;\n\n    if ( db.loadRemote )\n    {\n      db.refresh();\n    }\n    else\n    {\n      db.initialized = true;\n      db.trigger( Database.Events.NoLoad, [db] );\n    }\n  },\n\n  onOnline: function()\n  {\n    this.afterOnline = true;\n\n    if ( this.pendingOperations === 0 )\n    {\n      this.onOperationRest();\n    }\n  },\n\n  onOperationRest: function()\n  {\n    var db = this;\n\n    if ( ( db.autoRefresh && db.remoteLoaded && db.afterOnline ) || db.firstRefresh )\n    {\n      db.afterOnline = false;\n      db.firstRefresh = false;\n\n      Rekord.debug( Rekord.Debugs.AUTO_REFRESH, db );\n\n      db.refresh();\n    }\n  },\n\n  // Loads all data remotely\n  refresh: function(callback, context)\n  {\n    var db = this;\n    var callbackContext = context || db;\n\n    function onModels(response)\n    {\n      var models = db.resolveModels( response );\n      var mapped = {};\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = db.putRemoteData( models[ i ] );\n\n        if ( model )\n        {\n          var key = model.$key();\n\n          mapped[ key ] = model;\n        }\n      }\n\n      var keys = db.models.keys();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        var k = keys[ i ];\n\n        if ( !(k in mapped) )\n        {\n          var old = db.models.get( k );\n\n          if ( old.$saved )\n          {\n            Rekord.debug( Rekord.Debugs.REMOTE_LOAD_REMOVE, db, k );\n\n            db.destroyLocalModel( k );\n          }\n        }\n      }\n\n      db.initialized = true;\n      db.remoteLoaded = true;\n\n      db.trigger( Database.Events.RemoteLoad, [db] );\n\n      db.updated();\n\n      Rekord.debug( Rekord.Debugs.REMOTE_LOAD, db, models );\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    function onLoadError(response, status)\n    {\n      if ( status === 0 )\n      {\n        Rekord.checkNetworkStatus();\n\n        if ( !Rekord.online )\n        {\n          db.pendingRefresh = true;\n\n          Rekord.once( Rekord.Events.Online, db.onRefreshOnline, db );\n        }\n\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_OFFLINE, db );\n      }\n      else\n      {\n        Rekord.debug( Rekord.Debugs.REMOTE_LOAD_ERROR, db, status );\n\n        db.initialized = true;\n        db.trigger( Database.Events.NoLoad, [db, response] );\n      }\n\n      if ( callback )\n      {\n        callback.call( callbackContext, db.models );\n      }\n    }\n\n    db.rest.all( onModels, onLoadError );\n  },\n\n  onRefreshOnline: function()\n  {\n    var db = this;\n\n    Rekord.debug( Rekord.Debugs.REMOTE_LOAD_RESUME, db );\n\n    if ( db.pendingRefresh )\n    {\n      db.pendingRefresh = false;\n\n      db.refresh();\n    }\n  },\n\n  // Returns a model\n  get: function(key)\n  {\n    return this.all[ this.buildKeyFromInput( key ) ];\n  },\n\n  filter: function(isValid)\n  {\n    var all = this.all;\n    var filtered = [];\n\n    for (var key in all)\n    {\n      var model = all[ key ];\n\n      if ( isValid( model ) )\n      {\n        filtered.push( model );\n      }\n    }\n\n    return filtered;\n  },\n\n  liveSave: function(key, encoded)\n  {\n    this.putRemoteData( encoded, key );\n    this.updated();\n\n    Rekord.debug( Rekord.Debugs.REALTIME_SAVE, this, encoded, key );\n  },\n\n  liveRemove: function(key)\n  {\n    if ( this.destroyLocalModel( key ) )\n    {\n      this.updated();\n    }\n\n    Rekord.debug( Rekord.Debugs.REALTIME_REMOVE, this, key );\n  },\n\n  // Return an instance of the model with the data as initial values\n  instantiate: function(data, remoteData)\n  {\n    return new this.Model( data, remoteData );\n  },\n\n  addReference: function(model)\n  {\n    this.all[ model.$key() ] = model;\n  },\n\n  // Save the model\n  save: function(model, cascade)\n  {\n    var db = this;\n\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, db, model );\n\n      return;\n    }\n\n    var key = model.$key();\n    var existing = db.models.has( key );\n\n    if ( existing )\n    {\n      db.trigger( Database.Events.ModelUpdated, [model] );\n\n      model.$trigger( Model.Events.UpdateAndSave );\n    }\n    else\n    {\n      db.models.put( key, model );\n      db.trigger( Database.Events.ModelAdded, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.CreateAndSave );\n    }\n\n    model.$addOperation( SaveLocal, cascade );\n  },\n\n  // Remove the model\n  remove: function(model, cascade)\n  {\n    var db = this;\n\n    // If we have it in the models, remove it!\n    this.removeFromModels( model );\n\n    // If we're offline and we have a pending save - cancel the pending save.\n    if ( model.$status === Model.Status.SavePending )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_CANCEL_SAVE, db, model );\n    }\n\n    model.$status = Model.Status.RemovePending;\n\n    model.$addOperation( RemoveLocal, cascade );\n  },\n\n  removeFromModels: function(model)\n  {\n    var db = this;\n    var key = model.$key();\n\n    if ( db.models.has( key ) )\n    {\n      db.models.remove( key );\n      db.trigger( Database.Events.ModelRemoved, [model] );\n      db.updated();\n\n      model.$trigger( Model.Events.Removed );\n    }\n  },\n\n  refreshModel: function(model, cascade)\n  {\n    model.$addOperation( GetRemote, cascade );\n  }\n\n});\n\neventize( Database.prototype );\naddEventFunction( Database.prototype, 'change', Database.Events.Changes );\n","\n/**\n * An instance\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n * @param {Rekord.Database} db\n *        The database instance used in model instances.\n */\nfunction Model(db)\n{\n  this.$db = db;\n\n  /**\n   * @property {Database} $db\n   *           The reference to the database this model is stored in.\n   */\n\n  /**\n   * @property {Object} [$saved]\n   *           An object of encoded data representing the values saved remotely.\n   *           If this object does not exist - the model hasn't been created\n   *           yet.\n   */\n\n  /**\n   * @property {Object} [$local]\n   *           The object of encoded data that is stored locally. It's $saved\n   *           property is the same object as this $saved property.\n   */\n\n  /**\n   * @property {Boolean} $status\n   *           Whether there is a pending save for this model.\n   */\n}\n\nModel.Events =\n{\n  Created:              'created',\n  Saved:                'saved',\n  PreSave:              'pre-save',\n  PostSave:             'post-save',\n  PreRemove:            'pre-remove',\n  PostRemove:           'post-remove',\n  PartialUpdate:        'partial-update',\n  FullUpdate:           'full-update',\n  Updated:              'updated',\n  Detach:               'detach',\n  Change:               'change',\n  CreateAndSave:        'created saved',\n  UpdateAndSave:        'updated saved',\n  KeyUpdate:            'key-update',\n  RelationUpdate:       'relation-update',\n  Removed:              'removed',\n  RemoteUpdate:         'remote-update',\n  LocalSave:            'local-save',\n  LocalSaveFailure:     'local-save-failure',\n  LocalSaves:           'local-save local-save-failure',\n  RemoteSave:           'remote-save',\n  RemoteSaveFailure:    'remote-save-failure',\n  RemoteSaveOffline:    'remote-save-offline',\n  RemoteSaves:          'remote-save remote-save-failure remote-save-offline',\n  LocalRemove:          'local-remove',\n  LocalRemoveFailure:   'local-remove-failure',\n  LocalRemoves:         'local-remove local-remove-failure',\n  RemoteRemove:         'remote-remove',\n  RemoteRemoveFailure:  'remote-remove-failure',\n  RemoteRemoveOffline:  'remote-remove-offline',\n  RemoteRemoves:        'remote-remove remote-remove-failure remote-remove-offline',\n  LocalGet:             'local-get',\n  LocalGetFailure:      'local-get-failure',\n  LocalGets:            'local-get local-get-failure',\n  RemoteGet:            'remote-get',\n  RemoteGetFailure:     'remote-get-failure',\n  RemoteGetOffline:     'remote-get-offline',\n  RemoteGets:           'remote-get remote-get-failure remote-get-offline',\n  RemoteAndRemove:      'remote-remove removed',\n  SavedRemoteUpdate:    'saved remote-update',\n  Changes:              'saved remote-update key-update relation-update removed change'\n};\n\nModel.Status =\n{\n  Synced:         0,\n  SavePending:    1,\n  RemovePending:  2,\n  Removed:        3\n};\n\nModel.Blocked =\n{\n  toString: true,\n  valueOf: true\n};\n\naddMethods( Model.prototype,\n{\n\n  $init: function(props, remoteData)\n  {\n    this.$status = Model.Status.Synced;\n    this.$operation = null;\n    this.$relations = {};\n    this.$dependents = {};\n\n    if ( remoteData )\n    {\n      var key = this.$db.getKey( props );\n\n      this.$db.all[ key ] = this;\n      this.$set( props, void 0, remoteData );\n    }\n    else\n    {\n      this.$reset( props );\n    }\n\n    if ( this.$db.loadRelations )\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        var relation = databaseRelations[ name ];\n\n        if ( !relation.lazy )\n        {\n          this.$getRelation( name, void 0, remoteData );\n        }\n      }\n    }\n  },\n\n  $load: function(relations)\n  {\n    if ( isArray( relations ) )\n    {\n      for (var i = 0; i < relations.length; i++)\n      {\n        this.$getRelation( relations[ i ] );\n      }\n    }\n    else if ( isString( relations ) )\n    {\n      this.$getRelation( relations );\n    }\n    else\n    {\n      var databaseRelations = this.$db.relations;\n\n      for (var name in databaseRelations)\n      {\n        this.$getRelation( name );\n      }\n    }\n  },\n\n  $reset: function(props)\n  {\n    var def = this.$db.defaults;\n    var fields = this.$db.fields;\n    var relations = this.$db.relations;\n    var keyFields = this.$db.key;\n\n    if ( isObject( def ) )\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n        var defaultValue = def[ prop ];\n        var evaluatedValue = evaluate( defaultValue );\n\n        this[ prop ] = evaluatedValue;\n      }\n\n      for (var prop in relations)\n      {\n        if ( prop in def )\n        {\n          var defaultValue = def[ prop ];\n          var evaluatedValue = evaluate( defaultValue );\n          var relation = this.$getRelation( prop );\n\n          relation.set( this, evaluatedValue );\n        }\n      }\n    }\n    else\n    {\n      for (var i = 0; i < fields.length; i++)\n      {\n        var prop = fields[ i ];\n\n        this[ prop ] = undefined;\n      }\n    }\n\n    var key = false;\n\n    // First try pulling key from properties\n    if ( props )\n    {\n      key = this.$db.getKey( props, true );\n    }\n\n    // If the key wasn't specified, try generating it on this model\n    if ( key === false )\n    {\n      key = this.$db.getKey( this, true );\n    }\n    // The key was specified in the properties, apply it to this model\n    else\n    {\n      if ( isString( keyFields ) )\n      {\n        this[ keyFields ] = key;\n      }\n      else // if ( isArray( keyFields ) )\n      {\n        for (var i = 0; i < keyFields.length; i++)\n        {\n          var k = keyFields[ i ];\n\n          this[ k ] = props[ k ];\n        }\n      }\n    }\n\n    // The key exists on this model - place the reference of this model\n    // in the all map and set the cached key.\n    if ( key !== false )\n    {\n      this.$db.all[ key ] = this;\n      this.$$key = key;\n    }\n\n    // Set the remaing properties\n    this.$set( props );\n  },\n\n  $set: function(props, value, remoteData)\n  {\n    if ( isObject( props ) )\n    {\n      for (var prop in props)\n      {\n        this.$set( prop, props[ prop ], remoteData );\n      }\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props, value, remoteData );\n\n      if ( relation )\n      {\n        relation.set( this, value, remoteData );\n      }\n      else\n      {\n        this[ props ] = value;\n      }\n    }\n\n    if ( isValue( props ) )\n    {\n      this.$trigger( Model.Events.Change, [props, value] );\n    }\n  },\n\n  $get: function(props, copyValues)\n  {\n    if ( isArray( props ) )\n    {\n      return grab( this, props, copyValues );\n    }\n    else if ( isObject( props ) )\n    {\n      for (var p in props)\n      {\n        props[ p ] = copyValues ? copy( this[ p ] ) : this[ p ];\n      }\n\n      return props;\n    }\n    else if ( isString( props ) )\n    {\n      if ( Model.Blocked[ props ] )\n      {\n        return;\n      }\n\n      var relation = this.$getRelation( props );\n\n      if ( relation )\n      {\n        var values = relation.get( this );\n\n        return copyValues ? copy( values ) : values;\n      }\n      else\n      {\n        return copyValues ? copy( this[ props ] ) : this[ props ];\n      }\n    }\n  },\n\n  $decode: function()\n  {\n    this.$db.decode( this );\n  },\n\n  $isDependentsSaved: function(callbackOnSaved, contextOnSaved)\n  {\n    var dependents = this.$dependents;\n\n    for (var uid in dependents)\n    {\n      var dependent = dependents[ uid ];\n\n      if ( !dependent.$isSaved() )\n      {\n        function onDependentSave()\n        {\n          callbackOnSaved.apply( contextOnSaved || this, arguments );\n          off();\n        }\n\n        var off = dependent.$once( Model.Events.RemoteSaves, onDependentSave );\n\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  $relate: function(prop, relate)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.relate( this, relate );\n    }\n  },\n\n  $unrelate: function(prop, unrelated)\n  {\n    var relation = this.$getRelation( prop );\n\n    if ( relation )\n    {\n      relation.unrelate( this, unrelated );\n    }\n  },\n\n  $isRelated: function(prop, related)\n  {\n    var relation = this.$getRelation( prop );\n\n    return relation && relation.isRelated( this, related );\n  },\n\n  $getRelation: function(prop, initialValue, remoteData)\n  {\n    var databaseRelations = this.$db.relations;\n    var relation = databaseRelations[ prop ];\n\n    if ( relation )\n    {\n      if ( !(prop in this.$relations) )\n      {\n        relation.load( this, initialValue, remoteData );\n      }\n\n      return relation;\n    }\n\n    return false;\n  },\n\n  $save: function(setProperties, setValue, cascade)\n  {\n    var cascade =\n      (arguments.length === 3 ? cascade :\n        (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n          (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : Rekord.Cascade.All ) ) );\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Rekord.transactNone( cascade, this, 'save' );\n    }\n\n    return Rekord.transact( cascade, this, 'save', function(txn)\n    {\n      this.$db.addReference( this );\n\n      this.$set( setProperties, setValue );\n\n      this.$trigger( Model.Events.PreSave, [this] );\n\n      this.$db.save( this, cascade );\n\n      this.$trigger( Model.Events.PostSave, [this] );\n    });\n  },\n\n  $remove: function(cascade)\n  {\n    var cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n\n    if ( !this.$exists() )\n    {\n      return Rekord.transactNone( cascade, this, 'remove' );\n    }\n\n    return Rekord.transact( cascade, this, 'remove', function(txn)\n    {\n      this.$trigger( Model.Events.PreRemove, [this] );\n\n      this.$db.remove( this, cascade );\n\n      this.$trigger( Model.Events.PostRemove, [this] );\n    });\n  },\n\n  $refresh: function(cascade)\n  {\n    this.$db.refreshModel( this, cascade );\n\n    return this;\n  },\n\n  $autoRefresh: function()\n  {\n    Rekord.on( Rekord.Events.Online, this.$refresh, this );\n\n    return this;\n  },\n\n  $cancel: function(reset)\n  {\n    if ( this.$saved )\n    {\n      this.$save( this.$saved );\n    }\n    else if ( reset )\n    {\n      this.$reset();\n    }\n  },\n\n  $clone: function(properties)\n  {\n    // If field is given, evaluate the value and use it instead of value on this object\n    // If relation is given, call clone on relation\n\n    var db = this.$db;\n    var key = db.key;\n    var fields = db.fields;\n    var relations = db.relations;\n    var values = {};\n\n    for (var i = 0; i < fields.length; i++)\n    {\n      var f = fields[ i ];\n\n      if ( properties && f in properties )\n      {\n        values[ f ] = evaluate( properties[ f ] );\n      }\n      else if ( f in this )\n      {\n        values[ f ] = copy( this[ f ] );\n      }\n    }\n\n    if ( isString( key ) )\n    {\n      delete values[ key ];\n    }\n\n    var cloneKey = db.getKey( values );\n    var modelKey = this.$key();\n\n    if ( cloneKey === modelKey )\n    {\n      throw 'A clone cannot have the same key as the original model.';\n    }\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].preClone( this, values, properties[ relationName ] );\n      }\n    }\n\n    var clone = db.instantiate( values );\n    var relationValues = {};\n\n    for (var relationName in relations)\n    {\n      if ( properties && relationName in properties )\n      {\n        relations[ relationName ].postClone( this, relationValues, properties[ relationName ] );\n      }\n    }\n\n    clone.$set( relationValues );\n\n    return clone;\n  },\n\n  $push: function(fields)\n  {\n    this.$savedState = this.$db.encode( this, grab( this, fields || this.$db.fields, true ), false );\n  },\n\n  $pop: function(dontDiscard)\n  {\n    if ( isObject( this.$savedState ) )\n    {\n      this.$set( this.$savedState );\n\n      if ( !dontDiscard )\n      {\n        this.$discard();\n      }\n    }\n  },\n\n  $discard: function()\n  {\n    delete this.$savedState;\n  },\n\n  $exists: function()\n  {\n    return !this.$isDeleted() && this.$db.models.has( this.$key() );\n  },\n\n  $addOperation: function(OperationType, cascade)\n  {\n    var operation = new OperationType( this, cascade );\n\n    if ( !this.$operation )\n    {\n      this.$operation = operation;\n      this.$operation.execute();\n    }\n    else\n    {\n      this.$operation.queue( operation );\n    }\n  },\n\n  $toJSON: function( forSaving )\n  {\n    var encoded = this.$db.encode( this, grab( this, this.$db.fields, true ), forSaving );\n\n    var databaseRelations = this.$db.relations;\n    var relations = this.$relations;\n\n    for (var name in relations)\n    {\n      databaseRelations[ name ].encode( this, encoded, forSaving );\n    }\n\n    return encoded;\n  },\n\n  $changed: function()\n  {\n    this.$trigger( Model.Events.Change );\n  },\n\n  $key: function(quietly)\n  {\n    if ( !this.$$key )\n    {\n      this.$$key = this.$db.getKey( this, quietly );\n    }\n\n    return this.$$key;\n  },\n\n  $keys: function()\n  {\n    return this.$db.getKeys( this );\n  },\n\n  $uid: function()\n  {\n    return this.$db.name + '$' + this.$key();\n  },\n\n  $hasKey: function()\n  {\n    return hasFields( this, this.$db.key, isValue );\n  },\n\n  $isSynced: function()\n  {\n    return this.$status === Model.Status.Synced;\n  },\n\n  $isPending: function()\n  {\n    return this.$status === Model.Status.SavePending;\n  },\n\n  $isDeleted: function()\n  {\n    return this.$status >= Model.Status.RemovePending;\n  },\n\n  $isSaved: function()\n  {\n    return !!this.$saved;\n  },\n\n  $isSavedLocally: function()\n  {\n    return !!this.$local;\n  },\n\n  $isNew: function()\n  {\n    return !(this.$saved || this.$local);\n  },\n\n  $getChanges: function(alreadyEncoded)\n  {\n    var saved = this.$saved;\n    var encoded = alreadyEncoded || this.$toJSON( true );\n    var fields = this.$db.saveFields;\n\n    return saved ? diff( encoded, saved, fields, equals ) : encoded;\n  },\n\n  $hasChanges: function()\n  {\n    if (!this.$saved)\n    {\n      return true;\n    }\n\n    var ignore = this.$db.ignoredFields;\n    var encoded = this.$toJSON( true );\n    var saved = this.$saved;\n\n    for (var prop in encoded)\n    {\n      var currentValue = encoded[ prop ];\n      var savedValue = saved[ prop ];\n\n      if ( ignore[ prop ] )\n      {\n        continue;\n      }\n\n      if ( !equals( currentValue, savedValue ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  toString: function()\n  {\n    return this.$db.className + ' ' + JSON.stringify( this.$toJSON() );\n  }\n\n});\n\neventize( Model.prototype, true );\n\naddEventFunction( Model.prototype, '$change', Model.Events.Changes, true );\n","\n/**\n * A Map has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of\n * the structure need to be iterated and order doesn't matter (since removal\n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberof Rekord\n */\nfunction Map()\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n}\n\naddMethods( Map.prototype,\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  put: function(key, value)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      AP.push.call( this.values, value );\n      AP.push.call( this.keys, key );\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = AP.pop.apply( this.values );\n    var lastKey = AP.pop.apply( this.keys );\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  subtract: function(map, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( !map.has( k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Passes all values & keys in this map to a callback and if it returns a\n   * truthy value then the key and value are placed in the destination map.\n   *\n   * @param  {Function} callback [description]\n   * @param  {Rekord.Map} [dest]     [description]\n   * @return {Rekord.Map}            [description]\n   */\n  filter: function(callback, dest)\n  {\n    var out = dest || new Map();\n    var n = this.size();\n    var values = this.values;\n    var keys = this.keys;\n\n    for (var i = 0; i < n; i++)\n    {\n      var v = values[ i ];\n      var k = keys[ i ];\n\n      if ( callback( v, k ) )\n      {\n        out.put( k, v );\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   *\n   * @return {Rekord.Map} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   *\n   * @param  {function}  comparator [description]\n   * @return {Boolean}            [description]\n   */\n  isSorted: function(comparator)\n  {\n    return isSorted( comparator, this.values );\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   *\n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Map} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j)\n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1)\n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right)\n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   *\n   * @return {Rekord.Map} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n});\n","\nfunction Request(context, success, failure)\n{\n  this.context = context;\n  this.success = success;\n  this.failure = failure;\n  this.call = 0;\n  this.callCanceled = 0;\n}\n\naddMethods( Request.prototype,\n{\n\n  onSuccess: function()\n  {\n    return this.handleCall( this, ++this.call, this.success );\n  },\n\n  onFailure: function()\n  {\n    return this.handleCall( this, this.call, this.failure );\n  },\n\n  handleCall: function(request, currentCall, callback)\n  {\n    return function onHandleCall()\n    {\n      if ( request.call === currentCall &&\n           currentCall > request.callCanceled &&\n           isFunction( callback ) )\n      {\n        callback.apply( request.context, arguments );\n      }\n    };\n  },\n\n  cancel: function()\n  {\n    this.callCanceled = this.call;\n  }\n\n});\n","\n/**\n * An extension of the Array class adding many useful functions and events. This\n * is the base collection class in Rekord.\n *\n * A collection of any type can be created via {@link Rekord.collect}.\n *\n * ```\n * var nc = new Rekord.Collection([1, 2, 3, 4]);\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n * @extends Array\n * @param {Array} [values] 0\n *    The initial set of values in this collection.\n * @see Rekord.collect\n */\nfunction Collection(values)\n{\n  this.addAll( values );\n}\n\n/**\n* A comparator to keep the collection sorted with.\n*\n* @memberof Rekord.Collection#\n* @member {comparisonCallback} [comparator]\n*/\n\n/**\n * The events a collection can emit.\n *\n * {@link Rekord.Collection#event:add Add}\n * {@link Rekord.Collection#event:adds Adds}\n * {@link Rekord.Collection#event:sort Sort}\n * {@link Rekord.Collection#event:remove Remove}\n * {@link Rekord.Collection#event:removes Removes}\n * {@link Rekord.Collection#event:updates Updates}\n * {@link Rekord.Collection#event:reset Reset}\n * {@link Rekord.Collection#event:cleared Cleared}\n * {@link Rekord.Collection#event:changes Changes}\n *\n * @static\n */\nCollection.Events =\n{\n  /**\n   * An event triggered when a single value is added to a collection.\n   *\n   * @event Rekord.Collection#add\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T} value -\n   *    The value added.\n   * @see Rekord.Collection#add\n   * @see Rekord.Collection#insertAt\n   * @see Rekord.ModelCollection#add\n   * @see Rekord.ModelCollection#push\n   */\n  Add:            'add',\n\n  /**\n   * An event triggered when multiple values are added to a collection.\n   *\n   * @event Rekord.Collection#adds\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {T[]} value -\n   *    The values added.\n   * @see Rekord.Collection#addAll\n   * @see Rekord.ModelCollection#addAll\n   */\n  Adds:           'adds',\n\n  /**\n   * An event triggered when a collection is sorted. This may automatically\n   * be triggered by any method that modifies the collection.\n   *\n   * @event Rekord.Collection#sort\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#sort\n   * @see Rekord.ModelCollection#sort\n   */\n  Sort:           'sort',\n\n  /**\n   * An event triggered when a collection has an element removed at a given index.\n   *\n   * @event Rekord.Collection#remove\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any} removing -\n   *    The element that was removed.\n   * @argument {Number} index -\n   *    The index where the element was removed at.\n   * @see Rekord.Collection#remove\n   * @see Rekord.Collection#removeAt\n   * @see Rekord.ModelCollection#remove\n   */\n  Remove:         'remove',\n\n  /**\n   * An event triggered when a collection has multiple elements removed.\n   *\n   * @event Rekord.Collection#removes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Any[]} removed -\n   *    The array of elements removed from the collection.\n   * @see Rekord.Collection#removeAll\n   * @see Rekord.Collection#removeWhere\n   */\n  Removes:        'removes',\n\n  /**\n   * An event triggered when a collection has elements modified.\n   *\n   * @event Rekord.Collection#updates\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.ModelCollection#update\n   * @see Rekord.ModelCollection#updateWhere\n   */\n  Updates:        'updates',\n\n  /**\n   * An event triggered when a collection's elements are entirely replaced by\n   * a new set of elements.\n   *\n   * @event Rekord.Collection#reset\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @argument {Array} updated -\n   *    The array of elements modified.\n   * @see Rekord.FilteredCollection#sync\n   * @see Rekord.ModelCollection#reset\n   */\n  Reset:          'reset',\n\n  /**\n   * An event triggered when a collection is cleared of all elements.\n   *\n   * @event Rekord.Collection#cleared\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   * @see Rekord.Collection#clear\n   */\n  Cleared:        'cleared',\n\n  /**\n   * All events triggered by a collection when the contents of the collection changes.\n   *\n   * @event Rekord.Collection#changes\n   * @argument {Rekord.Collection} collection -\n   *    The collection that triggered the event.\n   */\n  Changes:        'add adds sort remove removes updates reset cleared'\n\n};\n\nextendArray( Array, Collection,\n{\n\n  /**\n   * Sets the comparator for this collection and performs a sort.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  setComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = createComparator( comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Adds a comparator to the existing comparator. This added comparator is ran\n   * after the current comparator when it finds two elements equal. If no\n   * comparator exists on this collection then it's set to the given comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} comparator -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   * @return {Rekord.Collection}\n   */\n  addComparator: function(comparator, nullsFirst)\n  {\n    this.comparator = addComparator( this.comparator, comparator, nullsFirst );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Determines if the collection is currently sorted based on the current\n   * comparator of the collection unless a comparator is given\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @see Rekord.createComparator\n   * @return {Boolean}\n   */\n  isSorted: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    return isSorted( cmp, this );\n  },\n\n  /**\n   * Sorts the elements in this collection based on the current comparator\n   * unless a comparator is given. If a comparator is given it will not override\n   * the current comparator, subsequent operations to the collection may trigger\n   * a sort if the collection has a comparator.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {ComparatorInput} [comparator] -\n   *    The comparator input to convert to a comparison function.\n   * @param {Boolean} [nullsFirst=false] -\n   *    When a comparison is done involving a null/undefined value this can\n   *    determine which is ordered before the other.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createComparator\n   */\n  sort: function(comparator, nullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, nullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      AP.sort.call( this, cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Resets the values in this collection with a new collection of values.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} [values] -\n   *    The new array of values in this collection.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  reset: function(values)\n  {\n    this.length = 0;\n\n    if ( isArray( values ) )\n    {\n      AP.push.apply( this, values );\n    }\n    else if ( isObject( models ) )\n    {\n      AP.push.call( this, values );\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Creates a limited view of this collection known as a page. The resulting\n   * page object changes when this collection changes. At the very least the\n   * page size is required, and a starting page index can be specified.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} pageSize -\n   *    The maximum number of elements allowed in the page at once.\n   * @param {Number} [pageIndex=0]\n   *    The starting page offset. This isn't an element offset, but the element\n   *    offset can be calculated by multiplying the page index by the page size.\n   * @return {Rekord.Page} -\n   *    The newly created Page.\n   */\n  page: function(pageSize, pageIndex)\n  {\n    return new Page( this, pageSize, pageIndex );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredCollection( this, filter );\n  },\n\n  /**\n   * Creates a copy of this collection with elements that match the supplied\n   * parameters. The parameters are passed to the {@link Rekord.createWhere}\n   * to generate a function which tests each element of this collection for\n   * inclusion in the newly created collection.\n   *\n   * ```javascript\n   * var isEven = function() { return x % 2 == 0; };\n   * var c = Rekord.collect(1, 2, 3, 4, 5);\n   * var w = c.where(isEven); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @return {Rekord.Collection} -\n   *    The copy of this collection ran through a filtering function.\n   * @see Rekord.createWhere\n   */\n  where: function(whereProperties, whereValue, whereEquals, out)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n\n      if ( where( a ) )\n      {\n        target.add( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection with elements that exist in this collection but does\n   * not exist in the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.subtract( b ); // [2, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that shouldn't exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in this collection but not in\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in this collection and not the\n   *    given collection.\n   */\n  subtract: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var exists = false;\n\n      for (var j = 0; j < collection.length && !exists; j++)\n      {\n        exists = equality( a, collection[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that are shared between this collection\n   * and the given collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.intersect( b ); // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The collection of elements to intersect with this collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in both this collection and\n   *    the given collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in both collections.\n   */\n  intersect: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Returns a collection of elements that exist in the given collection but\n   * not in this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * var b = Rekord.collect(1, 3, 5);\n   * var c = a.complement( b ); // [5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Array} collection -\n   *    The array of elements that could exist in the resulting collection.\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that exist in given collection but not\n   *    in this collection. If this is not given - a collection of this type\n   *    will be created.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to an element that exists in the given\n   *    collection.\n   * @return {Array} -\n   *    The collection of elements that exist in the given collection and not\n   *    this collection.\n   */\n  complement: function(collection, out, equals)\n  {\n    var target = out || this.cloneEmpty();\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < collection.length; i++)\n    {\n      var a = collection[ i ];\n      var exists = false;\n\n      for (var j = 0; j < this.length && !exists; j++)\n      {\n        exists = equality( a, this[ j ] );\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Clears all elements from this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.clear(); // []\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#sort\n   */\n  clear: function()\n  {\n    this.length = 0;\n    this.trigger( Collection.Events.Cleared, [this] );\n\n    return this;\n  },\n\n\n  /**\n   * Adds an element to this collection - sorting the collection if a\n   * comparator is set on this collection and `delaySort` is not a specified or\n   * a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.add( 5 ); // [1, 2, 3, 4, 5]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  add: function(value, delaySort)\n  {\n    AP.push.call( this, value );\n\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more elements to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.push( 5, 6, 7 ); // 7\n   * a // [1, 2, 3, 4, 5, 6, 7]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    AP.push.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds one or more elements to the beginning of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.unshift( 5, 6, 7 ); // 7\n   * a // [5, 6, 7, 1, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {...Any} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  unshift: function()\n  {\n    var values = arguments;\n\n    AP.unshift.apply( this, values );\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * Adds all elements in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var a = Rekord.collect(1, 2, 3, 4);\n   * a.addAll( [5, 6] ); // [1, 2, 3, 4, 5, 6]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  addAll: function(values, delaySort)\n  {\n    if ( isArray( values ) && values.length )\n    {\n      AP.push.apply( this, values );\n\n      this.trigger( Collection.Events.Adds, [this, values] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Inserts an element into this collection at the given index - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.insertAt( 0, 0 ); // [0, 1, 2, 3, 4]\n   * c.insertAt( 2, 1.5 ); // [0, 1, 1.5, 2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index to insert the element at.\n   * @param {Any} value -\n   *    The value to insert into the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#add\n   * @emits Rekord.Collection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    AP.splice.call( this, i, 0, value );\n    this.trigger( Collection.Events.Add, [this, value] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the last element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.pop(); // 4\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the end of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  pop: function(delaySort)\n  {\n    var removed = AP.pop.apply( this );\n    var i = this.length;\n\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first element in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed from the beginning of the collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = AP.shift.apply( this );\n\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the element in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAt( 1 ); // 2\n   * c.removeAt( 5 ); // undefined\n   * c // [1, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} i -\n   *    The index of the element to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Any} -\n   *    The element removed, or undefined if the index was invalid.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      AP.splice.call( this, i, 1 );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given value from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.remove( 1 ); // 1\n   * c.remove( 5 ); // undefined\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Any} -\n   *    The element removed from this collection.\n   * @emits Rekord.Collection#remove\n   * @emits Rekord.Collection#sort\n   */\n  remove: function(value, delaySort, equals)\n  {\n    var i = this.indexOf( value, equals );\n    var element = this[ i ];\n\n    if ( i !== -1 )\n    {\n      this.removeAt( i, delaySort );\n    }\n\n    return element;\n  },\n\n  /**\n   * Removes the given values from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeAll( [1, 5] ); // [1]\n   * c // [2, 3, 4]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any[]} values -\n   *    The values to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to any of the given values.\n   * @return {Any[]} -\n   *    The elements removed from this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   */\n  removeAll: function(values, delaySort, equals)\n  {\n    var removed = [];\n\n    if ( isArray( values ) && values.length )\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        var value = values[ i ];\n        var k = this.indexOf( value, equals );\n\n        if ( k !== -1 )\n        {\n          AP.splice.call( this, k, 1 );\n          removed.push( value );\n        }\n      }\n\n      this.trigger( Collection.Events.Removes, [this, removed] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes elements from this collection that meet the specified criteria. The\n   * given criteria are passed to {@link Rekord.createWhere} to create a filter\n   * function. All elements removed are returned\n   *\n   * ```javascript\n   * var isEven = function(x) { return x % 2 === 0; };\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.removeWhere( isEven ); // [2, 4];\n   * c // [1, 3]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @param {Array} [out=this.cloneEmpty()] -\n   *    The array to place the elements that match.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.Collection#sort sort}.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#sort\n   * @see Rekord.createWhere\n   */\n  removeWhere: function(whereProperties, whereValue, whereEquals, out, delaySort)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = out || this.cloneEmpty();\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var value = this[ i ];\n\n      if ( where( value ) )\n      {\n        AP.splice.call( this, i, 1 );\n        removed.push( value );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Splices elements out of and into this collection - sorting the collection\n   * if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} start -\n   *    Index at which to start changing the array (with origin 0). If greater\n   *    than the length of the array, actual starting index will be set to the\n   *    length of the array. If negative, will begin that many elements from the end.\n   * @param {Number} deleteCount -\n   *    An integer indicating the number of old array elements to remove. If\n   *    deleteCount is 0, no elements are removed. In this case, you should\n   *    specify at least one new element. If deleteCount is greater than the\n   *    number of elements left in the array starting at start, then all of the\n   *    elements through the end of the array will be deleted.\n   *    If deleteCount is omitted, deleteCount will be equal to (arr.length - start).\n   * @param {...Any} values -\n   *    The elements to add to the array, beginning at the start index. If you\n   *    don't specify any elements, splice() will only remove elements from the array.\n   * @return {Any[]} -\n   *    The array of deleted elements.\n   * @emits Rekord.Collection#removes\n   * @emits Rekord.Collection#adds\n   * @emits Rekord.Collection#sort\n   */\n  splice: function(start, deleteCount)\n  {\n    var adding = AP.splice.call( arguments, 0, 2 );\n    var removed = AP.splice.apply( this, arguments );\n\n    if ( deleteCount )\n    {\n      this.trigger( Collection.Events.Removes, [this, removed] );\n    }\n\n    if ( adding.length )\n    {\n      this.trigger( Collection.Events.Adds, [this, adding] );\n    }\n\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Reverses the order of elements in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.reverse(); // [4, 3, 2, 1]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#updates\n   */\n  reverse: function()\n  {\n    if ( AP.reverse )\n    {\n      AP.reverse.apply( this );\n    }\n    else\n    {\n      var n = this.length;\n      var half = Math.floor( n / 2 );\n\n      for (var i = 0; i < half; i++)\n      {\n        var k = n - i - 1;\n        var a = this[ i ];\n        this[ i ] = this[ k ];\n        this[ k ] = a;\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the given element in this collection or returns -1\n   * if the element doesn't exist in this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.indexOf( 1 ); // 0\n   * c.indexOf( 2 ); // 1\n   * c.indexOf( 5 ); // -1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Any} value -\n   *    The value to search for.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Number} -\n   *    The index of the element in this collection or -1 if it was not found.\n   * @see Rekord.equals\n   * @see Rekord.equalsStrict\n   */\n  indexOf: function(value, equals)\n  {\n    var equality = equals || equalsStrict;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( equality( value, this[ i ] ) )\n      {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\n   * Returns the element with the minimum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.minModel('age'); // {age: 3}\n   * c.minModel('-age'); // {age: 6}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the minimum model.\n   * @param {Any} [startingValue]\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  minModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, false );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( min, this[i] ) > 0 )\n      {\n        min = this[i];\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the element with the maximum value given a comparator.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 4}, {age: 5}, {age: 6}, {age: 3});\n   * c.maxModel('age'); // {age: 6}\n   * c.maxModel('-age'); // {age: 3}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {comparatorInput} comparator -\n   *    The comparator which calculates the maximum model.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum element in the collection given the comparator function.\n   * @see Rekord.createComparator\n   */\n  maxModel: function(comparator, startingValue)\n  {\n    var cmp = createComparator( comparator || this.comparator, true );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      if ( cmp( max, this[i] ) < 0 )\n      {\n        max = this[i];\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the minimum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.min('age');  // 5\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current minimum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial minimum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more minimal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The minimum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  min: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var min = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( min, resolved, false ) > 0 )\n      {\n        min = resolved;\n      }\n    }\n\n    return min;\n  },\n\n  /**\n   * Returns the maximum value for the given property expression out of all the\n   * elements this collection.\n   *\n   * ```javascript\n   * var c = Rekord.collect({age: 6}, {age: 5}, {notage: 5});\n   * c.max('age');  // 6\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which takes an element in this container and resolves a\n   *    value that can be compared to the current maximum.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @param {Any} [startingValue] -\n   *    The initial maximum value. If a value is specified, it's compared\n   *    against all elements in this collection until the comparator function\n   *    finds a more maximal value. If it doesn't - this is the value returned.\n   * @return {Any} -\n   *    The maximum value found.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.compare\n   */\n  max: function(properties, delim, startingValue)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n    var max = startingValue;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( compare( max, resolved, true ) < 0 )\n      {\n        max = resolved;\n      }\n    }\n\n    return max;\n  },\n\n  /**\n   * Returns the first element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.firstWhere('y', 6); // {x: 6}\n   * c.firstWhere(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [whereProperties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [whereValue] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [whereEquals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The first element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  firstWhere: function(whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns the first non-null value in this collection given a property\n   * expression. If no non-null values exist for the given property expression,\n   * then undefined will be returned.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n   * c.first('y'); // 6\n   * c.first(); // {x: 5}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @param {String} [delim=','] -\n   *    A delimiter to use to join multiple properties into a string.\n   * @return {Any} -\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  first: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Returns the last element where the given expression is true.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 6, age: 8}, {z: 7}]);\n   * c.lastWhere('y', 6); // {x: 6, age: 8}\n   * c.lastWhere(); // {z: 7}\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Any} -\n   *    The last element in this collection that matches the given expression.\n   * @see Rekord.createWhere\n   */\n  lastWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return model;\n      }\n    }\n\n    return null;\n  },\n\n   /**\n    * Returns the last non-null value in this collection given a property\n    * expression. If no non-null values exist for the given property expression,\n    * then undefined will be returned.\n    *\n    * ```javascript\n    * var c = Rekord.collect([{x: 5}, {y: 6}, {y: 4}, {z: 7}]);\n    * c.last('y'); // 4\n    * c.last(); // {z: 7}\n    * ```\n    *\n    * @method\n    * @memberof Rekord.Collection#\n    * @param {propertyResolverInput} [properties] -\n    *    The expression which converts one value into another.\n    * @param {String} [delim=','] -\n    *    A delimiter to use to join multiple properties into a string.\n    * @return {Any} -\n    * @see Rekord.createPropertyResolver\n    * @see Rekord.isValue\n    */\n  last: function(properties, delim)\n  {\n    var resolver = createPropertyResolver( properties, delim );\n\n    for (var i = this.length - 1; i >= 0; i--)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        return resolved;\n      }\n    }\n  },\n\n  /**\n   * Iterates over all elements in this collection and passes them through the\n   * `resolver` function. The returned value is passed through the `validator`\n   * function and if that returns true the resolved value is passed through the\n   * `process` function. After iteration, the `getResult` function is executed\n   * and the returned value is returned by this function.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} resolver -\n   *    The function which takes an element in this collection and returns a\n   *    value based on that element.\n   * @param {Function} validator -\n   *    The function which takes the resolved value and determines whether it\n   *    passes some test.\n   * @param {Function} process -\n   *    The function which is given the resolved value if it passes the test.\n   * @param {Function} getResult -\n   *    The function which is executed at the end of iteration and the result is\n   *    is returned by this function.\n   * @return {Any} -\n   *    The value returned by `getResult`.\n   */\n  aggregate: function(resolver, validator, process, getResult)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( validator( resolved ) )\n      {\n        process( resolved );\n      }\n    }\n\n    return getResult();\n  },\n\n  /**\n   * Sums all numbers resolved from the given property expression and returns\n   * the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.sum(); // 9\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.sum('age'); // 11\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The sum of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  sum: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n\n    function process(x)\n    {\n      result += x;\n    }\n\n    function getResult()\n    {\n      return result;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Averages all numbers resolved from the given property expression and\n   * returns the result.\n   *\n   * ```javascript\n   * var c = Rekord.collect([2, 3, 4]);\n   * c.avg(); // 3\n   * var d = Rekord.collect([{age: 5}, {age: 4}, {age: 2}]);\n   * d.avg('age'); // 3.66666\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [numbers]\n   *    The expression which converts an element in this collection to a number.\n   * @return {Number} -\n   *    The average of all valid numbers found in this collection.\n   * @see Rekord.createNumberResolver\n   */\n  avg: function(numbers)\n  {\n    var resolver = createNumberResolver( numbers );\n    var result = 0;\n    var total = 0;\n\n    function process(x)\n    {\n      result += x;\n      total++;\n    }\n\n    function getResult()\n    {\n      return total === 0 ? 0 : result / total;\n    }\n\n    return this.aggregate( resolver, isNumber, process, getResult );\n  },\n\n  /**\n   * Counts the number of elements in this collection that past the test\n   * function generated by {@link Rekord.createWhere}.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{name: 't1', done: 1}, {name: 't2', done: 0}, {name: 't3', done: 1}, {name: 't4'}]);\n   * c.countWhere('done'); // 3\n   * c.countWhere('done', 0); // 1\n   * c.countWhere('done', 1); // 2\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Number} -\n   *    The number of elements in the collection that passed the test.\n   * @see Rekord.createWhere\n   */\n  countWhere: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n    var met = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        met++;\n      }\n    }\n\n    return met;\n  },\n\n  /**\n   * Counts the number of elements in this collection that has a value for the\n   * given property expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 3}, {taco: 4}]);\n   * c.count('age'); // 2\n   * c.count('taco'); // 1\n   * c.count(); // 3\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [properties] -\n   *    The expression which converts one value into another.\n   * @return {Number} -\n   *    The number of elements that had values for the property expression.\n   * @see Rekord.createPropertyResolver\n   * @see Rekord.isValue\n   */\n  count: function(properties)\n  {\n    if ( !isValue( properties ) )\n    {\n      return this.length;\n    }\n\n    var resolver = createPropertyResolver( properties );\n    var result = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var resolved = resolver( this[ i ] );\n\n      if ( isValue( resolved ) )\n      {\n        result++;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Plucks values from elements in the collection. If only a `values` property\n   * expression is given the result will be an array of resolved values. If the\n   * `keys` property expression is given, the result will be an object where the\n   * property of the object is determined by the key expression.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2, nm: 'T'}, {age: 4, nm: 'R'}, {age: 5, nm: 'G'}]);\n   * c.pluck(); // c\n   * c.pluck('age'); // [2, 4, 5]\n   * c.pluck('age', 'nm'); // {T: e, R: 4, G: 5}\n   * c.pluck(null, 'nm'); // {T: {age: 2, nm: 'T'}, R: {age: 4, nm: 'R'}, G: {age: 5, nm: 'G'}}\n   * c.pluck('{age}-{nm}'); // ['2-T', '4-R', '5-G']\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {propertyResolverInput} [values] -\n   *    The expression which converts an element into a value to pluck.\n   * @param {propertyResolverInput} [keys] -\n   *    The expression which converts an element into an object property (key).\n   * @param {String} [valuesDelim=','] -\n   *    A delimiter to use to join multiple value properties into a string.\n   * @param {String} [keysDelim=','] -\n   *    A delimiter to use to join multiple key properties into a string.\n   * @return {Array|Object} -\n   *    The plucked values.\n   * @see Rekord.createPropertyResolver\n   */\n  pluck: function(values, keys, valuesDelim, keysDelim)\n  {\n    var valuesResolver = createPropertyResolver( values, valuesDelim );\n\n    if ( keys )\n    {\n      var keysResolver = createPropertyResolver( keys, keysDelim );\n      var result = {};\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n        var key = keysResolver( model );\n\n        result[ key ] = value;\n      }\n\n      return result;\n    }\n    else\n    {\n      var result = [];\n\n      for (var i = 0; i < this.length; i++)\n      {\n        var model = this[ i ];\n        var value = valuesResolver( model );\n\n        result.push( value );\n      }\n\n      return result;\n    }\n  },\n\n  /**\n   * Iterates over each element in this collection and passes the element and\n   * it's index to the given function. An optional function context can be given.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} callback -\n   *    The function to invoke for each element of this collection passing the\n   *    element and the index where it exists.\n   * @param {Object} [context] -\n   *    The context to the callback function.\n   * @return {Rekord.Collection} -\n   *    The reference to this collection.\n   */\n  each: function(callback, context)\n  {\n    var callbackContext = context || this;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var item = this[ i ];\n\n      callback.call( context, item, i );\n\n      if ( this[ i ] !== item )\n      {\n        i--;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Reduces all the elements of this collection to a single value. All elements\n   * are passed to a function which accepts the currently reduced value and the\n   * current element and returns the new reduced value.\n   *\n   * ```javascript\n   * var reduceIt = function(curr, elem) {\n   *  return curr + ( elem[0] * elem[1] );\n   * };\n   * var c = Rekord.collect([[2, 1], [3, 2], [5, 6]]);\n   * c.reduce( reduceIt, 0 ); // 38\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Function} reducer -\n   *    A function which accepts the current reduced value and an element and\n   *    returns the new reduced value.\n   * @param {Any} [initialValue] -\n   *    The first value to pass to the reducer function.\n   * @return {Any} -\n   *    The reduced value.\n   */\n  reduce: function(reducer, initialValue)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      initialValue = reducer( initialValue, this[ i ] );\n    }\n\n    return initialValue;\n  },\n\n  /**\n   * Returns a random element in this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Any} -\n   *    The randomly chosen element from this collection.\n   */\n  random: function()\n  {\n    var i = Math.floor( Math.random() * this.length );\n\n    return this[ i ];\n  },\n\n  /**\n   * Breaks up the collection into an array of arrays of a maximum size (chunks).\n   * A destination array can be used to avoid re-allocating arrays.\n   *\n   * ```javascript\n   * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * c.chunk(4); // [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Number} chunkSize -\n   *    The maximum number of elements that can exist in a chunk.\n   * @param {Array} [out] -\n   *    The destination array to place the chunks.\n   * @return {Array} -\n   *    The array of chunks of elements taken from this collection.\n   */\n  chunk: function(chunkSize, out)\n  {\n    var outer = out || [];\n    var outerIndex = 0;\n    var inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n    var innerIndex = 0;\n\n    for (var i = 0; i < this.length; i++)\n    {\n      inner[ innerIndex ] = this[ i ];\n\n      if ( ++innerIndex >= chunkSize )\n      {\n        innerIndex = 0;\n        outerIndex++;\n        inner.length = chunkSize;\n        inner = outer[ outerIndex ] = outer[ outerIndex ] || [];\n      }\n    }\n\n    if ( innerIndex !== 0 )\n    {\n      outerIndex++;\n    }\n\n    inner.length = innerIndex;\n    outer.length = outerIndex;\n\n    return outer;\n  },\n\n  /**\n   * Determines whether at least one element in this collection matches the\n   * given criteria.\n   *\n   * ```javascript\n   * var c = Rekord.collect([{age: 2}, {age: 6}]);\n   * c.contains('age', 2); // true\n   * c.contains('age', 3); // false\n   * c.contains('age'); // true\n   * c.contains('name'); // false\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {whereInput} [properties] -\n   *    The expression used to create a function to test the elements in this\n   *    collection.\n   * @param {Any} [value] -\n   *    When the first argument is a string this argument will be treated as a\n   *    value to compare to the value of the named property on the object passed\n   *    through the filter function.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    An alternative function can be used to compare to values.\n   * @return {Boolean} -\n   *    True if any of the elements passed the test function, otherwise false.\n   * @see Rekord.createWhere\n   */\n  contains: function(properties, value, equals)\n  {\n    var where = createWhere( properties, value, equals );\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Groups the elements into sub collections given some property expression to\n   * use as the value to group by.\n   *\n   * ```javascript\n   * var c = Rekord.collect([\n   *  { name: 'Tom', age: 6, group: 'X' },\n   *  { name: 'Jon', age: 7, group: 'X' },\n   *  { name: 'Rob', age: 8, group: 'X' },\n   *  { name: 'Bon', age: 9, group: 'Y' },\n   *  { name: 'Ran', age: 10, group: 'Y' },\n   *  { name: 'Man', age: 11, group: 'Y' },\n   *  { name: 'Tac', age: 12, group: 'Z' }\n   * ]);\n   *\n   * c.group({by: 'group'});\n   * // [{group: 'X', $count: 3, $group: [...]},\n   * //  {group: 'Y', $count: 3, $group: [...]},\n   * //  {group: 'Z', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', select: {age: 'avg', name: 'first'}});\n   * // [{group: 'X', age: 7, name: 'Tom', $count: 3, $group: [...]},\n   * //  {group: 'Y', age: 9, name: 'Bon', $count: 3, $group: [...]},\n   * //  {group: 'Z', age: 12, name: 'Tac', $count: 1, $group: [.]}]\n   *\n   * c.group({by: 'group', track: false, count: false});\n   * // [{group: 'X'}, {group: 'Y'}, {group: 'Z'}]\n   *\n   * var havingMoreThanOne = function(grouping, groupElements) {\n   *  return groupElements.length > 0;\n   * };\n   * c.group({by: 'group', select: {age: 'avg'}, comparator: '-age', having: havingMoreThanOne, track: false, count: false});\n   * // [{group: 'Y', age: 9},\n   * //  {group: 'X', age: 7}]\n   * ```\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @param {Object} grouping -\n   *    An object specifying how elements in this collection are to be grouped\n   *    and what properties from the elements should be aggregated in the\n   *    resulting groupings.\n   *      - `by`: A property expression that resolves how elements will be grouped.\n   *      - `bySeparator`: When an array or object property expression is specified, this is the string that joins them.\n   *      - `select`: An object which contains properties that should be aggregated where the value is the aggregate collection function to call (sum, avg, count, first, last, etc).\n   *      - `having`: A having expression which takes a grouping and the grouped elements and determines whether the grouping should be in the final result.\n   *      - `comparator`: A comparator for sorting the resulting collection of groupings.\n   *      - `comparatorNullsFirst`: Whether nulls should be sorted to the top.\n   *      - `track`: Whether all elements in the group should exist in a collection in the `$group` property of each grouping.\n   *      - `count`: Whether the number of elements in the group should be placed in the `$count` property of each grouping.\n   * @return {Rekord.Collection} -\n   *    A collection of groupings.\n   */\n  group: function(grouping)\n  {\n    var by = createPropertyResolver( grouping.by, grouping.bySeparator || '/' );\n    var having = createHaving( grouping.having );\n    var select = grouping.select || {};\n    var map = {};\n\n    if ( isString( grouping.by ) )\n    {\n      if ( !(grouping.by in select) )\n      {\n        select[ grouping.by ] = 'first';\n      }\n    }\n    else if ( isArray( grouping.by ) )\n    {\n      for (var prop in grouping.by)\n      {\n        if ( !(prop in select) )\n        {\n          select[ prop ] = 'first';\n        }\n      }\n    }\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = by( model );\n      var group = map[ key ];\n\n      if ( !group )\n      {\n        group = map[ key ] = this.cloneEmpty();\n      }\n\n      group.add( model, true );\n    }\n\n    var groupings = this.cloneEmpty();\n\n    groupings.setComparator( grouping.comparator, grouping.comparatorNullsFirst );\n\n    for (var key in map)\n    {\n      var grouped = {};\n      var groupArray = map[ key ];\n\n      for (var propName in select)\n      {\n        var aggregator = select[ propName ];\n\n        if ( isString( aggregator ) )\n        {\n          grouped[ propName ] = groupArray[ aggregator ]( propName );\n        }\n        else if ( isFunction( aggregator ) )\n        {\n          grouped[ propName ] = aggregator( groupArray, propName );\n        }\n      }\n\n      if ( grouping.track !== false )\n      {\n        grouped.$group = groupArray;\n      }\n\n      if ( grouping.count !== false )\n      {\n        grouped.$count = groupArray.length;\n      }\n\n      if ( having( grouped, groupArray ) )\n      {\n        groupings.push( grouped );\n      }\n    }\n\n    groupings.sort();\n\n    return groupings;\n  },\n\n  /**\n   * Returns a copy of this collection as a plain Array.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Array} -\n   *    The copy of this collection as a plain array.\n   */\n  toArray: function()\n  {\n    return this.slice();\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new this.constructor( this );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.Collection#\n   * @return {Rekord.Collection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new this.constructor();\n  }\n\n});\n\neventize( Collection.prototype );\n\n/**\n * Adds a listener for change events on this collection.\n *\n * @method change\n * @memberof Rekord.Collection#\n * @param {Function} callback -\n *    A function to call every time a change occurs in this collection.\n * @param {Object} [context] -\n *    The desired context (this) for the given callback function.\n * @return {Function} -\n *    A function to call to stop listening for change events.\n * @see Rekord.Collection#event:changes\n */\naddEventFunction( Collection.prototype, 'change', Collection.Events.Changes );\n","\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Page(collection, pageSize, pageIndex)\n{\n  this.onChanges = bind( this, this.handleChanges );\n  this.pageSize = pageSize;\n  this.pageIndex = pageIndex || 0;\n  this.pageCount = 0;\n  this.setCollection( collection );\n}\n\nPage.Events =\n{\n  Change:       'change',\n  Changes:      'change'\n};\n\nextendArray( Array, Page,\n{\n\n  setPageSize: function(pageSize)\n  {\n    this.pageSize = pageSize;\n    this.handleChanges();\n  },\n\n  setPageIndex: function(pageIndex)\n  {\n    this.goto( pageIndex );\n  },\n\n  setCollection: function(collection)\n  {\n    if ( collection !== this.collection )\n    {\n      if ( this.collection )\n      {\n        this.disconnect();\n      }\n\n      this.collection = collection;\n      this.connect();\n      this.handleChanges( true );\n    }\n  },\n\n  connect: function()\n  {\n    this.collection.on( Collection.Events.Changes, this.onChanges );\n  },\n\n  disconnect: function()\n  {\n    this.collection.off( Collection.Events.Changes, this.onChanges );\n  },\n\n  goto: function(pageIndex)\n  {\n    var actualIndex = Math.max( 0, Math.min( pageIndex, this.pageCount - 1 ) );\n\n    if ( actualIndex !== this.pageIndex )\n    {\n      this.pageIndex = actualIndex;\n      this.update();\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  next: function()\n  {\n    this.goto( this.pageIndex + 1 );\n  },\n\n  prev: function()\n  {\n    this.goto( this.pageIndex - 1 );\n  },\n\n  jump: function(to)\n  {\n    this.goto( to );\n  },\n\n  first: function()\n  {\n    this.goto( 0 );\n  },\n\n  last: function()\n  {\n    this.goto( this.pageCount - 1 );\n  },\n\n  handleChanges: function(forceApply)\n  {\n    var n = this.collection.length;\n    var pageCount = Math.ceil( n / this.pageSize );\n    var pageIndex = Math.max( 0, Math.min( this.pageIndex, pageCount - 1 ) );\n    var apply = forceApply || this.pageIndex !== pageIndex || this.length !== this.pageSize;\n    var changes = apply || this.pageCount !== pageCount;\n\n    this.pageIndex = pageIndex;\n    this.pageCount = pageCount;\n\n    if ( apply )\n    {\n      this.update();\n    }\n    if ( changes )\n    {\n      this.trigger( Page.Events.Change, [ this ] );\n    }\n  },\n\n  update: function()\n  {\n    var source = this.collection;\n    var n = source.length;\n    var start = this.pageIndex * this.pageSize;\n    var end = Math.min( start + this.pageSize, n );\n    var length = end - start;\n\n    this.length = 0;\n\n    for (var i = 0; i < length; i++)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  more: function(pages)\n  {\n    var source = this.collection;\n    var limit = source.length;\n    var pageCount = pages || 1;\n    var offset = this.pageIndex * this.pageSize;\n    var start = offset + this.length;\n    var adding = this.pageSize * pageCount;\n    var desiredEnd = start + adding;\n    var actualEnd = Math.min( limit, desiredEnd );\n\n    while (start < actualEnd)\n    {\n      this.push( source[ start++ ] );\n    }\n  },\n\n  toArray: function()\n  {\n    return this.slice();\n  }\n\n});\n\neventize( Page.prototype );\naddEventFunction( Page.prototype, 'change', Page.Events.Changes );\n","\n/**\n * An extension of the {@link Rekord.Collection} class which is a filtered view\n * of another collection.\n *\n * ```javascript\n * var isEven = function(x) { return x % 2 === 0; };\n * var c = Rekord.collect([1, 2, 3, 4, 5, 6, 7]);\n * var f = c.filtered( isEven );\n * f; // [2, 4, 6]\n * c.add( 8 );\n * c.remove( 2 );\n * f; // [4, 6, 8]\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Collection} base -\n *    The collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether an element in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredCollection#\n * @member {Rekord.Collection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( Collection, FilteredCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   */\n  bind: Filtering.bind,\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {Rekord.Collection} base -\n   *    The collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether an element in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: Filtering.init,\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredCollection#\n   * @return {Rekord.FilteredCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.Collection} class for {@link Rekord.Model}\n * instances.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.Collection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n * @see Rekord.Models.boot\n * @see Rekord.Models.collect\n */\nfunction ModelCollection(database, models, remoteData)\n{\n  this.init( database, models, remoteData );\n}\n\n/**\n * The map of models which keeps an index (by model key) of the models.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Map} map\n */\n\n/**\n * The database for the models in this collection.\n *\n * @memberof Rekord.ModelCollection#\n * @member {Rekord.Database} database\n */\n\nextendArray( Collection, ModelCollection,\n{\n\n  /**\n   * Initializes the model collection by setting the database, the initial set\n   * of models, and whether the initial set of models is from a remote source.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Rekord.Database} database -\n   *    The database for the models in this collection.\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#reset\n   */\n  init: function(database, models, remoteData)\n  {\n    this.map = new Map();\n    this.map.values = this;\n    this.database = database;\n    this.reset( models, remoteData );\n\n    return this;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  sort: function(comparator, comparatorNullsFirst)\n  {\n    var cmp = comparator ? createComparator( comparator, comparatorNullsFirst ) : this.comparator;\n\n    if ( !isSorted( cmp, this ) )\n    {\n      this.map.sort( cmp );\n\n      this.trigger( Collection.Events.Sort, [this] );\n    }\n\n    return this;\n  },\n\n  /**\n   * Takes input provided to the collection for adding, removing, or querying\n   * and generates the key which uniquely identifies a model.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a key.\n   * @return {modelKey} -\n   *    The key built from the input.\n   */\n  buildKeyFromInput: function(input)\n  {\n    return this.database.buildKeyFromInput( input );\n  },\n\n  /**\n   * Takes input provided to this collection for adding, removing, or querying\n   * and returns a model instance. An existing model can be referenced or a new\n   * model can be created on the spot.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The input to convert to a model instance.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.Model} -\n   *    A model instance parsed from the input.\n   */\n  parseModel: function(input, remoteData)\n  {\n    return this.database.parseModel( input, remoteData );\n  },\n\n  /**\n   * Creates a sub view of this collection known as a filtered collection. The\n   * resulting collection changes when this collection changes. Any time an\n   * element is added or removed to this collection it may be added or removed\n   * from the filtered collection if it fits the filter function. The filter\n   * function is created by passing the arguments of this function to\n   * {@link Rekord.createWhere}.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The newly created live filtered view of this collection.\n   * @see Rekord.createWhere\n   */\n  filtered: function(whereProperties, whereValue, whereEquals)\n  {\n    var filter = createWhere( whereProperties, whereValue, whereEquals );\n\n    return new FilteredModelCollection( this, filter );\n  },\n\n  /**\n   * Documented in Collection.js\n   *\n   * @see Rekord.ModelCollection#buildKeyFromInput\n   */\n  subtract: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var a = this[ i ];\n      var key = a.$key();\n      var exists = false;\n\n      if ( models instanceof ModelCollection )\n      {\n        exists = models.has( key );\n      }\n      else\n      {\n        for (var i = 0; i < models.length && !exists; i++)\n        {\n          var modelKey = this.buildKeyFromInput( models[ i ] );\n\n          exists = (key === modelKey);\n        }\n      }\n\n      if (!exists)\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  intersect: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  complement: function(models, out)\n  {\n    var target = out || this.cloneEmpty();\n\n    for (var i = 0; i < models.length; i++)\n    {\n      var a = models[ i ];\n      var key = this.buildKeyFromInput( a );\n\n      if ( !this.has( key ) )\n      {\n        target.push( a );\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * Documented in Collection.js\n   */\n  clear: function()\n  {\n    return this.map.reset();\n  },\n\n  /**\n   * Resets the models in this collection with a new collection of models.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} [models] -\n   *    The initial array of models in this collection.\n   * @param {Boolean} [remoteData=false] -\n   *    If the models array is from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.ModelCollection#parseModel\n   * @emits Rekord.ModelCollection#reset\n   */\n  reset: function(models, remoteData)\n  {\n    var map = this.map;\n\n    map.reset();\n\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = models[ i ];\n        var parsed = this.parseModel( model, remoteData );\n\n        if ( parsed )\n        {\n          map.put( parsed.$key(), parsed );\n        }\n      }\n    }\n    else if ( isObject( models ) )\n    {\n      var parsed = this.parseModel( models, remoteData );\n\n      if ( parsed )\n      {\n        map.put( parsed.$key(), parsed );\n      }\n    }\n\n    this.trigger( Collection.Events.Reset, [this] );\n    this.sort();\n  },\n\n  /**\n   * Returns whether this collection contains a model with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to check for existence.\n   * @return {Boolean} -\n   *    True if a model with the given key exists in this collection, otherwise\n   *    false.\n   */\n  has: function(key)\n  {\n    return this.map.has( key );\n  },\n\n  /**\n   * Returns the model in this collection with the given key.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model to return.\n   * @return {Rekord.Model} -\n   *    The model instance for the given key, or undefined if a model wasn't\n   *    found.\n   */\n  get: function(key)\n  {\n    return this.map.get( key );\n  },\n\n  /**\n   * Places a model in this collection providing a key to use.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelKey} key -\n   *    The key of the model.\n   * @param {Rekord.Model} model -\n   *    The model instance to place in the collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  put: function(key, model, delaySort)\n  {\n    this.map.put( key, model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n  },\n\n  /**\n   * Adds a model to this collection - sorting the collection if a comparator\n   * is set on this collection and `delaySort` is not a specified or a true\n   * value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  add: function(input, delaySort, remoteData)\n  {\n    var model = this.parseModel( input, remoteData );\n\n    this.map.put( model.$key(), model );\n    this.trigger( Collection.Events.Add, [this, model] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds one or more models to the end of this collection - sorting the\n   * collection if a comparator is set on this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {...modelInput} value -\n   *    The models to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  push: function()\n  {\n    var values = arguments;\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var model = this.parseModel( values[ i ] );\n\n      this.map.put( model.$key(), model );\n    }\n\n    this.trigger( Collection.Events.Adds, [this, values] );\n    this.sort();\n\n    return this.length;\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#push\n   * @param {...modelInput} value -\n   *    The values to add to this collection.\n   * @return {Number} -\n   *    The new length of this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  unshift: function()\n  {\n    return this.push.apply( this, arguments );\n  },\n\n  /**\n   * Adds all models in the given array to this collection - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} models -\n   *    The models to add to this collection.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {Boolean} [remoteData=false] -\n   *    If the model is from a remote source. Remote sources place the model\n   *    directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#adds\n   * @emits Rekord.ModelCollection#sort\n   */\n  addAll: function(models, delaySort, remoteData)\n  {\n    if ( isArray( models ) )\n    {\n      for (var i = 0; i < models.length; i++)\n      {\n        var model = this.parseModel( models[ i ], remoteData );\n\n        this.map.put( model.$key(), model );\n      }\n\n      this.trigger( Collection.Events.Adds, [this, models] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @see Rekord.ModelCollection#add\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#add\n   * @emits Rekord.ModelCollection#sort\n   */\n  insertAt: function(i, value, delaySort)\n  {\n    return this.add( value, delaySort );\n  },\n\n  /**\n   * Removes the last model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the end of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  pop: function(delaySort)\n  {\n    var i = this.length - 1;\n    var removed = this[ i ];\n\n    this.map.removeAt( i );\n    this.trigger( Collection.Events.Remove, [this, removed, i] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the first model in this collection and returns it - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is\n   * no specified or a true value.\n   *\n   * ```javascript\n   * var c = Rekord.collect(1, 2, 3, 4);\n   * c.shift(); // 1\n   * ```\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed from the beginning of the collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  shift: function(delaySort)\n  {\n    var removed = this[ 0 ];\n\n    this.map.removeAt( 0 );\n    this.trigger( Collection.Events.Remove, [this, removed, 0] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Removes the model in this collection at the given index `i` - sorting\n   * the collection if a comparator is set on this collection and `delaySort` is\n   * not specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Number} i -\n   *    The index of the model to remove.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model} -\n   *    The model removed, or undefined if the index was invalid.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAt: function(i, delaySort)\n  {\n    var removing;\n\n    if (i >= 0 && i < this.length)\n    {\n      removing = this[ i ];\n\n      this.map.removeAt( i );\n      this.trigger( Collection.Events.Remove, [this, removing, i] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n\n    return removing;\n  },\n\n  /**\n   * Removes the given model from this collection if it exists - sorting the\n   * collection if a comparator is set on this collection and `delaySort` is not\n   * specified or a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to remove from this collection if it exists.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @param {equalityCallback} [equals=Rekord.equalsStrict] -\n   *    The function which determines whether one of the elements that exist in\n   *    this collection are equivalent to the given value.\n   * @return {Rekord.Model} -\n   *    The element removed from this collection.\n   * @emits Rekord.ModelCollection#remove\n   * @emits Rekord.ModelCollection#sort\n   */\n  remove: function(input, delaySort)\n  {\n    var key = this.buildKeyFromInput( input );\n    var removing = this.map.get( key );\n\n    if ( removing )\n    {\n      this.map.remove( key );\n      this.trigger( Collection.Events.Remove, [this, removing, input] );\n\n      if ( !delaySort )\n      {\n        this.sort();\n      }\n    }\n  },\n\n  /**\n   * Removes the given models from this collection - sorting the collection if\n   * a comparator is set on this collection and `delaySort` is not specified or\n   * a true value.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput[]} inputs -\n   *    The models to remove from this collection if they exist.\n   * @param {Boolean} [delaySort=false] -\n   *    Whether automatic sorting should be delayed until the user manually\n   *    calls {@link Rekord.ModelCollection#sort sort}.\n   * @return {Rekord.Model[]} -\n   *    The models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeAll: function(inputs, delaySort)\n  {\n    var map = this.map;\n    var removed = [];\n\n    for (var i = 0; i < inputs.length; i++)\n    {\n      var key = this.buildKeyFromInput( inputs[ i ] );\n      var removing = map.get( key );\n\n      if ( removing )\n      {\n        map.remove( key );\n        removed.push( removing );\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n\n    if ( !delaySort )\n    {\n      this.sort();\n    }\n\n    return removed;\n  },\n\n  /**\n   * Returns the index of the given model in this collection or returns -1\n   * if the model doesn't exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {modelInput} input -\n   *    The model to search for.\n   * @return {Number} -\n   *    The index of the model in this collection or -1 if it was not found.\n   */\n  indexOf: function(input)\n  {\n    var key = this.buildKeyFromInput( input );\n    var index = this.map.indices[ key ];\n\n    return index === undefined ? -1 : index;\n  },\n\n  /**\n   * Rebuilds the internal index which maps keys to the index of the model in\n   * this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   */\n  rebuild: function()\n  {\n    this.map.rebuildIndex();\n  },\n\n  /**\n   * Returns the array of keys that correspond to the models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {modelKey[]} -\n   *    The array of model keys.\n   */\n  keys: function()\n  {\n    return this.map.keys;\n  },\n\n  /**\n   * Reverses the order of models in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   */\n  reverse: function()\n  {\n    this.map.reverse();\n\n    this.trigger( Collection.Events.Updates, [this] );\n\n    return this;\n  },\n\n  /**\n   * Removes the models from this collection where the given expression is true.\n   * The first argument, if `true`, can call {@link Rekord.Model#$remove} on each\n   * model removed from this colleciton.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {Boolean} [callRemove=false] -\n   *    Whether {@link Rekord.Model#$remove} should be called on each removed model.\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.Model[]} -\n   *    An array of models removed from this collection.\n   * @emits Rekord.ModelCollection#removes\n   * @emits Rekord.ModelCollection#sort\n   */\n  removeWhere: function(callRemove, whereProperties, whereValue, whereEquals)\n  {\n    var where = createWhere( whereProperties, whereValue, whereEquals );\n    var removed = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n      var key = model.$key();\n\n      if ( where( model ) )\n      {\n        this.map.remove( key );\n        removed.push( model );\n\n        if ( callRemove )\n        {\n          model.$remove();\n        }\n      }\n    }\n\n    this.trigger( Collection.Events.Removes, [this, removed] );\n    this.sort();\n\n    return removed;\n  },\n\n  /**\n   * Updates the given property(s) in all models in this collection with the\n   * given value. If `avoidSave` is not a truthy value then\n   * {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {Any} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.ModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  update: function(props, value, remoteData, avoidSave)\n  {\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      model.$set( props, value, remoteData );\n\n      if ( !avoidSave )\n      {\n        model.$save();\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, this] );\n    this.sort();\n\n    return this;\n  },\n\n  /**\n   * Updates the given property(s) in models in this collection which pass the\n   * `where` function with the given value. If `avoidSave` is not a truthy value\n   * then {@link Rekord.Model#$save} is called on every model in this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @param {whereCallback} where -\n   *    The function which determines whether a model should be updated.\n   * @param {String|Object} props -\n   *    The property or properties to update.\n   * @param {*} [value] -\n   *    The value to set if a String `props` is given.\n   * @param {Boolean} [remoteData=false] -\n   *    If the properties are from a remote source. Remote sources place the\n   *    model directly into the database while local sources aren't stored in the\n   *    database until they're saved.\n   * @param {Boolean} [avoidSave=false] -\n   *    True for NOT calling {@link Rekord.Model#$save}, otherwise false.\n   * @return {Rekord.Model[]} -\n   *    An array of models updated.\n   * @emits Rekord.ModelCollection#updates\n   * @emits Rekord.ModelCollection#sort\n   */\n  updateWhere: function(where, props, value, remoteData, avoidSave)\n  {\n    var updated = [];\n\n    for (var i = 0; i < this.length; i++)\n    {\n      var model = this[ i ];\n\n      if ( where( model ) )\n      {\n        model.$set( props, value, remoteData );\n\n        if ( !autoSave )\n        {\n          model.$save();\n        }\n\n        updated.push( model );\n      }\n    }\n\n    this.trigger( Collection.Events.Updates, [this, updated] );\n    this.sort();\n\n    return updated;\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new ModelCollection( this.database, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.ModelCollection#\n   * @return {Rekord.ModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new ModelCollection( this.database );\n  }\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class which is a filtered\n * view of another model collection. Changes made to the base collection are\n * reflected in the filtered collection - possibly resulting in additions and\n * removals from the filtered collection.\n *\n * ```javascript\n * var Task = Rekord({\n *   fields: ['name', 'done']\n * });\n * var finished = Task.filtered('done', true);\n * finished; // will always contain tasks that are done\n * ```\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.ModelCollection} base -\n *    The model collection to listen to for changes to update this collection.\n * @param {whereCallback} filter -\n *    The function which determines whether a model in the base collection\n *    should exist in this collection.\n * @see Rekord.Collection#filtered\n */\nfunction FilteredModelCollection(base, filter)\n{\n  this.bind();\n  this.init( base, filter );\n}\n\n/**\n * The collection to listen to for changes to update this collection.\n *\n * @memberof Rekord.FilteredModelCollection#\n * @member {Rekord.ModelCollection} base\n */\n\n /**\n  * The function which determines whether an element in the base collection\n  * should exist in this collection.\n  *\n  * @memberof Rekord.FilteredModelCollection#\n  * @member {whereCallback} filter\n  */\n\nextendArray( ModelCollection, FilteredModelCollection,\n{\n\n  /**\n   * Generates the handlers which are passed to the base collection when this\n   * filtered collection is connected or disconnected - which happens on\n   * initialization and subsequent calls to {@link FilteredModelCollection#init}.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   */\n  bind: function()\n  {\n    Filtering.bind.apply( this );\n\n    this.onModelUpdated = bind( this, this.handleModelUpdate );\n  },\n\n  /**\n   * Initializes the filtered collection by setting the base collection and the\n   * filtering function.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {Rekord.ModelCollection} base -\n   *    The model collection to listen to for changes to update this collection.\n   * @param {whereCallback} filter -\n   *    The function which determines whether a model in the base collection\n   *    should exist in this collection.\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  init: function(base, filter)\n  {\n    if ( this.base )\n    {\n      this.base.database.off( Database.Events.ModelUpdated, this.onModelUpdated );\n    }\n\n    ModelCollection.prototype.init.call( this, base.database );\n\n    Filtering.init.call( this, base, filter );\n\n    base.database.on( Database.Events.ModelUpdated, this.onModelUpdated );\n\n    return this;\n  },\n\n  /**\n   * Sets the filter function of this collection and re-sychronizes it with the\n   * base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @param {whereInput} [whereProperties] -\n   *    See {@link Rekord.createWhere}\n   * @param {Any} [whereValue] -\n   *    See {@link Rekord.createWhere}\n   * @param {equalityCallback} [whereEquals] -\n   *    See {@link Rekord.createWhere}\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @see Rekord.createWhere\n   * @emits Rekord.Collection#reset\n   */\n  setFilter: Filtering.setFilter,\n\n  /**\n   * Registers callbacks with events of the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  connect: Filtering.connect,\n\n  /**\n   * Unregisters callbacks with events from the base collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   */\n  disconnect: Filtering.disconnect,\n\n  /**\n   * Synchronizes this collection with the base collection. Synchronizing\n   * involves iterating over the base collection and passing each element into\n   * the filter function and if it returns a truthy value it's added to this\n   * collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to this collection.\n   * @emits Rekord.Collection#reset\n   */\n  sync: Filtering.sync,\n\n  /**\n   * Handles the ModelUpdated event from the database.\n   */\n  handleModelUpdate: function(model)\n  {\n    var exists = this.has( model.$key() );\n    var matches = this.filter( model );\n\n    if ( exists && !matches )\n    {\n      this.remove( model );\n    }\n    if ( !exists && matches )\n    {\n      this.add( model );\n    }\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: Filtering.clone,\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.FilteredModelCollection#\n   * @return {Rekord.FilteredModelCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: Filtering.cloneEmpty\n\n});\n","\n/**\n * An extension of the {@link Rekord.ModelCollection} class for relationships.\n *\n * @constructor\n * @memberof Rekord\n * @extends Rekord.ModelCollection\n * @param {Rekord.Database} database -\n *    The database for the models in this collection.\n * @param {Rekord.Model} model -\n *    The model instance all models in this collection are related to.\n * @param {Rekord.Relation} relator -\n *    The relation instance responsible for relating/unrelating models.\n * @param {modelInput[]} [models] -\n *    The initial array of models in this collection.\n * @param {Boolean} [remoteData=false] -\n *    If the models array is from a remote source. Remote sources place the\n *    model directly into the database while local sources aren't stored in the\n *    database until they're saved.\n */\nfunction RelationCollection(database, model, relator, models, remoteData)\n{\n  this.model = model;\n  this.relator = relator;\n\n  this.init( database, models, remoteData );\n}\n\n/**\n * The model instance all models in this collection are related to.\n *\n * @memberof Rekord.RelationCollection#\n * @member {Rekord.Model} model\n */\n\n /**\n  * The relation instance responsible for relating/unrelating models.\n  *\n  * @memberof Rekord.RelationCollection#\n  * @member {Rekord.Relation} relator\n  */\n\nextendArray( ModelCollection, RelationCollection,\n{\n\n  /**\n   * Sets the entire set of models which are related. If a model is specified\n   * that doesn't exist in this collection a relationship is added. If a model\n   * in this collection is not specified in the `input` the relationship is\n   * removed. Depending on the relationship, adding and removing relationships\n   * may result in the saving or deleting of models.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} [input] -\n   *    The model or array of models to relate. If input isn't specified, all\n   *    models currently related are unrelated.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  set: function(input)\n  {\n    this.relator.set( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Relates one or more models to this collection's model. If a model is\n   * specified that is already related then it has no effect.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  relate: function(input)\n  {\n    this.relator.relate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Unrelates one or more models from this collection's model. If a model is\n   * specified that is not related then it has no effect. If no models are\n   * specified then all models in this collection are unrelated.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to relate.\n   * @return {Rekord.RelationCollection} -\n   *    The reference to this collection.\n   */\n  unrelate: function(input)\n  {\n    this.relator.unrelate( this.model, input );\n\n    return this;\n  },\n\n  /**\n   * Determines whether one or more models all exist in this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @param {modelInput|modelInput[]} input -\n   *    The model or array of models to check for existence.\n   * @return {Boolean} -\n   *    True if all models are related - otherwise false.\n   */\n  isRelated: function(input)\n  {\n    return this.relator.isRelated( this.model, input );\n  },\n\n  /**\n   * Returns a clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  clone: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator, this, true );\n  },\n\n  /**\n   * Returns an empty clone of this collection.\n   *\n   * @method\n   * @memberof Rekord.RelationCollection#\n   * @return {Rekord.RelationCollection} -\n   *    The reference to a clone collection.\n   */\n  cloneEmpty: function()\n  {\n    return new RelationCollection( this.database, this.model, this.relator );\n  }\n\n});\n","\n/**\n * Overrides functions in the given model collection to turn it into a collection\n * which contains models with a discriminator field.\n *\n * @param {Rekord.ModelCollection} collection -\n *    The collection instance with discriminated models.\n * @param {String} discriminator -\n *    The name of the field which contains the discriminator.\n * @param {Object} discriminatorsToModel -\n *    A map of discriminators to the Rekord instances.\n * @return {Rekord.ModelCollection} -\n *    The reference to the given collection.\n */\nfunction DiscriminateCollection(collection, discriminator, discriminatorsToModel)\n{\n  collection.discriminator = discriminator;\n  collection.discriminatorsToModel = discriminatorsToModel;\n\n  // Original Functions\n  var buildKeyFromInput = collection.buildKeyFromInput;\n  var parseModel = collection.parseModel;\n  var clone = collection.clone;\n  var cloneEmpty = collection.cloneEmpty;\n\n  addMethods( collection,\n  {\n\n    /**\n     * Builds a key from input. Discriminated collections only accept objects as\n     * input - otherwise there's no way to determine the discriminator. If the\n     * discriminator on the input doesn't map to a Rekord instance OR the input\n     * is not an object the input will be returned instead of a model instance.\n     *\n     * @param {modelInput} input -\n     *    The input to create a key for.\n     * @return {Any} -\n     *    The built key or the given input if a key could not be built.\n     */\n    buildKeyFromInput: function(input)\n    {\n      if ( isObject( input ) )\n      {\n        var discriminatedValue = input[ this.discriminator ];\n        var model = this.discriminatorsToModel[ discriminatedValue ];\n\n        if ( model )\n        {\n          return model.Database.buildKeyFromInput( input );\n        }\n      }\n\n      return input;\n    },\n\n    /**\n     * Takes input and returns a model instance. The input is expected to be an\n     * object, any other type will return null.\n     *\n     * @param {modelInput} input -\n     *    The input to parse to a model instance.\n     * @param {Boolean} [remoteData=false] -\n     *    Whether or not the input is coming from a remote source.\n     * @return {Rekord.Model} -\n     *    The model instance parsed or null if none was found.\n     */\n    parseModel: function(input, remoteData)\n    {\n      if ( input instanceof Model )\n      {\n        return input;\n      }\n\n      var discriminatedValue = isValue( input ) ? input[ this.discriminator ] : null;\n      var model = this.discriminatorsToModel[ discriminatedValue ];\n\n      return model ? model.Database.parseModel( input, remoteData ) : null;\n    },\n\n    /**\n     * Returns a clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    clone: function()\n    {\n      return DiscriminateCollection( clone.apply( this ), discriminator, discriminatorsToModel );\n    },\n\n    /**\n     * Returns an empty clone of this collection.\n     *\n     * @method\n     * @memberof Rekord.Collection#\n     * @return {Rekord.Collection} -\n     *    The reference to a clone collection.\n     */\n    cloneEmpty: function()\n    {\n      return DiscriminateCollection( cloneEmpty.apply( this ), discriminator, discriminatorsToModel );\n    }\n\n  });\n\n  return collection;\n}\n","\n/**\n * Options you can pass to {@link Rekord.Search} or {@link Rekord.Model.search}.\n *\n * @typedef {Object} searchOptions\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and returns\n *    The array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n */\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful$\n */\nfunction Search(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearch.Events =\n{\n  Ready:      'ready',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Status =\n{\n  Pending:    'pending',\n  Success:    'success',\n  Failure:    'failure'\n};\n\nSearch.Defaults =\n{\n};\n\naddMethods( Search.prototype,\n{\n\n  $getDefaults: function()\n  {\n    return Search.Defaults;\n  },\n\n  $init: function(database, url, options)\n  {\n    applyOptions( this, options, this.$getDefaults(), true );\n\n    this.$append = false;\n    this.$db = database;\n    this.$url = url;\n    this.$results = new ModelCollection( database );\n    this.$status = Search.Status.Success;\n    this.$request = new Request( this, this.$handleSuccess, this.$handleFailure );\n  },\n\n  $set: function(props)\n  {\n    return transfer( props, this );\n  },\n\n  $run: function()\n  {\n    var encoded = this.$encode();\n    var success = this.$request.onSuccess();\n    var failure = this.$request.onFailure();\n\n    this.$status = Search.Status.Pending;\n    this.$db.rest.query( this.$url, encoded, success, failure );\n\n    return this;\n  },\n\n  $cancel: function()\n  {\n    this.$off( Search.Events.Ready );\n    this.$off( Search.Events.Success );\n    this.$off( Search.Events.Failure );\n\n    this.$request.cancel();\n\n    return this;\n  },\n\n  $ready: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Ready, callback, context );\n    }\n    else\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $success: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Success, callback, context );\n    }\n    else if ( this.$status === Search.Status.Success )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $failure: function(callback, context)\n  {\n    if ( this.$status === Search.Status.Pending )\n    {\n      this.$once( Search.Events.Failure, callback, context );\n    }\n    else if ( this.$status === Search.Status.Failure )\n    {\n      callback.call( context, this );\n    }\n\n    return this;\n  },\n\n  $handleSuccess: function(response)\n  {\n    var models = this.$decode.apply( this, arguments );\n\n    this.$status = Search.Status.Success;\n\n    if ( this.$append )\n    {\n      this.$results.addAll( models, false, true );\n    }\n    else\n    {\n      this.$results.reset( models, true );\n    }\n\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Success, [this, response] );\n  },\n\n  $handleFailure: function(response)\n  {\n    this.$status = Search.Status.Failure;\n    this.$trigger( Search.Events.Ready, [this, response] );\n    this.$trigger( Search.Events.Failure, [this, response] );\n  },\n\n  $encode: function()\n  {\n    return cleanFunctions( copy( this ) );\n  },\n\n  $decode: function(models)\n  {\n    return models;\n  },\n\n  $key: function()\n  {\n    return '';\n  }\n\n});\n\neventize( Search.prototype, true );\n","\n/**\n * Options you can pass to {@link Rekord.SearchPaged} or\n * {@link Rekord.Model.searchPaged}.\n *\n * @typedef {Object} searchPageOptions\n * @property {Number} [page_size=10] -\n *    The size of the pages.\n * @property {Number} [page_index=0] -\n *    The index of the search page.\n * @property {Number} [total=0] -\n *    The total number of models that exist in the search without pagination\n *    - this is expected to be provided by the remote search response.\n * @property {Function} [$encode] -\n *    A function which converts the search into an object to pass to the\n *    specified methods.\n * @property {Function} [$decode] -\n *    A function which takes the data returned from the server and updates\n *    this search with the results and paging information.\n * @property {Function} [$decodeResults] -\n *    A function which takes the data returned from the server and returns the\n *    array of models which are to be placed in the\n *    {@link Rekord.Search#$results} property.\n * @property {Function} [$updatePageSize] -\n *    A function which takes the data returned from the server and sets an\n *    updated page size of the search.\n * @property {Function} [$updatePageIndex] -\n *    A function which takes the data returned from the server and sets an\n *    updated page index of the search.\n * @property {Function} [$updateTotal] -\n *    A function which takes the data returned from the server and sets an\n *    updated total of the search.\n */\n\nfunction SearchPaged(database, url, options)\n{\n  this.$init( database, url, options );\n}\n\nSearchPaged.Defaults =\n{\n  page_size:   10,\n  page_index:  0,\n  total:       0\n};\n\nextend( Search, SearchPaged,\n{\n\n  $getDefaults: function()\n  {\n    return SearchPaged.Defaults;\n  },\n\n  $goto: function(index, dontRun)\n  {\n    var pageIndex = this.$getPageIndex();\n    var pageCount = this.$getPageCount();\n    var desired = Math.max( 0, Math.min( index, pageCount - 1 ) );\n\n    if ( pageIndex !== desired )\n    {\n      this.$setPageIndex( desired );\n\n      if ( !dontRun )\n      {\n        this.$append = false;\n        this.$run();\n      }\n    }\n\n    return this;\n  },\n\n  $more: function()\n  {\n    var next = this.$getPageIndex() + 1;\n\n    if ( next < this.$getPageCount() )\n    {\n      this.$setPageIndex( next );\n      this.$once( Search.Events.Ready, this.$onMoreEnd );\n      this.$append = true;\n      this.$run();\n    }\n\n    return this;\n  },\n\n  $onMoreEnd: function()\n  {\n    this.$append = false;\n  },\n\n  $first: function(dontRun)\n  {\n    return this.$goto( 0, dontRun );\n  },\n\n  $last: function(dontRun)\n  {\n    return this.$goto( this.$getPageCount() - 1, dontRun );\n  },\n\n  $prev: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() - 1, dontRun );\n  },\n\n  $next: function(dontRun)\n  {\n    return this.$goto( this.$getPageIndex() + 1, dontRun );\n  },\n\n  $decode: function(response)\n  {\n    this.$updatePageSize( response );\n    this.$updatePageIndex( response );\n    this.$updateTotal( response );\n\n    return this.$decodeResults( response );\n  },\n\n  $decodeResults: function(response)\n  {\n    return response.results;\n  },\n\n  $updatePageSize: function(response)\n  {\n    if ( isNumber( response.page_size ) )\n    {\n      this.page_size = response.page_size;\n    }\n  },\n\n  $setPageSize: function(page_size)\n  {\n    this.page_size = page_size;\n  },\n\n  $getPageSize: function()\n  {\n    return this.page_size;\n  },\n\n  $updatePageIndex: function(response)\n  {\n    if ( isNumber( response.page_index ) )\n    {\n      this.page_index = response.page_index;\n    }\n  },\n\n  $setPageIndex: function(page_index)\n  {\n    this.page_index = page_index || 0;\n  },\n\n  $getPageIndex: function()\n  {\n    return this.page_index;\n  },\n\n  $getPageOffset: function()\n  {\n    return this.page_index * this.page_size;\n  },\n\n  $updateTotal: function(response)\n  {\n    if ( isNumber( response.total ) )\n    {\n      this.total = response.total;\n    }\n  },\n\n  $setTotal: function(total)\n  {\n    this.total = total || 0;\n  },\n\n  $getTotal: function()\n  {\n    return this.total;\n  },\n\n  $getPageCount: function()\n  {\n    return Math.ceil( this.$getTotal() / this.$getPageSize() );\n  }\n\n});\n","\nRekord.transaction = null;\n\nRekord.transact = function(cascade, model, operation, func)\n{\n  var transaction = Rekord.transaction;\n\n  if ( transaction )\n  {\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction )\n\n    return transaction;\n  }\n  else\n  {\n    transaction = Rekord.transaction = new Transaction( cascade, model, operation );\n\n    transaction.add( cascade, model, operation );\n\n    func.call( model, transaction );\n\n    Rekord.transaction = null;\n\n    return transaction;\n  }\n};\n\nRekord.transactNone = function(cascade, model, operation)\n{\n  return new Transaction( cascade, model, operation );\n};\n\n/**\n *\n * @constructor\n * @memberof Rekord\n * @augments Rekord.Eventful\n */\nfunction Transaction(cascade, model, operation)\n{\n  this.cascade = cascade;\n  this.model = model;\n  this.operation = operation;\n  this.status = null;\n  this.completed = 0;\n  this.operations = 0;\n}\n\nTransaction.Events =\n{\n  RemoteSuccess:  'remote-success',\n  LocalSuccess:   'local-success',\n  Offline:        'offline',\n  Blocked:        'blocked',\n  Error:          'error',\n  Any:            'remote-success local-success offline blocked error'\n};\n\naddMethods( Transaction.prototype,\n{\n  add: function(cascade, model, operation)\n  {\n    var handled = {\n      already: false,\n      offs: []\n    };\n\n    switch (operation)\n    {\n    case 'save':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteSaveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalSave, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalSaveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n\n    case 'remove':\n      if ( cascade & Rekord.Cascade.Rest )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.RemoteRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveFailure, this.createHandler( true, false, handled ), this ),\n          model.$once( Model.Events.RemoteRemoveOffline, this.createHandler( false, true, handled ), this )\n        );\n      }\n      else if ( cascade & Rekord.Cascade.Local )\n      {\n        handled.offs.push(\n          model.$once( Model.Events.LocalRemove, this.createHandler( false, false, handled ), this ),\n          model.$once( Model.Events.LocalRemoveFailure, this.createHandler( true, false, handled ), this )\n        );\n      }\n      break;\n    }\n\n    if ( handled.offs.length )\n    {\n      this.operations++;\n    }\n  },\n\n  createHandler: function(failure, offline, handled)\n  {\n    return function onEvent()\n    {\n      if ( !handled.already )\n      {\n        handled.already = true;\n\n        for (var i = 0; i < handled.offs.length; i++)\n        {\n          handled.offs[ i ]();\n        }\n\n        if ( offline )\n        {\n          this.status = Transaction.Events.Offline;\n        }\n        else if ( !this.status && failure )\n        {\n          this.status = Transaction.Events.Error;\n        }\n\n        this.completed++;\n\n        if ( this.isFinished() )\n        {\n          this.finish();\n        }\n      }\n    };\n  },\n\n  finish: function()\n  {\n    this.completed = this.operations;\n\n    if ( !this.status )\n    {\n      if ( this.cascade & Rekord.Cascade.Rest )\n      {\n        this.status = Transaction.Events.RemoteSuccess;\n      }\n      else if ( this.cascade & Rekord.Cascade.Local )\n      {\n        this.status = Transaction.Events.LocalSuccess;\n      }\n      else\n      {\n        this.status = Transaction.Events.Error;\n      }\n    }\n\n    this.trigger( this.status, [this.status, this.model, this.cascade] );\n  },\n\n  isFinished: function()\n  {\n    return this.completed === this.operations;\n  },\n\n  then: function(callback, context)\n  {\n    var ignore = this.once( Transaction.Events.Any, callback, context );\n\n    if ( this.isFinished() )\n    {\n      this.finish();\n    }\n\n    return ignore;\n  }\n\n});\n\neventize( Transaction.prototype );\n","\nfunction Operation()\n{\n}\n\naddMethods( Operation.prototype,\n{\n  reset: function(model, cascade)\n  {\n    this.model = model;\n    this.cascade = isNumber( cascade ) ? cascade : Rekord.Cascade.All;\n    this.db = model.$db;\n    this.next = null;\n    this.finished = false;\n  },\n\n  canCascade: function(cascade)\n  {\n    var expected = cascade || this.cascading;\n    var actual = this.cascade;\n\n    return (expected & actual) !== 0;\n  },\n\n  notCascade: function(expected)\n  {\n    var actual = this.cascade;\n\n    return (expected & actual) === 0;\n  },\n\n  queue: function(operation)\n  {\n    if ( this.next && !operation.interrupts )\n    {\n      this.next.queue( operation );\n    }\n    else\n    {\n      this.next = operation;\n    }\n  },\n\n  tryNext: function(OperationType)\n  {\n    var setNext = !this.next;\n\n    if ( setNext )\n    {\n      this.next = new OperationType( this.model, this.cascade );\n    }\n\n    return setNext;\n  },\n\n  insertNext: function(OperationType)\n  {\n    var op = new OperationType( this.model, this.cascade );\n\n    op.next = this.next;\n    this.next = op;\n  },\n\n  execute: function()\n  {\n    this.db.pendingOperations++;\n\n    this.run( this.db, this.model );\n  },\n\n  run: function(db, model)\n  {\n    throw 'Operation.run Not implemented';\n  },\n\n  finish: function()\n  {\n    if ( !this.finished )\n    {\n      this.finished = true;\n\n      if ( this.model.$operation = this.next )\n      {\n        this.next.execute();\n      }\n\n      this.db.pendingOperations--;\n\n      if ( this.db.pendingOperations === 0 )\n      {\n        this.db.onOperationRest();\n      }\n    }\n\n    return this;\n  },\n\n  success: function()\n  {\n    return bind( this, this.handleSuccess );\n  },\n\n  handleSuccess: function()\n  {\n    this.onSuccess.apply( this, arguments );\n    this.finish();\n  },\n\n  onSuccess: function()\n  {\n\n  },\n\n  failure: function()\n  {\n    return bind( this, this.handleFailure );\n  },\n\n  handleFailure: function()\n  {\n    this.onFailure.apply( this, arguments );\n    this.finish();\n  },\n\n  onFailure: function()\n  {\n\n  }\n\n});\n","function GetLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'GetLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() && db.cache === Rekord.Cache.All )\n    {\n      db.store.get( model.$key(), this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.GET_LOCAL_SKIPPED, model );\n\n      model.$trigger( Model.Events.LocalGet, [model] );\n\n      this.insertNext( GetRemote );\n      this.finish();\n    }\n  },\n\n  onSuccess: function(key, encoded)\n  {\n    var model = this.model;\n\n    if ( isObject( encoded ) )\n    {\n      model.$set( encoded );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, encoded );\n\n    model.$trigger( Model.Events.LocalGet, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted() )\n    {\n      this.insertNext( GetRemote );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_LOCAL, model, e );\n\n    model.$trigger( Model.Events.LocalGetFailure, [model] );\n\n    if ( this.canCascade( Rekord.Cascade.Rest ) && !model.$isDeleted()  )\n    {\n      this.insertNext( GetRemote );\n    }\n  }\n\n});\n","function GetRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, GetRemote,\n{\n\n  cascading: Rekord.Cascade.Rest,\n\n  interrupts: false,\n\n  type: 'GetRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model] );\n\n      this.finish();\n    }\n    else if ( this.canCascade() )\n    {\n      db.rest.get( model, this.success(), this.failure() );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGet, [model] );\n\n      this.finish();\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    if ( isObject( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model, true );\n    }\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE, model, data );\n\n    model.$trigger( Model.Events.RemoteGet, [model] );\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.GET_REMOTE_ERROR, model, response, status );\n\n    if ( status === 0 )\n    {\n      model.$trigger( Model.Events.RemoteGetOffline, [model, response] );\n    }\n    else\n    {\n      model.$trigger( Model.Events.RemoteGetFailure, [model, response] );\n    }\n  }\n\n});\n","function RemoveCache(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveCache,\n{\n\n  cascading: Rekord.Cascade.None,\n\n  interrupts: true,\n\n  type: 'RemoveCache',\n\n  run: function(db, model)\n  {\n    if ( db.cache == Rekord.Cache.None )\n    {\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  }\n\n});\n","function RemoveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveLocal',\n\n  run: function(db, model)\n  {\n    model.$status = Model.Status.RemovePending;\n\n    if ( db.cache === Rekord.Cache.None || !model.$local || !this.canCascade() )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_NONE, model );\n\n      model.$trigger( Model.Events.LocalRemove, [model] );\n\n      this.insertNext( RemoveRemote );\n      this.finish();\n    }\n    else if ( model.$saved )\n    {\n      model.$local.$status = model.$status;\n\n      db.store.put( model.$key(), model.$local, this.success(), this.failure() );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_UNSAVED, model );\n\n      db.store.remove( model.$key(), this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL, model );\n\n    model.$trigger( Model.Events.LocalRemove, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_LOCAL_ERROR, model, e );\n\n    model.$trigger( Model.Events.LocalRemoveFailure, [model] );\n\n    if ( model.$saved && this.canCascade( Rekord.Cascade.Remote ) )\n    {\n      model.$addOperation( RemoveRemote, this.cascade );\n    }\n  }\n\n});\n","function RemoveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: true,\n\n  type: 'RemoveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n\n    model.$status = Model.Status.RemovePending;\n\n    db.removeFromModels( model );\n\n    if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      this.finishRemove();\n      this.finish();\n    }\n    else\n    {\n      db.store.remove( key, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function()\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function()\n  {\n    this.finishRemove();\n  },\n\n  finishRemove: function()\n  {\n    var model = this.model;\n\n    model.$status = Model.Status.Removed;\n\n    delete model.$local;\n    delete model.$saving;\n    delete model.$publish;\n    delete model.$saved;\n  }\n\n});\n","function RemoveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, RemoveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: true,\n\n  type: 'RemoveRemote',\n\n  run: function(db, model)\n  {\n    if ( this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveRemove();\n\n      model.$trigger( Model.Events.RemoteRemove, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.RemovePending;\n\n      db.rest.remove( model, this.success(), this.failure() );\n    }\n  },\n\n  onSuccess: function(data)\n  {\n    this.finishRemove();\n  },\n\n  onFailure: function(response, status)\n  {\n    var model = this.model;\n    var key = model.$key();\n\n    if ( status === 404 || status === 410 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_MISSING, model, key );\n\n      this.finishRemove();\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.REMOVE_ERROR, model, status, key, response );\n\n      model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n    }\n    else\n    {\n      // Looks like we're offline!\n      Rekord.checkNetworkStatus();\n\n      // If we are offline, wait until we're online again to resume the delete\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteRemoveOffline, [model, response] );\n      }\n      else\n      {\n        model.$trigger( Model.Events.RemoteRemoveFailure, [model, response] );\n      }\n\n      Rekord.debug( Rekord.Debugs.REMOVE_OFFLINE, model, response );\n    }\n  },\n\n  finishRemove: function()\n  {\n    var db = this.db;\n    var model = this.model;\n    var key = model.$key();\n\n    Rekord.debug( Rekord.Debugs.REMOVE_REMOTE, model, key );\n\n    // Successfully removed!\n    model.$status = Model.Status.Removed;\n\n    // Successfully Removed!\n    model.$trigger( Model.Events.RemoteRemove, [model] );\n\n    // Remove from local storage now\n    this.insertNext( RemoveNow );\n\n    // Remove it live!\n    this.liveRemove();\n\n    // Remove the model reference for good!\n    delete db.all[ key ];\n  },\n\n  liveRemove: function()\n  {\n    if ( this.canCascade( Rekord.Cascade.Live ) )\n    {\n      var db = this.db;\n      var model = this.model;\n      var key = model.$key();\n\n      // Publish REMOVE\n      Rekord.debug( Rekord.Debugs.REMOVE_PUBLISH, model, key );\n\n      db.live.remove( model );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.REMOVE_RESUME, model );\n\n    model.$addOperation( RemoveRemote );\n  }\n\n});\n","function SaveLocal(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveLocal,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveLocal',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_LOCAL_DELETED, model );\n\n      model.$trigger( Model.Events.LocalSaveFailure, [model] );\n\n      this.finish();\n    }\n    else if ( db.cache === Rekord.Cache.None || !this.canCascade() )\n    {\n      if ( this.canCascade( Rekord.Cascade.Remote ) )\n      {\n        if ( this.tryNext( SaveRemote ) )\n        {\n          this.markSaving( db, model );\n        }\n      }\n\n      model.$trigger( Model.Events.LocalSave, [model] );\n\n      this.finish();\n    }\n    else\n    {\n      var key = model.$key();\n      var local = model.$toJSON( false );\n\n      this.markSaving( db, model );\n\n      if ( model.$local )\n      {\n        transfer( local, model.$local );\n      }\n      else\n      {\n        model.$local = local;\n\n        if ( model.$saved )\n        {\n          model.$local.$saved = model.$saved;\n        }\n      }\n\n      model.$local.$status = model.$status;\n      model.$local.$saving = model.$saving;\n      model.$local.$publish = model.$publish;\n\n      db.store.put( key, model.$local, this.success(), this.failure() );\n    }\n  },\n\n  markSaving: function(db, model)\n  {\n    var remote = model.$toJSON( true );\n    var changes = model.$getChanges( remote );\n\n    var saving = db.fullSave ? remote : changes;\n    var publish = db.fullPublish ? remote : changes;\n\n    model.$status = Model.Status.SavePending;\n    model.$saving = saving;\n    model.$publish = publish;\n  },\n\n  clearLocal: function(model)\n  {\n    model.$status = Model.Status.Synced;\n\n    model.$local.$status = model.$status;\n\n    delete model.$local.$saving;\n    delete model.$local.$publish;\n\n    this.insertNext( SaveNow );\n  },\n\n  onSuccess: function(key, encoded, previousValue)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL, model );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSave, [model] );\n  },\n\n  onFailure: function(e)\n  {\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_LOCAL_ERROR, model, e );\n\n    if ( this.cascade )\n    {\n      this.tryNext( SaveRemote );\n    }\n    else\n    {\n      this.clearLocal( model );\n    }\n\n    model.$trigger( Model.Events.LocalSaveFailure, [model] );\n  }\n\n});\n","function SaveNow(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveNow,\n{\n\n  cascading: Rekord.Cascade.Local,\n\n  interrupts: false,\n\n  type: 'SaveNow',\n\n  run: function(db, model)\n  {\n    var key = model.$key();\n    var local = model.$local;\n\n    if ( db.cache === Rekord.Cache.All && key && local && this.canCascade() )\n    {\n      db.store.put( key, local, this.success(), this.failure() );\n    }\n    else\n    {\n      this.finish();\n    }\n  }\n\n});\n","function SaveRemote(model, cascade)\n{\n  this.reset( model, cascade );\n}\n\nextend( Operation, SaveRemote,\n{\n\n  cascading: Rekord.Cascade.Remote,\n\n  interrupts: false,\n\n  type: 'SaveRemote',\n\n  run: function(db, model)\n  {\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, null );\n      this.finish();\n    }\n    else if ( !model.$isDependentsSaved( this.tryAgain, this ) )\n    {\n      this.finish();\n    }\n    else if ( !db.hasData( model.$saving ) || this.notCascade( Rekord.Cascade.Rest ) )\n    {\n      this.liveSave();\n      this.markSynced( model, true, Model.Events.RemoteSave, null );\n      this.finish();\n    }\n    else\n    {\n      model.$status = Model.Status.SavePending;\n\n      if ( model.$saved )\n      {\n        db.rest.update( model, model.$saving, this.success(), this.failure() );\n      }\n      else\n      {\n        db.rest.create( model, model.$saving, this.success(), this.failure() );\n      }\n    }\n  },\n\n  onSuccess: function(response)\n  {\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    Rekord.debug( Rekord.Debugs.SAVE_REMOTE, model );\n\n    this.handleData( data );\n  },\n\n  onFailure: function(response, status)\n  {\n    var operation = this;\n    var db = this.db;\n    var data = db.resolveModel( response );\n    var model = this.model;\n\n    // A non-zero status means a real problem occurred\n    if ( status === 409 ) // 409 Conflict\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_CONFLICT, model, data );\n\n      this.handleData( data );\n    }\n    else if ( status === 410 || status === 404 ) // 410 Gone, 404 Not Found\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_UPDATE_FAIL, model );\n\n      this.insertNext( RemoveNow );\n\n      model.$trigger( Model.Events.RemoteSaveFailure, [model, response] );\n    }\n    else if ( status !== 0 )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_ERROR, model, status );\n\n      this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n    }\n    else\n    {\n      // Check the network status right now\n      Rekord.checkNetworkStatus();\n\n      // If not online for sure, try saving once online again\n      if (!Rekord.online)\n      {\n        Rekord.once( Rekord.Events.Online, this.handleOnline, this );\n\n        model.$trigger( Model.Events.RemoteSaveOffline, [model, response] );\n      }\n      else\n      {\n        this.markSynced( model, true, Model.Events.RemoteSaveFailure, response );\n      }\n\n      Rekord.debug( Rekord.Debugs.SAVE_OFFLINE, model, response );\n    }\n  },\n\n  markSynced: function(model, saveNow, eventType, response)\n  {\n    model.$status = Model.Status.Synced;\n\n    this.clearPending( model );\n\n    if ( saveNow )\n    {\n      this.insertNext( SaveNow );\n    }\n\n    if ( eventType )\n    {\n      model.$trigger( eventType, [model, response] );\n    }\n  },\n\n  clearPending: function(model)\n  {\n    delete model.$saving;\n    delete model.$publish;\n\n    if ( model.$local )\n    {\n      model.$local.$status = model.$status;\n\n      delete model.$local.$saving;\n      delete model.$local.$publish;\n    }\n  },\n\n  handleData: function(data)\n  {\n    var db = this.db;\n    var model = this.model;\n    var saving = model.$saving;\n\n    // Check deleted one more time before updating model.\n    if ( model.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_REMOTE_DELETED, model, data );\n\n      return this.clearPending( model );\n    }\n\n    Rekord.debug( Rekord.Debugs.SAVE_VALUES, model, saving );\n\n    // If the model hasn't been saved before - create the record where the\n    // local and model point to the same object.\n    if ( !model.$saved )\n    {\n      model.$saved = model.$local ? (model.$local.$saved = {}) : {};\n    }\n\n    // Tranfer all saved fields into the saved object\n    transfer( saving, model.$saved );\n\n    // Update the model with the return data\n    if ( !isEmpty( data ) )\n    {\n      db.putRemoteData( data, model.$key(), model );\n    }\n\n    this.liveSave();\n    this.markSynced( model, false, Model.Events.RemoteSave, null );\n\n    if ( db.cache === Rekord.Cache.Pending )\n    {\n      this.insertNext( RemoveCache );\n    }\n    else\n    {\n      this.insertNext( SaveNow );\n    }\n  },\n\n  liveSave: function()\n  {\n    var db = this.db;\n    var model = this.model;\n\n    if ( this.canCascade( Rekord.Cascade.Live ) && db.hasData( model.$publish ) )\n    {\n      // Publish saved data to everyone else\n      Rekord.debug( Rekord.Debugs.SAVE_PUBLISH, model, model.$publish );\n\n      db.live.save( model, model.$publish );\n    }\n  },\n\n  handleOnline: function()\n  {\n    var model = this.model;\n\n    if ( model.$status === Model.Status.SavePending )\n    {\n      model.$addOperation( SaveRemote, this.cascade );\n\n      Rekord.debug( Rekord.Debugs.SAVE_RESUME, model );\n    }\n  },\n\n  tryAgain: function()\n  {\n    var model = this.model;\n\n    model.$addOperation( SaveRemote, this.cascade );\n  }\n\n});\n","\nfunction Relation()\n{\n\n}\n\nRekord.Relations = {};\n\nRelation.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\naddMethods( Relation.prototype,\n{\n\n  debugQuery: null,\n  debugQueryResults: null,\n\n  getDefaults: function(database, field, options)\n  {\n    return Relation.Defaults;\n  },\n\n  /**\n   * Initializes this relation with the given database, field, and options.\n   *\n   * @param  {Rekord.Database} database [description]\n   * @param  {String} field    [description]\n   * @param  {Object} options  [description]\n   */\n  init: function(database, field, options)\n  {\n    applyOptions( this, options, this.getDefaults( database, field, options ) );\n\n    this.database = database;\n    this.name = field;\n    this.options = options;\n    this.initialized = false;\n    this.property = this.property || (indexOf( database.fields, this.name ) !== false);\n    this.discriminated = !isEmpty( this.discriminators );\n\n    if ( this.discriminated )\n    {\n      addMethods( this, Polymorphic );\n    }\n\n    this.setReferences( database, field, options );\n  },\n\n  setReferences: function(database, field, options)\n  {\n    if ( !isRekord( this.model ) )\n    {\n      Rekord.get( this.model, this.setModelReference( database, field, options ), this );\n    }\n    else\n    {\n      this.onInitialized( database, field, options );\n    }\n  },\n\n  /**\n   *\n   */\n  setModelReference: function(database, field, options)\n  {\n    return function(rekord)\n    {\n      this.model = rekord;\n\n      this.onInitialized( database, field, options );\n    };\n  },\n\n  /**\n   *\n   */\n  onInitialized: function(database, fields, options)\n  {\n\n  },\n\n  finishInitialization: function()\n  {\n    this.initialized = true;\n    this.load.open();\n  },\n\n  /**\n   * Loads the model.$relation variable with what is necessary to get, set,\n   * relate, and unrelate models. If property is true, look at model[ name ]\n   * to load models/keys. If it contains values that don't exist or aren't\n   * actually related\n   *\n   * @param  {Rekord.Model} model [description]\n   */\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n\n  }),\n\n  set: function(model, input, remoteData)\n  {\n\n  },\n\n  relate: function(model, input, remoteData)\n  {\n\n  },\n\n  unrelate: function(model, input)\n  {\n\n  },\n\n  isRelated: function(model, input)\n  {\n\n  },\n\n  preClone: function(model, clone, properties)\n  {\n\n  },\n\n  postClone: function(model, clone, properties)\n  {\n\n  },\n\n  get: function(model)\n  {\n    return model.$relations[ this.name ].related;\n  },\n\n  encode: function(model, out, forSaving)\n  {\n    var relation = model.$relations[ this.name ];\n    var mode = forSaving ? this.save : this.store;\n\n    if ( relation && mode )\n    {\n      var related = relation.related;\n\n      if ( isArray( related ) )\n      {\n        out[ this.name ] = this.getStoredArray( related, mode );\n      }\n      else // if ( isObject( related ) )\n      {\n        out[ this.name ] = this.getStored( related, mode );\n      }\n    }\n  },\n\n  ready: function(callback)\n  {\n    this.model.Database.ready( callback, this );\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    this.model.Database.on( Database.Events.ModelAdded, callback, this );\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = this.model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    Rekord.debug( this.debugQuery, this, model, search, queryOption, query, queryData );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      for (var i = 0; i < results.length; i++)\n      {\n        this.relate( model, results[ i ], true );\n      }\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return new RelationCollection( this.model.Database, model, this );\n  },\n\n  createCollection: function()\n  {\n    return new ModelCollection( this.model.Database );\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    return this.model.Database.parseModel( input, remoteData );\n  },\n\n  grabInitial: function( model, fields )\n  {\n    if ( hasFields( model, fields, isValue ) )\n    {\n      return pull( model, fields );\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    this.model.Database.grabModel( input, callback, this, remoteData );\n  },\n\n  grabModels: function(relation, initial, callback, remoteData)\n  {\n    var db = this.model.Database;\n\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n      var key = db.buildKeyFromInput( input );\n\n      relation.pending[ key ] = true;\n\n      db.grabModel( input, callback, this, remoteData );\n    }\n  },\n\n  setProperty: function(relation)\n  {\n    if ( this.property )\n    {\n      var model = relation.parent;\n      var propertyName = this.name;\n      var applied = !!relation.dynamicSet;\n\n      if ( !applied && this.dynamic && Object.defineProperty )\n      {\n        var relator = this;\n\n        Object.defineProperty( model, propertyName,\n        {\n          enumerable: true,\n\n          set: function(input)\n          {\n            relator.set( model, input );\n          },\n          get: function()\n          {\n            return relation.related;\n          }\n        });\n\n        applied = relation.dynamicSet = true;\n      }\n\n      if ( !applied )\n      {\n        model[ propertyName ] = relation.related;\n      }\n\n      if ( relation.lastRelated !== relation.related )\n      {\n        relation.lastRelated = relation.related;\n\n        model.$trigger( Model.Events.RelationUpdate, [this, relation] );\n      }\n    }\n  },\n\n  isModelArray: function(input)\n  {\n    if ( !isArray( input ) )\n    {\n      return false;\n    }\n\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.key;\n\n    if ( !isArray( relatedKey ) )\n    {\n      return true;\n    }\n\n    if ( relatedKey.length !== input.length )\n    {\n      return true;\n    }\n\n    for ( var i = 0; i < input.length; i++ )\n    {\n      if ( !isNumber( input[ i ] ) && !isString( input[ i ] ) )\n      {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData, cascade)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save( cascade );\n    }\n\n    return changes;\n  },\n\n  clearFieldsReturnChanges: function(target, targetFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) )\n    {\n      if ( target[ targetFields ] )\n      {\n        target[ targetFields ] = null;\n        changes = true;\n      }\n    }\n    else // isArray ( targetFields )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n\n        if ( target[ targetField ] )\n        {\n          target[ targetField ] = null;\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  updateFieldsReturnChanges: function(target, targetFields, source, sourceFields)\n  {\n    var changes = false;\n\n    if ( isString( targetFields ) ) // && isString( sourceFields )\n    {\n      var targetValue = target[ targetFields ];\n      var sourceValue = source[ sourceFields ];\n\n      if ( !equals( targetValue, sourceValue ) )\n      {\n        target[ targetFields ] = sourceValue;\n        changes = true;\n      }\n    }\n    else // if ( isArray( targetFields ) && isArray( sourceFields ) )\n    {\n      for (var i = 0; i < targetFields.length; i++)\n      {\n        var targetField = targetFields[ i ];\n        var targetValue = target[ targetField ];\n        var sourceField = sourceFields[ i ];\n        var sourceValue = source[ sourceField ];\n\n        if ( !equals( targetValue, sourceValue ) )\n        {\n          target[ targetField ] = copy( sourceValue );\n          changes = true;\n        }\n      }\n    }\n\n    return changes;\n  },\n\n  getStoredArray: function(relateds, mode)\n  {\n    if ( !mode )\n    {\n      return null;\n    }\n\n    var stored = [];\n\n    for (var i = 0; i < relateds.length; i++)\n    {\n      var related = this.getStored( relateds[ i ], mode );\n\n      if ( related !== null )\n      {\n        stored.push( related );\n      }\n    }\n\n    return stored;\n  },\n\n  getStored: function(related, mode)\n  {\n    if ( related )\n    {\n      switch (mode)\n      {\n      case Rekord.Save.Model:\n        return related.$toJSON( true );\n\n      case Rekord.Store.Model:\n        if ( related.$local )\n        {\n          return related.$local;\n        }\n        else\n        {\n          var local = related.$toJSON( false );\n\n          if ( related.$saved )\n          {\n            local.$saved = related.$saved;\n          }\n\n          return local;\n        }\n\n      case Rekord.Save.Key:\n      case Rekord.Store.Key:\n        return related.$key();\n\n      case Rekord.Save.Keys:\n      case Rekord.Store.Keys:\n        return related.$keys();\n\n      }\n    }\n\n    return null;\n  }\n\n});\n","function RelationSingle()\n{\n}\n\n\nextend( Relation, RelationSingle,\n{\n\n  debugInit: null,\n  debugClearModel: null,\n  debugSetModel: null,\n  debugLoaded: null,\n  debugClearKey: null,\n  debugUpdateKey: null,\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.local = this.local || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    Rekord.debug( this.debugInit, this );\n\n    this.finishInitialization();\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var related = this.parseModel( input, remoteData );\n\n      if ( related && !relation.isRelated( related ) )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input, remoteData );\n\n    if ( related )\n    {\n      if ( relation.related !== related )\n      {\n        this.clearModel( relation );\n        this.setRelated( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    if ( !related || relation.related === related )\n    {\n      this.clearRelated( relation, remoteData );\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var related = this.parseModel( input );\n\n    return related === relation.related;\n  },\n\n  setRelated: function(relation, related, remoteData)\n  {\n    if ( !related.$isDeleted() )\n    {\n      this.setModel( relation, related );\n      this.updateForeignKey( relation.parent, related, remoteData );\n      this.setProperty( relation );\n    }\n  },\n\n  clearRelated: function(relation, remoteData)\n  {\n    if ( remoteData )\n    {\n      var related = relation.related;\n\n      if ( related && related.$isPending() )\n      {\n        return;\n      }\n    }\n\n    this.clearModel( relation );\n    this.clearForeignKey( relation.parent );\n    this.setProperty( relation );\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      if (relation.onSaved) related.$off( Model.Events.Saved, relation.onSaved );\n      if (relation.onRemoved) related.$off( Model.Events.Removed, relation.onRemoved );\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  },\n\n  setModel: function(relation, related)\n  {\n    if (relation.onSaved) related.$on( Model.Events.Saved, relation.onSaved, this );\n    if (relation.onRemoved) related.$on( Model.Events.Removed, relation.onRemoved, this );\n\n    relation.related = related;\n    relation.dirty = true;\n    relation.loaded = true;\n\n    relation.parent.$dependents[ related.$uid() ] = related;\n\n    Rekord.debug( this.debugSetModel, this, relation );\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function(related)\n    {\n      var model = relation.parent;\n\n      Rekord.debug( this.debugLoaded, this, model, relation, related );\n\n      if ( relation.loaded === false )\n      {\n        if ( related && !related.$isDeleted() )\n        {\n          this.setModel( relation, related, remoteData );\n          this.updateForeignKey( model, related, remoteData );\n        }\n        else\n        {\n          if ( this.query )\n          {\n            relation.query = this.executeQuery( model );\n          }\n          else if ( !this.preserve )\n          {\n            this.clearForeignKey( model, remoteData );\n          }\n        }\n\n        relation.loaded = true;\n\n        this.setProperty( relation );\n      }\n    };\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var local = this.local;\n\n    return function hasForeignKey(related)\n    {\n      return propsMatch( model, local, related, related.$db.key );\n    };\n  },\n\n  clearForeignKey: function(model, remoteData)\n  {\n    var local = this.local;\n\n    Rekord.debug( this.debugClearKey, this, model, local );\n\n    this.clearFields( model, local, remoteData );\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var local = this.local;\n    var foreign = related.$db.key;\n\n    Rekord.debug( this.debugUpdateKey, this, model, local, related, foreign );\n\n    this.updateFields( model, local, related, foreign, remoteData );\n  }\n\n});\n","function RelationMultiple()\n{\n}\n\n\nextend( Relation, RelationMultiple,\n{\n\n  debugAutoSave: null,\n  debugInitialGrabbed: null,\n  debugSort: null,\n\n  handleExecuteQuery: function(model)\n  {\n    return function onExecuteQuery(search)\n    {\n      var relation = model.$relations[ this.name ];\n      var results = search.$results;\n\n      Rekord.debug( this.debugQueryResults, this, model, search );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < results.length; i++)\n        {\n          this.addModel( relation, results[ i ], true );\n        }\n      });\n\n      this.sort( relation );\n      this.checkSave( relation, true );\n    };\n  },\n\n  bulk: function(relation, callback, remoteData)\n  {\n    relation.delaySorting = true;\n    relation.delaySaving = true;\n\n    callback.apply( this );\n\n    relation.delaySorting = false;\n    relation.delaySaving = false;\n\n    this.sort( relation );\n    this.checkSave( relation, remoteData );\n  },\n\n  set: function(model, input, remoteData)\n  {\n    if ( isEmpty( input ) )\n    {\n      this.unrelate( model, undefined, remoteData );\n    }\n    else\n    {\n      var relation = model.$relations[ this.name ];\n      var existing = relation.related;\n      var given = this.createCollection();\n\n      if ( this.isModelArray( input ) )\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            given.add( related );\n          }\n        }\n      }\n      else\n      {\n        var related = this.parseModel( input, remoteData );\n\n        if ( related )\n        {\n          given.add( related );\n        }\n      }\n\n      var removing = existing.subtract( given );\n      var adding = given.subtract( existing );\n\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < adding.length; i++)\n        {\n          this.addModel( relation, adding[ i ], remoteData );\n        }\n\n        for (var i = 0; i < removing.length; i++)\n        {\n          this.removeModel( relation, removing[ i ], remoteData );\n        }\n\n      }, remoteData);\n    }\n  },\n\n  relate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ], remoteData );\n\n          if ( related )\n          {\n            this.addModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input, remoteData );\n\n      if ( related )\n      {\n        this.addModel( relation, related, remoteData );\n      }\n    }\n  },\n\n  unrelate: function(model, input, remoteData)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( this.isModelArray( input ) )\n    {\n      this.bulk( relation, function()\n      {\n        for (var i = 0; i < input.length; i++)\n        {\n          var related = this.parseModel( input[ i ] );\n\n          if ( related )\n          {\n            this.removeModel( relation, related, remoteData );\n          }\n        }\n      });\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      if ( related )\n      {\n        this.removeModel( relation, related, remoteData );\n      }\n    }\n    else\n    {\n      var all = relation.related;\n\n      this.bulk( relation, function()\n      {\n        for (var i = all.length - 1; i >= 0; i--)\n        {\n          this.removeModel( relation, all[ i ], remoteData );\n        }\n      });\n    }\n  },\n\n  isRelated: function(model, input)\n  {\n    var relation = model.$relations[ this.name ];\n    var existing = relation.related;\n\n    if ( this.isModelArray( input ) )\n    {\n      for (var i = 0; i < input.length; i++)\n      {\n        var related = this.parseModel( input[ i ] );\n\n        if ( related && !existing.has( related.$key() ) )\n        {\n          return false;\n        }\n      }\n\n      return input.length > 0;\n    }\n    else if ( isValue( input ) )\n    {\n      var related = this.parseModel( input );\n\n      return related && existing.has( related.$key() );\n    }\n\n    return false;\n  },\n\n  canRemoveRelated: function(related, remoteData)\n  {\n    return !remoteData || !related.$isPending();\n  },\n\n  checkSave: function(relation, remoteData)\n  {\n    if ( !relation.delaySaving && !remoteData && relation.parent.$exists() )\n    {\n      if ( this.store === Rekord.Store.Model || this.save === Rekord.Save.Model )\n      {\n        Rekord.debug( this.debugAutoSave, this, relation );\n\n        relation.parent.$save();\n      }\n    }\n  },\n\n  handleModel: function(relation, remoteData)\n  {\n    return function (related)\n    {\n      var pending = relation.pending;\n      var key = related.$key();\n\n      if ( key in pending )\n      {\n        Rekord.debug( this.debugInitialGrabbed, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n\n        delete pending[ key ];\n      }\n    };\n  },\n\n  sort: function(relation)\n  {\n    var related = relation.related;\n\n    if ( !relation.delaySorting )\n    {\n      Rekord.debug( this.debugSort, this, relation );\n\n      related.sort( this.comparator );\n\n      relation.parent.$trigger( Model.Events.RelationUpdate, [this, relation] );\n    }\n  }\n\n});\n","function BelongsTo()\n{\n}\n\nRekord.Relations.belongsTo = BelongsTo;\n\nBelongsTo.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.Local,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, BelongsTo,\n{\n\n  type: 'belongsTo',\n\n  debugInit:          Rekord.Debugs.BELONGSTO_INIT,\n  debugClearModel:    Rekord.Debugs.BELONGSTO_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.BELONGSTO_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.BELONGSTO_LOADED,\n  debugClearKey:      Rekord.Debugs.BELONGSTO_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.BELONGSTO_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.BELONGSTO_QUERY,\n  debugQueryResults:  Rekord.Debugs.BELONGSTO_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return BelongsTo.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_REMOVE, this, model, relation );\n\n        model.$remove( this.cascade );\n        this.clearRelated( relation );\n      },\n\n      onSaved: function()\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_NINJA_SAVE, this, model, relation );\n\n        if ( !relation.isRelated( relation.related ) )\n        {\n          model.$remove( this.cascade );\n          this.clearRelated( relation );\n        }\n      }\n    };\n\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n    model.$on( Model.Events.KeyUpdate, this.onKeyUpdate, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      Rekord.debug( Rekord.Debugs.BELONGSTO_POSTREMOVE, this, model, relation );\n\n      this.clearModel( relation );\n      this.setProperty( relation );\n    }\n  },\n\n  onKeyUpdate: function(model, related, modelFields, relatedFields)\n  {\n    if ( this.local === modelFields )\n    {\n      var relation = model.$relations[ this.name ];\n\n      if ( relation && related !== relation.related )\n      {\n        this.clearModel( relation );\n        this.setModel( relation, related );\n        this.setProperty( relation );\n      }\n    }\n  }\n\n});\n","function HasOne()\n{\n}\n\nRekord.Relations.hasOne = HasOne;\n\nHasOne.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  preserve:             true,\n  dynamic:              false,\n  local:                null,\n  cascade:              Rekord.Cascade.All,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationSingle, HasOne,\n{\n\n  type: 'hasOne',\n\n  debugInit:          Rekord.Debugs.HASONE_INIT,\n  debugClearModel:    Rekord.Debugs.HASONE_CLEAR_MODEL,\n  debugSetModel:      Rekord.Debugs.HASONE_SET_MODEL,\n  debugLoaded:        Rekord.Debugs.HASONE_LOADED,\n  debugClearKey:      Rekord.Debugs.HASONE_CLEAR_KEY,\n  debugUpdateKey:     Rekord.Debugs.HASONE_UPDATE_KEY,\n  debugQuery:         Rekord.Debugs.HASONE_QUERY,\n  debugQueryResults:  Rekord.Debugs.HASONE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasOne.Defaults;\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      related: null,\n      loaded: false,\n      dirty: false,\n      saving: false,\n\n      onRemoved: function()\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_NINJA_REMOVE, this, model, relation );\n\n        this.clearRelated( relation );\n      }\n    };\n\n    model.$on( Model.Events.PreSave, this.preSave, this );\n    model.$on( Model.Events.PostRemove, this.postRemove, this );\n\n    if ( isEmpty( initialValue ) )\n    {\n      initialValue = this.grabInitial( model, this.local );\n\n      if ( initialValue )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_INITIAL_PULLED, this, model, initialValue );\n      }\n    }\n\n    if ( !isEmpty( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASONE_INITIAL, this, model, initialValue );\n\n      this.grabModel( initialValue, this.handleModel( relation ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relatedClone = related.$clone( properties );\n\n      this.updateFieldsReturnChanges( clone, this.local, relatedClone, relatedClone.$db.key );\n\n      clone[ this.name ] = relatedClone;\n    }\n  },\n\n  preSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && relation.related )\n    {\n      var related = relation.related;\n\n      if ( relation.dirty || related.$hasChanges() )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_PRESAVE, this, model, relation );\n\n        relation.saving = true;\n\n        related.$save();\n\n        relation.saving = false;\n        relation.dirty = false;\n      }\n    }\n  },\n\n  postRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation )\n    {\n      if ( this.cascade )\n      {\n        Rekord.debug( Rekord.Debugs.HASONE_POSTREMOVE, this, model, relation );\n\n        this.clearModel( relation );\n      }\n    }\n  },\n\n  clearModel: function(relation)\n  {\n    var related = relation.related;\n\n    if ( related )\n    {\n      Rekord.debug( this.debugClearModel, this, relation );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n\n      if ( this.cascade && !related.$isDeleted() )\n      {\n        related.$remove( this.cascade );\n      }\n\n      relation.related = null;\n      relation.dirty = true;\n      relation.loaded = true;\n\n      delete relation.parent.$dependents[ related.$uid() ];\n    }\n  }\n\n});\n","function HasMany()\n{\n}\n\nRekord.Relations.hasMany = HasMany;\n\nHasMany.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.Local,\n  cascadeSave:          Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasMany,\n{\n\n  type: 'hasMany',\n\n  debugAutoSave:        Rekord.Debugs.HASMANY_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANY_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANY_SORT,\n  debugQuery:           Rekord.Debugs.HASMANY_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANY_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasMany.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.foreign = this.foreign || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASMANY_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      isRelated: this.isRelatedFactory( model ),\n      related: this.createRelationCollection( model ),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_SAVE, relator, model, this, relation );\n\n        if ( !relation.isRelated( this ) )\n        {\n          relator.removeModel( relation, this );\n        }\n        else\n        {\n          relator.sort( relation );\n          relator.checkSave( relation );\n        }\n      }\n\n    };\n\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    this.listenToModelAdded( this.handleModelAdded( relation ) );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_INITIAL_PULLED, this, model, relation );\n\n      this.ready( this.handleLazyLoad( relation ) );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  postClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      var relateds = [];\n\n      this.updateFieldsReturnChanges( properties, this.foreign, clone, model.$db.key );\n\n      properties[ this.foreign ] = clone[ model.$db.key ];\n\n      for (var i = 0; i < related.length; i++)\n      {\n        relateds.push( related[ i ].$clone( properties ) );\n      }\n\n      clone[ this.name ] = relateds;\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_POSTSAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSave );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var models = relation.related;\n\n        for (var i = models.length - 1; i >= 0; i--)\n        {\n          var related = models[ i ];\n\n          related.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (related, remoteData)\n    {\n      if ( relation.isRelated( related ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANY_NINJA_ADD, this, relation, related );\n\n        this.addModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (relatedDatabase)\n    {\n      var related = relatedDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANY_LAZY_LOAD, this, relation, related );\n\n      if ( related.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < related.length; i++)\n          {\n            this.addModel( relation, related[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      related.$dependents[ model.$uid() ] = model;\n\n      this.updateForeignKey( model, related, remoteData );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      delete related.$dependents[ model.$uid() ];\n\n      if ( this.cascadeRemove )\n      {\n        related.$remove( this.cascadeRemove );\n      }\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  },\n\n  updateForeignKey: function(model, related, remoteData)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    this.updateFields( related, foreign, model, local, remoteData );\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = this.foreign;\n    var local = model.$db.key;\n\n    return function(related)\n    {\n      return propsMatch( related, foreign, model, local );\n    };\n  }\n\n});\n","function HasManyThrough()\n{\n}\n\nRekord.Relations.hasManyThrough = HasManyThrough;\n\nHasManyThrough.Defaults =\n{\n  model:                null,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 true,\n  property:             true,\n  dynamic:              false,\n  through:              undefined,\n  local:                null,\n  foreign:              null,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  cascadeRemove:        Rekord.Cascade.NoRest,\n  cascadeSave:          Rekord.Cascade.All,\n  cascadeSaveRelated:   Rekord.Cascade.None,\n  discriminator:        'discriminator',\n  discriminators:       {},\n  discriminatorToModel: {}\n};\n\nextend( RelationMultiple, HasManyThrough,\n{\n\n  type: 'hasManyThrough',\n\n  debugAutoSave:        Rekord.Debugs.HASMANYTHRU_AUTO_SAVE,\n  debugInitialGrabbed:  Rekord.Debugs.HASMANYTHRU_INITIAL_GRABBED,\n  debugSort:            Rekord.Debugs.HASMANYTHRU_SORT,\n  debugQuery:           Rekord.Debugs.HASMANYTHRU_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASMANYTHRU_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasManyThrough.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    if ( !this.discriminated )\n    {\n      var relatedDatabase = this.model.Database;\n\n      this.foreign = this.foreign || ( relatedDatabase.name + '_' + relatedDatabase.key );\n    }\n\n    this.local = this.local || ( database.name + '_' + database.key );\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    if ( !isRekord( options.through ) )\n    {\n      Rekord.get( options.through, this.setThrough, this );\n    }\n    else\n    {\n      this.setThrough( options.through );\n    }\n\n    Rekord.debug( Rekord.Debugs.HASMANYTHRU_INIT, this );\n  },\n\n  setThrough: function(through)\n  {\n    this.through = through;\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var that = this;\n    var throughDatabase = this.through.Database;\n\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      isRelated: this.isRelatedFactory( model ),\n      pending: {},\n      related: this.createRelationCollection( model ),\n      throughs: new Map(),\n      saving: false,\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_REMOVE, that, model, this, relation );\n\n        that.removeModel( relation, this );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        if ( relation.saving )\n        {\n          return;\n        }\n\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_SAVE, that, model, this, relation );\n\n        that.sort( relation );\n        that.checkSave( relation );\n      },\n\n      onThroughRemoved: function() // this = through removed\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_THRU_REMOVE, that, model, this, relation );\n\n        that.removeModelFromThrough( relation, this );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$on( Model.Events.PostSave, this.postSave, this );\n    model.$on( Model.Events.PreRemove, this.preRemove, this );\n\n    // When models are added to the related database, check if it's related to this model\n    throughDatabase.on( Database.Events.ModelAdded, this.handleModelAdded( relation ), this );\n\n    // If the model's initial value is an array, populate the relation from it!\n    if ( isArray( initialValue ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL, this, model, relation, initialValue );\n\n      this.grabModels( relation, initialValue, this.handleModel( relation, remoteData ), remoteData );\n    }\n    else if ( this.query )\n    {\n      relation.query = this.executeQuery( model );\n    }\n    else\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_INITIAL_PULLED, this, model, relation );\n\n      throughDatabase.ready( this.handleLazyLoad( relation ), this );\n    }\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  preClone: function(model, clone, properties)\n  {\n    var related = this.get( model );\n\n    if ( related )\n    {\n      clone[ this.name ] = related.slice();\n    }\n  },\n\n  postSave: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeSave )\n    {\n      var throughs = relation.throughs.values;\n\n      for (var i = 0; i < throughs.length; i++)\n      {\n        var through = throughs[ i ];\n\n        if ( !through.$isDeleted() && through.$hasChanges() )\n        {\n          through.$save( this.cascadeSave );\n        }\n      }\n    }\n\n    if ( relation && this.cascadeSaveRelated )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PRESAVE, this, model, relation );\n\n      relation.saving = true;\n      relation.delaySaving = true;\n\n      var models = relation.related;\n\n      for (var i = 0; i < models.length; i++)\n      {\n        var related = models[ i ];\n\n        if ( !related.$isDeleted() && related.$hasChanges() )\n        {\n          related.$save( this.cascadeSaveRelated );\n        }\n      }\n\n      relation.saving = false;\n      relation.delaySaving = false;\n    }\n  },\n\n  preRemove: function(model)\n  {\n    var relation = model.$relations[ this.name ];\n\n    if ( relation && this.cascadeRemove )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_PREREMOVE, this, model, relation );\n\n      this.bulk( relation, function()\n      {\n        var throughs = relation.throughs.values;\n\n        for (var i = 0; i < throughs.length; i++)\n        {\n          var through = throughs[ i ];\n\n          through.$remove( this.cascadeRemove );\n        }\n      });\n    }\n  },\n\n  handleModelAdded: function(relation)\n  {\n    return function (through, remoteData)\n    {\n      if ( relation.isRelated( through ) && !relation.throughs.has( through.$key() ) )\n      {\n        Rekord.debug( Rekord.Debugs.HASMANYTHRU_NINJA_ADD, this, relation, through );\n\n        this.addModelFromThrough( relation, through, remoteData );\n      }\n    };\n  },\n\n  handleLazyLoad: function(relation)\n  {\n    return function (throughDatabase)\n    {\n      var throughs = throughDatabase.filter( relation.isRelated );\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_LAZY_LOAD, this, relation, throughs );\n\n      if ( throughs.length )\n      {\n        this.bulk( relation, function()\n        {\n          for (var i = 0; i < throughs.length; i++)\n          {\n            this.addModelFromThrough( relation, throughs[ i ] );\n          }\n        });\n      }\n      else if ( this.query )\n      {\n        relation.query = this.executeQuery( relation.parent );\n      }\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var adding = this.finishAddModel( relation, related, remoteData );\n\n    if ( adding )\n    {\n      this.addThrough( relation, related, remoteData );\n    }\n\n    return adding;\n  },\n\n  addThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var throughKey = this.createThroughKey( relation, related );\n\n    throughDatabase.grabModel( throughKey, this.onAddThrough( relation, remoteData ), this, remoteData );\n  },\n\n  onAddThrough: function(relation, remoteData)\n  {\n    return function onAddThrough(through)\n    {\n      this.finishAddThrough( relation, through, remoteData );\n    };\n  },\n\n  addModelFromThrough: function(relation, through, remoteData)\n  {\n    if ( through.$isDeleted() )\n    {\n      return;\n    }\n\n    // TODO polymoprhic logic\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    relatedDatabase.grabModel( relatedKey, this.onAddModelFromThrough( relation, through, remoteData ), this, remoteData );\n  },\n\n  onAddModelFromThrough: function(relation, through, remoteData)\n  {\n    return function onAddModelFromThrough(related)\n    {\n      if ( related )\n      {\n        this.finishAddThrough( relation, through, remoteData );\n        this.finishAddModel( relation, related, remoteData );\n      }\n    };\n  },\n\n  finishAddThrough: function(relation, through, remoteData)\n  {\n    var model = relation.parent;\n    var throughs = relation.throughs;\n    var throughKey = through.$key();\n\n    if ( !throughs.has( throughKey ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_ADD, this, relation, through );\n\n      throughs.put( throughKey, through );\n\n      through.$on( Model.Events.Removed, relation.onThroughRemoved );\n\n      through.$dependents[ model.$uid() ] = model;\n\n      if ( !remoteData && this.cascadeSave )\n      {\n        if ( model.$isSaved() )\n        {\n          through.$save( this.cascadeSave );\n        }\n        else\n        {\n          through.$save( Rekord.Cascade.None );\n        }\n      }\n    }\n  },\n\n  finishAddModel: function(relation, related, remoteData)\n  {\n    var relateds = relation.related;\n    var relatedKey = related.$key();\n    var adding = !relateds.has( relatedKey );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_ADD, this, relation, related );\n\n      relateds.put( relatedKey, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    var relatedKey = related.$key();\n    var relateds = relation.related;\n    var actualRelated = relateds.get( relatedKey );\n\n    if ( actualRelated )\n    {\n      if ( this.removeThrough( relation, related, remoteData ) )\n      {\n        this.finishRemoveRelated( relation, relatedKey, remoteData );\n      }\n    }\n  },\n\n  removeThrough: function(relation, related, remoteData)\n  {\n    var throughDatabase = this.through.Database;\n    var keyObject = this.createThroughKey( relation, related );\n    var key = throughDatabase.getKey( keyObject );\n    var throughs = relation.throughs;\n    var through = throughs.get( key );\n\n    return this.finishRemoveThrough( relation, through, related, true, remoteData );\n  },\n\n  removeModelFromThrough: function(relation, through)\n  {\n    var relatedDatabase = this.model.Database;\n    var relatedKey = relatedDatabase.buildKey( through, this.foreign );\n\n    if ( this.finishRemoveThrough( relation, through ) )\n    {\n      this.finishRemoveRelated( relation, relatedKey );\n    }\n  },\n\n  finishRemoveThrough: function(relation, through, related, callRemove, remoteData)\n  {\n    var model = relation.parent;\n    var removing = !!through;\n\n    if ( removing )\n    {\n      if ( !this.canRemoveRelated( through, remoteData ) )\n      {\n        return false;\n      }\n\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_THRU_REMOVE, this, relation, through, related );\n\n      var throughs = relation.throughs;\n      var throughKey = through.$key();\n\n      through.$off( Model.Events.Removed, relation.onThroughRemoved );\n\n      delete through.$dependents[ model.$uid() ];\n\n      if ( callRemove )\n      {\n        through.$remove();\n      }\n\n      throughs.remove( throughKey );\n    }\n\n    return removing;\n  },\n\n  finishRemoveRelated: function(relation, relatedKey)\n  {\n    var pending = relation.pending;\n    var relateds = relation.related;\n    var related = relateds.get( relatedKey );\n\n    if ( related )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANYTHRU_REMOVE, this, relation, related );\n\n      relateds.remove( relatedKey );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ relatedKey ];\n\n    return related;\n  },\n\n  isRelatedFactory: function(model)\n  {\n    var foreign = model.$db.key;\n    var local = this.local;\n\n    return function(through)\n    {\n      return propsMatch( through, local, model, foreign );\n    };\n  },\n\n  createThroughKey: function(relation, related)\n  {\n    var model = relation.parent;\n    var modelDatabase = model.$db;\n    var relatedDatabase = this.model.Database;\n    var throughDatabase = this.through.Database;\n    var throughKey = throughDatabase.key;\n    var key = {};\n\n    for (var i = 0; i < throughKey.length; i++)\n    {\n      var prop = throughKey[ i ];\n\n      if ( prop === this.foreign )\n      {\n        key[ prop ] = related.$key();\n      }\n      else if ( prop === this.local )\n      {\n        key[ prop ] = model.$key();\n      }\n      else if ( isArray( this.foreign ) )\n      {\n        var keyIndex = indexOf( this.foreign, prop );\n        var keyProp = relatedDatabase.key[ keyIndex ];\n\n        key[ prop ] = related[ keyProp ];\n      }\n      else if ( isArray( this.local ) )\n      {\n        var keyIndex = indexOf( this.local, prop );\n        var keyProp = modelDatabase.key[ keyIndex ];\n\n        key[ prop ] = model[ keyProp ];\n      }\n    }\n\n    return key;\n  }\n\n});\n","function HasRemote()\n{\n}\n\nRekord.Relations.hasRemote = HasRemote;\n\nHasRemote.Defaults =\n{\n  model:                undefined,\n  lazy:                 false,\n  query:                false,\n  store:                Rekord.Store.None,\n  save:                 Rekord.Save.None,\n  auto:                 false,\n  property:             true,\n  dynamic:              false,\n  comparator:           null,\n  comparatorNullsFirst: false,\n  autoRefresh:          false // Model.Events.RemoteGets\n};\n\nextend( RelationMultiple, HasRemote,\n{\n\n  type: 'hasRemote',\n\n  debugSort:            Rekord.Debugs.HASREMOTE_SORT,\n  debugQuery:           Rekord.Debugs.HASREMOTE_QUERY,\n  debugQueryResults:    Rekord.Debugs.HASREMOTE_QUERY_RESULTS,\n\n  getDefaults: function(database, field, options)\n  {\n    return HasRemote.Defaults;\n  },\n\n  onInitialized: function(database, field, options)\n  {\n    this.comparator = createComparator( this.comparator, this.comparatorNullsFirst );\n\n    Rekord.debug( Rekord.Debugs.HASREMOTE_INIT, this );\n\n    this.finishInitialization();\n  },\n\n  load: Gate(function(model, initialValue, remoteData)\n  {\n    var relator = this;\n    var relation = model.$relations[ this.name ] =\n    {\n      parent: model,\n      pending: {},\n      related: this.createRelationCollection( model ),\n      delaySorting: false,\n      delaySaving: false,\n\n      onRemoved: function() // this = model removed\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_REMOVE, relator, model, this, relation );\n\n        relator.removeModel( relation, this, true );\n      },\n\n      onSaved: function() // this = model saved\n      {\n        Rekord.debug( Rekord.Debugs.HASREMOVE_NINJA_SAVE, relator, model, this, relation );\n\n        relator.sort( relation );\n        relator.checkSave( relation );\n      }\n\n    };\n\n    // Populate the model's key if it's missing\n    model.$key();\n\n    // If auto refersh was specified, execute the query on refresh\n    if ( this.autoRefresh )\n    {\n      model.$on( this.autoRefresh, this.onRefresh( relation ), this );\n    }\n\n    // Execute query!\n    relation.query = this.executeQuery( model );\n\n    // We only need to set the property once since the underlying array won't change.\n    this.setProperty( relation );\n  }),\n\n  onRefresh: function(relation)\n  {\n    return function handleRefresh()\n    {\n      relation.query = this.executeQuery( relation.parent );\n    };\n  },\n\n  addModel: function(relation, related, remoteData)\n  {\n    if ( related.$isDeleted() )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var key = related.$key();\n    var adding = !target.has( key );\n\n    if ( adding )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_ADD, this, relation, related );\n\n      target.put( key, related );\n\n      related.$on( Model.Events.Removed, relation.onRemoved );\n      related.$on( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n\n      if ( !remoteData )\n      {\n        this.checkSave( relation );\n      }\n    }\n\n    return adding;\n  },\n\n  removeModel: function(relation, related, remoteData)\n  {\n    if ( !this.canRemoveRelated( related, remoteData ) )\n    {\n      return;\n    }\n\n    var model = relation.parent;\n    var target = relation.related;\n    var pending = relation.pending;\n    var key = related.$key();\n\n    if ( target.has( key ) )\n    {\n      Rekord.debug( Rekord.Debugs.HASMANY_REMOVE, this, relation, related );\n\n      target.remove( key );\n\n      related.$off( Model.Events.Removed, relation.onRemoved );\n      related.$off( Model.Events.SavedRemoteUpdate, relation.onSaved );\n\n      this.sort( relation );\n      this.checkSave( relation );\n    }\n\n    delete pending[ key ];\n  }\n\n});\n","\nRekord.shard = function(methods)\n{\n  return function createRestSharding(database)\n  {\n    var shard = new Shard( database );\n\n    addMethods( shard, methods );\n\n    shard.initialize( database );\n\n    return shard;\n  };\n};\n\nfunction Shard(database)\n{\n  this.database = database;\n}\n\naddMethods( Shard.prototype,\n{\n\n  STATUS_FAIL_ALL: 500,\n  STATUS_FAIL_GET: 500,\n  STATUS_FAIL_CREATE: 500,\n  STATUS_FAIL_UPDATE: 500,\n  STATUS_FAIL_REMOVE: 500,\n  STATUS_FAIL_QUERY: 500,\n\n  ATOMIC_ALL: false,\n  ATOMIC_GET: false,\n  ATOMIC_CREATE: true,\n  ATOMIC_UPDATE: true,\n  ATOMIC_REMOVE: false,\n  ATOMIC_QUERY: true,\n\n  getShards: function(forRead)\n  {\n    throw 'getShards not implemented';\n  },\n\n  getShardForModel: function(model, forRead)\n  {\n    throw 'getShardForModel not implemented';\n  },\n\n  getShardsForModel: function(model, forRead)\n  {\n    var single = this.getShardForModel( model, forRead );\n\n    return single ? [ single ] : this.getShards( forRead );\n  },\n\n  getShardsForQuery: function(url, query)\n  {\n    return this.getShards();\n  },\n\n  initialize: function(database)\n  {\n\n  },\n\n  all: function(success, failure)\n  {\n    var shards = this.getShards( true );\n    var all = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.all( onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        all.push.apply( all, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (all.length && !this.ATOMIC_ALL) )\n      {\n        success( all );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( all, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_ALL );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_ALL, invoke, onSuccess, failure, onComplete );\n  },\n\n  get: function(model, success, failure)\n  {\n    var shards = this.getShardsForModel( model, true );\n    var gotten = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.get( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( gotten === null && isObject( data ) )\n      {\n        gotten = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( gotten !== null )\n      {\n        success( gotten );\n      }\n      else\n      {\n        failure( gotten, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_GET );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_GET, invoke, onSuccess, noop, onComplete );\n  },\n\n  create: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.create( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_CREATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_CREATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  update: function( model, encoded, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.update( model, encoded, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_UPDATE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_UPDATE, invoke, onSuccess, noop, onComplete );\n  },\n\n  remove: function( model, success, failure )\n  {\n    var shards = this.getShardsForModel( model, false );\n    var returned = null;\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.remove( model, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(data)\n    {\n      if ( returned === null && isObject( returned ) )\n      {\n        returned = data;\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful )\n      {\n        success( returned );\n      }\n      else\n      {\n        failure( returned, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_REMOVE );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_REMOVE, invoke, onSuccess, noop, onComplete );\n  },\n\n  query: function( url, query, success, failure )\n  {\n    var shards = this.getShardsForQuery( url, query );\n    var results = [];\n\n    function invoke(shard, onShardSuccess, onShardFailure)\n    {\n      shard.query( url, query, onShardSuccess, onShardFailure );\n    }\n    function onSuccess(models)\n    {\n      if ( isArray( models ) )\n      {\n        results.push.apply( results, models );\n      }\n    }\n    function onComplete(successful, alreadyFailed, failedStatus)\n    {\n      if ( successful || (results.length && !this.ATOMIC_QUERY) )\n      {\n        success( results );\n      }\n      else if ( !alreadyFailed )\n      {\n        failure( results, isDefined( failedStatus ) ? failedStatus : this.STATUS_FAIL_QUERY );\n      }\n    }\n\n    this.multiplex( shards, this.ATOMIC_QUERY, invoke, onSuccess, noop, onComplete );\n  },\n\n  multiplex: function(shards, atomic, invoke, onSuccess, onFailure, onComplete)\n  {\n    var successful = true;\n    var failureCalled = false;\n    var failedStatus = undefined;\n    var total = 0;\n\n    function onShardComplete()\n    {\n      if ( ++total === shards.length )\n      {\n        onComplete.call( this, successful, failureCalled, failedStatus );\n      }\n    }\n    function onShardSuccess(data)\n    {\n      if ( successful || !atomic )\n      {\n        onSuccess.apply( this, arguments );\n      }\n\n      onShardComplete();\n    }\n    function onShardFailure(data, status)\n    {\n      if ( successful )\n      {\n        successful = false;\n\n        if ( atomic )\n        {\n          failureCalled = true;\n          onFailure.apply( this, arguments );\n        }\n      }\n\n      if ( isNumber( status ) && (failedStatus === undefined || status < failedStatus) )\n      {\n        failedStatus = status;\n      }\n\n      onShardComplete();\n    }\n\n    if ( !isArray( shards ) || shards.length === 0 )\n    {\n      onComplete.call( this, false, false, failedStatus );\n    }\n    else\n    {\n      for (var i = 0; i < shards.length; i++)\n      {\n        invoke.call( this, shards[ i ], onShardSuccess, onShardFailure );\n      }\n    }\n  }\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the reference to the collection which contains all saved models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name', 'done']\n   * });\n   * var t0 = Task.create({name: 't0', done: true}); // saves\n   * var t1 = new Task({name: 't1'});\n   * Task.all(); // [t0]\n   * ```\n   *\n   * @method all\n   * @memberof Rekord.Model\n   * @return {Rekord.ModelCollection} -\n   *    The reference to the collection of models.\n   */\n  model.all = function()\n  {\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns an instance of a model or model collection with remote data (from\n   * the server). If the model(s) exist locally then the values passed in will\n   * overwrite the current values of the models. This is typically used to\n   * bootstrap data from the server in your webpage.\n   *\n   * ```javascript\n   * var User = Rekord({\n   *   fields: ['name', 'email']\n   * });\n   * var currentUser = User.boot({\n   *   id: 1234,\n   *   name: 'Administrator',\n   *   email: 'rekordjs@gmail.com'\n   * });\n   * var friends = User.boot([\n   *   { id: 'c1', name: 'Cat 1', email: 'cat1@gmail.com' },\n   *   { id: 'c2', name: 'Cat 2', email: 'cat2@gmail.com' }\n   * ]);\n   * ```\n   *\n   * @method boot\n   * @memberof Rekord.Model\n   * @param {modelInput[]|Object}\n   * @return {Rekord.ModelCollection|Rekord.Model} -\n   *    The collection or model bootstrapped.\n   */\n  model.boot = function( input )\n  {\n    if ( isArray( input ) )\n    {\n      return new ModelCollection( db, input, true );\n    }\n    else if ( isObject( input ) )\n    {\n      return db.putRemoteData( input );\n    }\n\n    return input;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a collection of models.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *   fields: ['name']\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = new Task({name: 't1'});\n   * var t2 = {name: 't2'};\n   *\n   * var c = Task.collect( 34, t1, t2 ); // or Task.collect( [34, t1, t2] )\n   * c; // [t0, t1, t2]\n   * ```\n   *\n   * @method collect\n   * @memberof Rekord.Model\n   * @param {modelInput[]|...modelInput} models -\n   *    The array of models to to return as a collection.\n   * @return {Rekord.ModelCollection} -\n   *    The collection created.\n   */\n  model.collect = function(a)\n  {\n    var models = arguments.length > 1 || !isArray(a) ?\n      AP.slice.call( arguments ) : a;\n\n    return new ModelCollection( db, models );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a model instance, saves it, and returns it.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name'],\n   *  defaults: {\n   *    name: 'New Task'\n   *  }\n   * });\n   * var t0 = Task.create({id: 34, name: 't0'});\n   * var t1 = Task.create({name: 't1'}); // id generated with uuid\n   * var t2 = Task.create(); // name populated with default 'New Task'\n   * ```\n   *\n   * @method create\n   * @memberof Rekord.Model\n   * @param {Object} [props] -\n   *    The initial values for the new model - if any.\n   * @return {Rekord.Model} -\n   *    The saved model instance.\n   */\n  model.create = function( props )\n  {\n    var instance = isObject( props ) ?\n      db.createModel( props ) :\n      db.instantiate();\n\n    instance.$save();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var extend = options.extend || Database.Defaults.extend;\n\n  if ( !isRekord( extend ) )\n  {\n    return;\n  }\n\n  var defaults = Database.Defaults;\n  var edb = extend.Database;\n  var eoptions = edb.options;\n\n  function tryOverwrite(option)\n  {\n    if ( !options[ option ] )\n    {\n      db[ option ] = edb[ option ];\n    }\n  }\n\n  function tryMerge(option)\n  {\n    var dbo = db[ option ];\n    var edbo = edb[ option ];\n\n    for (var prop in edbo)\n    {\n      if ( !(prop in dbo ) )\n      {\n        dbo[ prop ] = edbo[ prop ];\n      }\n    }\n  }\n\n  function tryUnshift(options, sourceOptions)\n  {\n    var source = edb[ sourceOptions || options ];\n    var target = db[ options ];\n\n    for (var i = source.length - 1; i >= 0; i--)\n    {\n      var k = indexOf( target, source[ i ] );\n\n      if ( k !== false )\n      {\n        target.splice( k, 1 );\n      }\n\n      target.unshift( source[ i ] );\n    }\n  }\n\n  tryOverwrite( 'keySeparator' );\n  tryMerge( 'defaults' );\n  tryMerge( 'ignoredFields' );\n  tryOverwrite( 'loadRelations' );\n  tryOverwrite( 'loadRemote' );\n  tryOverwrite( 'autoRefresh' );\n  tryOverwrite( 'cache' );\n  tryOverwrite( 'fullSave' );\n  tryOverwrite( 'fullPublish' );\n  tryMerge( 'encodings' );\n  tryMerge( 'decodings' );\n  tryOverwrite( 'summarize' );\n  tryUnshift( 'fields' );\n  tryUnshift( 'saveFields', 'fields' );\n\n  if ( !options.comparator )\n  {\n    db.setComparator( eoptions.comparator, eoptions.comparatorNullsFirst );\n  }\n\n  if ( !options.revision )\n  {\n    db.setRevision( eoptions.revision );\n  }\n\n  if ( !options.summarize )\n  {\n    db.setSummarize( eoptions.summarize );\n  }\n\n  for (var name in edb.relations)\n  {\n    if ( name in db.relations )\n    {\n      continue;\n    }\n\n    var relation = edb.relations[ name ];\n    var relationCopy = new relation.constructor();\n\n    relationCopy.init( db, name, relation.options );\n\n    if ( relationCopy.save )\n    {\n      db.saveFields.push( name );\n    }\n\n    db.relations[ name ] = relationCopy;\n    db.relationNames.push( name );\n  }\n\n  db.rest   = Rekord.rest( db );\n  db.store  = Rekord.store( db );\n  db.live   = Rekord.live( db );\n\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the local model matching the given input (or creates one) and loads\n   * it from the remote source ({@link Rekord.rest}). If `callback` is specified\n   * then it is invoked with the instance once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.fetch( 34, function(task) {\n   *   task; // {id: 34 name: 'Remotely Loaded'}\n   * });\n   * t0; // {id: 34} until remotely loaded\n   * ```\n   *\n   * @method fetch\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model once it's\n   *    successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance.\n   */\n  model.fetch = function( input, callback, context )\n  {\n    var key = db.buildKeyFromInput( input );\n    var instance = db.get( key );\n\n    if ( !instance )\n    {\n      instance = db.buildObjectFromKey( key );\n\n      if ( isObject( input ) )\n      {\n        instance.$set( input );\n      }\n    }\n\n    if ( isFunction( callback ) )\n    {\n      var callbackContext = context || this;\n\n      instance.$once( Model.Events.RemoteGets, function()\n      {\n        callback.call( callbackContext, instance );\n      });\n    }\n\n    instance.$refresh();\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the collection of all local models and tries to reload them (and\n   * any additional models returned) from a remote source ({@link Rekord.rest}).\n   * If `callback` is specified then it is invoked with the collections all\n   * models once it's loaded.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks0 = Task.fetchAll( function(tasks1) {\n   *   tasks0 // tasks1\n   * });\n   * ```\n   *\n   * @method fetchAll\n   * @memberof Rekord.Model\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's successfully remotely loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.ModelCollection} -\n   *    The collection of all models of this type.\n   */\n  model.fetchAll = function(callback, context)\n  {\n    db.refresh( callback, context );\n\n    return db.models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  model.filtered = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.filtered( whereProperties, whereValue, whereEquals );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  model.find = function(whereProperties, whereValue, whereEquals)\n  {\n    return db.models.firstWhere( whereProperties, whereValue, whereEquals );\n  };\n});","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Returns the model instance identified with the given input. This includes\n   * saved and unsaved models. If a `callback` is given the model will be passed\n   * to the function. The `callback` method is useful for waiting for Rekord\n   * to finish initializing (which includes loading models from local storage\n   * followed by remote storage if configured) and returning a model instance.\n   * If Rekord has finished initializing and the model doesn't exist locally\n   * then it is fetched from the remoute source using {@link Rekord.rest}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t0 = Task.get( 34 ); // only looks at models currently loaded\n   * var t1 = Task.get( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method get\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} [callback] -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance if `callback` is not given - or undefined if the\n   *    input doesn't resolve to a model or `callback` is given.\n   */\n  model.get = function( input, callback, context )\n  {\n    if ( isFunction( callback ) )\n    {\n      db.grabModel( input, callback, context );\n    }\n    else\n    {\n      return db.get( input );\n    }\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets the model instance identified with the given input and passes it to the\n   * `callback` function. If Rekord is not finished initializing this function\n   * will wait until it is and check for the model. If it still doesn't exist\n   * locally it is loaded from a remote source using {@link Rekord.rest}. If the\n   * model doesn't exist at all a null value will be returned to the function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var t1 = Task.grab( 23, function(model) {\n   *   model; // local or remotely loaded if it didn't exist locally - could be null if it doesn't exist at all\n   * })\n   * ```\n   *\n   * @method grab\n   * @memberof Rekord.Model\n   * @param {modelInput} input -\n   *    The model input used to determine the key and load the model.\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model when it's\n   *    successfully found.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model instance of it exists locally at the moment, or undefined\n   *    if the model hasn't been loaded yet.\n   */\n  model.grab = function( input, callback, context )\n  {\n    var callbackContext = context || this;\n    var instance = db.get( input );\n\n    if ( instance )\n    {\n      callback.call( callbackContext, instance );\n    }\n    else\n    {\n      db.grabModel( input, function(instance)\n      {\n        if ( instance )\n        {\n          callback.call( callbackContext, instance )\n        }\n        else\n        {\n          model.fetch( input, callback, context );\n        }\n      });\n    }\n\n    return instance;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Gets all model instances currently loaded, locally loaded, or remotely\n   * loaded and passes it to the `callback` function.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * var tasks = Task.grabAll( function(models) {\n   *   models; // local or remotely loaded if it didn't exist locally.\n   * })\n   * ```\n   *\n   * @method grabAll\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the model collection\n   *    when it's loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @return {Rekord.Model} -\n   *    The model collection of it exists locally at the moment, or undefined\n   *    if models haven't been loaded yet.\n   */\n  model.grabAll = function( callback, context )\n  {\n    var callbackContext = context || this;\n    var models = db.models;\n\n    if ( models.length )\n    {\n      callback.call( callbackContext, models );\n    }\n    else\n    {\n      db.ready(function()\n      {\n        if ( models.length )\n        {\n          callback.call( callbackContext, models );\n        }\n        else\n        {\n          db.refresh(function()\n          {\n            callback.call( callbackContext, models );\n          });\n        }\n      });\n    }\n\n    return models;\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var methods = collapse( options.methods, Database.Defaults.methods );\n\n  if ( !isEmpty( methods ) )\n  {\n    addMethods( model.prototype, methods );\n  }\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Invokes a function when Rekord has loaded. It's considered loaded when\n   * it's loaded locally, remotely, or neither (depending on the options\n   * passed to the database). The `callback` can also be invoked `persistent`ly\n   * on any load event - which includes {@link Rekord.Database#refresh}.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.ready( function(db) {\n   *  // Tasks have been loaded, lets do something about it!\n   * });\n   * ```\n   *\n   * @method ready\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference of the database when it's\n   *    loaded.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   * @param {Boolean} [persistent=false] -\n   *    Whether the `callback` function should be invoked multiple times.\n   *    Depending on the state of initializing, the callback can be invoked when\n   *    models are loaded locally (if the `cache` is not equal to `None`),\n   *    models are loaded remotely (if `loadRemote` is true), and every time\n   *    {@link Rekord.Database#refresh} is called manually OR if `autoRefresh`\n   *    is specified as true and the application changes from offline to online.\n   */\n  model.ready = function( callback, context, persistent )\n  {\n    db.ready( callback, context, persistent );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Refreshs the model database from the remote source by calling\n   * {@link Rekord.Database#refresh}. A `callback` can be passed to be invoked\n   * when the model database has refreshed (or failed to refresh) where all\n   * models that have been loaded will be passed as the first argument.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name']\n   * });\n   * Task.refresh( function(models) {\n   *  models; // The collection of models loaded remotely (or current models if it failed to load them remotely.\n   * });\n   * ```\n   *\n   * @method refresh\n   * @memberof Rekord.Model\n   * @param {Function} callback -\n   *    The function to invoke passing the reference model collection.\n   * @param {Object} [context] -\n   *    The context (this) for the callback.\n   */\n  model.refresh = function( callback, context )\n  {\n    return db.refresh( callback, context );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search for model instances. A search is an object with\n   * properties that are passed to a configurable {@link Rekord.rest} function\n   * which expect an array of models to be returned from the remote call that\n   * match the search parameters.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.search('/api/task/search');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   * });\n   * ```\n   *\n   * @method search\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.Search} -\n   *    A new search for models.\n   */\n  model.search = function(url, options)\n  {\n    return new Search( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n\n  /**\n   * Creates a new search with pagination for model instances. A paginated\n   * search is an object with properties that are passed to a configurable\n   * {@link Rekord.rest} function which expect an array of models to be returned\n   * as well as paging information from the remote call. Special properties are\n   * passed to the server (`page_index`, `page_size`) which dictate which\n   * chunk of data should be returned. A special `total` property is expected to\n   * be returned with `results` which tells the search how many records would've\n   * been returned without the pagination.\n   *\n   * ```javascript\n   * var Task = Rekord({\n   *  fields: ['name', 'done']\n   * });\n   * var search = Task.searchPaged('/api/task/searchPaged');\n   * search.name = 'like this';\n   * search.done = true;\n   * search.anyProperty = [1, 3, 4];\n   * search.$run();\n   * search.$success( function(search) {\n   *   search.$results; // collection of returned results\n   *   search.total; // number of results that would've been returned without pagination\n   *   search.page_index; // the zero-based page index\n   *   search.page_size; // the number of results to be returned\n   * });\n   * search.$next(); // increase page_index, get the next page\n   * ```\n   *\n   * @method searchPaged\n   * @memberof Rekord.Model\n   * @param {String} url -\n   *    A URL to send the search data to.\n   * @param {searchPageOptions} [options] -\n   *    Options for the search.\n   * @return {Rekord.SearchPaged} -\n   *    A new paginated search for models.\n   */\n  model.searchPaged = function(url, options)\n  {\n    return new SearchPaged( db, url, options );\n  };\n});\n","Rekord.on( Rekord.Events.Options, function(options)\n{\n  var shard = options.shard || Database.Defaults.shard;\n\n  if ( !isObject( shard ) )\n  {\n    return;\n  }\n\n  options.createRest = Rekord.shard( shard );\n});\n","Rekord.on( Rekord.Events.Plugins, function(model, db, options)\n{\n  var time = options.timestamps || Database.Defaults.timestamps;\n  var timeAsDate = options.timestampsAsDate || Database.Defaults.timestampsAsDate;\n  var currentTimestamp = timeAsDate ? currentDate : currentTime;\n\n  if ( !time )\n  {\n    return;\n  }\n\n  function currentTime()\n  {\n    return new Date().getTime();\n  }\n\n  function currentDate()\n  {\n    return new Date();\n  }\n\n  function encode(x)\n  {\n    return x instanceof Date ? x.getTime() : x;\n  }\n\n  function decode(x)\n  {\n    return isNumber( x ) ? new Date( x ) : (isString( x ) && Date.parse ? Date.parse( x ) : x);\n  }\n\n  function addTimestamp(field)\n  {\n    var i = indexOf( db.fields, field );\n\n    if ( i === false )\n    {\n      db.fields.push( field );\n      db.saveFields.push( field );\n    }\n\n    if ( !(field in db.defaults) )\n    {\n      db.defaults[ field ] = currentTimestamp;\n    }\n\n    if ( timeAsDate )\n    {\n      if ( !(field in db.encodings) )\n      {\n        db.encodings[ field ] = encode;\n      }\n      if ( !(field in db.decodings ) )\n      {\n        db.decodings[ field ] = decode;\n      }\n    }\n  }\n\n  function addCreatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n  }\n\n  function addUpdatedAt(field)\n  {\n    addTimestamp( field );\n\n    db.ignoredFields[ field ] = true;\n\n    var $save = model.prototype.$save;\n\n    addMethod( model.prototype, '$save', function()\n    {\n      this[ field ] = currentTimestamp();\n\n      $save.apply( this, arguments );\n    });\n  }\n\n  function addTimestampField(type, field)\n  {\n    switch (type) {\n      case 'created_at':\n        return addCreatedAt( field );\n      case 'updated_at':\n        return addUpdatedAt( field );\n      default:\n        return addTimestamp( field );\n    }\n  }\n\n  if ( isString( time ) )\n  {\n    addTimestampField( time, time );\n  }\n  else if ( isArray( time ) )\n  {\n    for (var i = 0; i < time.length; i++)\n    {\n      addTimestampField( time[ i ], time[ i ] );\n    }\n  }\n  else if ( isObject( time ) )\n  {\n    for (var prop in time)\n    {\n      addTimestampField( prop, time[ prop ] );\n    }\n  }\n  else\n  {\n    addCreatedAt( 'created_at' );\n    addUpdatedAt( 'updated_at' );\n  }\n});\n","\nRekord.debug = function(event, source)  /*, data.. */\n{\n  // up to the user\n};\n\n/**\n * Sets the debug implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides debug implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setDebug = function(factory, overwrite)\n{\n  if ( !Rekord.debugSet || overwrite )\n  {\n    Rekord.debug = factory;\n    Rekord.debugSet = true;\n  }\n};\n\nRekord.Debugs = {\n\n  CREATION: 0,                // options\n\n  REST: 1,                    // options\n  AUTO_REFRESH: 73,           //\n\n  REMOTE_UPDATE: 2,           // encoded, Model\n  REMOTE_CREATE: 3,           // encoded, Model\n  REMOTE_REMOVE: 4,           // Model\n  REMOTE_LOAD: 5,             // encoded[]\n  REMOTE_LOAD_OFFLINE: 6,     //\n  REMOTE_LOAD_ERROR: 7,       // status\n  REMOTE_LOAD_REMOVE: 8,      // key\n  REMOTE_LOAD_RESUME: 22,     //\n\n  LOCAL_LOAD: 9,              // encoded[]\n  LOCAL_RESUME_DELETE: 10,    // Model\n  LOCAL_RESUME_SAVE: 11,      // Model\n  LOCAL_LOAD_SAVED: 12,       // Model\n\n  REALTIME_SAVE: 13,          // encoded, key\n  REALTIME_REMOVE: 14,        // key\n\n  SAVE_VALUES: 15,            // encoded, Model\n  SAVE_PUBLISH: 16,           // encoded, Model\n  SAVE_CONFLICT: 17,          // encoded, Model\n  SAVE_UPDATE_FAIL: 18,       // Model\n  SAVE_ERROR: 19,             // Model, status\n  SAVE_OFFLINE: 20,           // Model\n  SAVE_RESUME: 21,            // Model\n  SAVE_REMOTE: 25,            // Model\n  SAVE_DELETED: 40,           // Model\n\n  SAVE_OLD_REVISION: 48,      // Model, encoded\n\n  SAVE_LOCAL: 23,             // Model\n  SAVE_LOCAL_ERROR: 24,       // Model, error\n  SAVE_LOCAL_DELETED: 38,     // Model\n  SAVE_LOCAL_BLOCKED: 39,     // Model\n\n  SAVE_REMOTE_DELETED: 41,    // Model, [encoded]\n  SAVE_REMOTE_BLOCKED: 42,    // Model\n\n  REMOVE_PUBLISH: 26,         // key, Model\n  REMOVE_LOCAL: 27,           // key, Model\n  REMOVE_MISSING: 28,         // key, Model\n  REMOVE_ERROR: 29,           // status, key, Model\n  REMOVE_OFFLINE: 30,         // Model\n  REMOVE_RESUME: 31,          // Model\n  REMOVE_REMOTE: 32,          // Model\n  REMOVE_CANCEL_SAVE: 47,     // Model\n\n  REMOVE_LOCAL: 33,           // Model\n  REMOVE_LOCAL_ERROR: 34,     // Model, error\n  REMOVE_LOCAL_BLOCKED: 44,   // Model\n  REMOVE_LOCAL_NONE: 45,      // Model\n  REMOVE_LOCAL_UNSAVED: 46,   // Model\n\n  REMOVE_REMOTE_BLOCKED: 43,  // Model\n\n  GET_LOCAL_SKIPPED: 104,     // Model\n  GET_LOCAL: 105,             // Model, encoded\n  GET_LOCAL_ERROR: 106,       // Model, e\n  GET_REMOTE: 107,            // Model, data\n  GET_REMOTE_ERROR: 108,      // Model, data, status\n\n  ONLINE: 35,                 //\n  OFFLINE: 36,                //\n\n  PUBSUB_CREATED: 37,         // PubSub\n\n  HASONE_INIT: 53,            // HasOne\n  HASONE_NINJA_REMOVE: 49,    // Model, relation\n  HASONE_INITIAL_PULLED: 51,  // Model, initial\n  HASONE_INITIAL: 52,         // Model, initial\n  HASONE_CLEAR_MODEL: 54,     // relation\n  HASONE_SET_MODEL: 55,       // relation\n  HASONE_PRESAVE: 56,         // Model, relation\n  HASONE_POSTREMOVE: 57,      // Model, relation\n  HASONE_CLEAR_KEY: 58,       // Model, local\n  HASONE_UPDATE_KEY: 59,      // Model, local, Model, foreign\n  HASONE_LOADED: 60,          // Model, relation, [Model]\n  HASONE_QUERY: 111,          // Model, RemoteQuery, queryOption, query\n  HASONE_QUERY_RESULTS: 112,  // Model, RemoteQuery\n\n  BELONGSTO_INIT: 61,          // HasOne\n  BELONGSTO_NINJA_REMOVE: 62,  // Model, relation\n  BELONGSTO_NINJA_SAVE: 63,    // Model, relation\n  BELONGSTO_INITIAL_PULLED: 64,// Model, initial\n  BELONGSTO_INITIAL: 65,       // Model, initial\n  BELONGSTO_CLEAR_MODEL: 66,   // relation\n  BELONGSTO_SET_MODEL: 67,     // relation\n  BELONGSTO_POSTREMOVE: 69,    // Model, relation\n  BELONGSTO_CLEAR_KEY: 70,     // Model, local\n  BELONGSTO_UPDATE_KEY: 71,    // Model, local, Model, foreign\n  BELONGSTO_LOADED: 72,        // Model, relation, [Model]\n  BELONGSTO_QUERY: 113,        // Model, RemoteQuery, queryOption, query\n  BELONGSTO_QUERY_RESULTS: 114,// Model, RemoteQuery\n\n  HASMANY_INIT: 74,             // HasMany\n  HASMANY_NINJA_REMOVE: 75,     // Model, Model, relation\n  HASMANY_NINJA_SAVE: 76,       // Model, Model, relation\n  HASMANY_INITIAL: 77,          // Model, relation, initial\n  HASMANY_INITIAL_PULLED: 78,   // Model, relation\n  HASMANY_REMOVE: 79,           // relation, Model\n  HASMANY_SORT: 80,             // relation\n  HASMANY_ADD: 81,              // relation, Model\n  HASMANY_LAZY_LOAD: 82,        // relation, Model[]\n  HASMANY_INITIAL_GRABBED: 83,  // relation, Model\n  HASMANY_NINJA_ADD: 84,        // relation, Model\n  HASMANY_AUTO_SAVE: 85,        // relation\n  HASMANY_PREREMOVE: 86,        // Model, relation\n  HASMANY_POSTSAVE: 87,         // Model, relation\n  HASMANY_QUERY: 115,           // Model, RemoteQuery, queryOption, query\n  HASMANY_QUERY_RESULTS: 116,   // Model, RemoteQuery\n\n  HASMANYTHRU_INIT: 88,             // HasMany\n  HASMANYTHRU_NINJA_REMOVE: 89,     // Model, Model, relation\n  HASMANYTHRU_NINJA_SAVE: 90,       // Model, Model, relation\n  HASMANYTHRU_NINJA_THRU_REMOVE: 91,// Model, Model, relation\n  HASMANYTHRU_INITIAL: 92,          // Model, relation, initial\n  HASMANYTHRU_INITIAL_PULLED: 93,   // Model, relation\n  HASMANYTHRU_REMOVE: 94,           // relation, Model\n  HASMANYTHRU_SORT: 95,             // relation\n  HASMANYTHRU_ADD: 96,              // relation, Model\n  HASMANYTHRU_LAZY_LOAD: 97,        // relation, Model[]\n  HASMANYTHRU_INITIAL_GRABBED: 98,  // relation, Model\n  HASMANYTHRU_NINJA_ADD: 99,        // relation, Model\n  HASMANYTHRU_AUTO_SAVE: 100,       // relation\n  HASMANYTHRU_PREREMOVE: 101,       // Model, relation\n  HASMANYTHRU_POSTSAVE: 102,        // Model, relation\n  HASMANYTHRU_THRU_ADD: 103,        // relation, Model\n  HASMANYTHRU_THRU_REMOVE: 68,      // relation, Model, Model\n  HASMANYTHRU_QUERY: 117,           // Model, RemoteQuery, queryOption, query\n  HASMANYTHRU_QUERY_RESULTS: 118,   // Model, RemoteQuery\n\n  HASREMOTE_INIT: 50,               // HasRemote\n  HASREMOTE_SORT: 121,              // relation\n  HASREMOVE_NINJA_REMOVE: 109,      // Model, Model, relation\n  HASREMOVE_NINJA_SAVE: 110,        // Model, Model, relation\n  HASREMOVE_QUERY: 119,             // Model, RemoteQuery, queryOption, query\n  HASREMOVE_QUERY_RESULTS: 120      // Model, RemoteQuery\n};\n","\n// Rekord.rest = function(options, success(data), failure(data, status))\n\nRekord.rest = function(database)\n{\n\n  return {\n\n    // success ( data[] )\n    // failure ( data[], status )\n    all: function( success, failure )\n    {\n      success( [] );\n    },\n\n    // success( data )\n    // failure( data, status )\n    get: function( model, success, failure )\n    {\n      failure( null, -1 );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    create: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    update: function( model, encoded, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data )\n    // failure ( data, status )\n    remove: function( model, success, failure )\n    {\n      success( {} );\n    },\n\n    // success ( data[] )\n    // failure ( data[], status )\n    query: function( url, query, success, failure )\n    {\n      success( [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the rest implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides rest implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setRest = function(factory, overwrite)\n{\n  if ( !Rekord.restSet || overwrite )\n  {\n    Rekord.rest = factory;\n    Rekord.restSet = true;\n  }\n};\n","/**\n * A factory function for returning an object capable of storing objects for\n * retrieval later by the application.\n *\n * @param  {Database} database\n *         The database this store is for.\n * @return {Object} -\n *         An object with put, remove, and all functions.\n */\nRekord.store = function(database)\n{\n  return {\n\n    /**\n     * Places a record in the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to store the record as.\n     * @param  {Object} record\n     *         The record to store.\n     * @param  {function} success\n     *         A function to invoke when the record is successfully stored with\n     *         the key. The arguments of the function should be the key and\n     *         record passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when the record failed to be stored with the\n     *         key. The arguments of the function should be the key, record, and\n     *         an error that occurred if available.\n     */\n    put: function(key, record, success, failure)\n    {\n      success( key, record );\n    },\n\n    // TODO\n    get: function(key, success, failure)\n    {\n      failure( key, void 0 );\n    },\n\n    /**\n     * Removes a record from the store with the given key.\n     *\n     * @param  {String|Number} key\n     *         The key to remove from the store.\n     * @param  {function} success\n     *         A function to invoke when the record doesn't exist in the store.\n     *         The arguments of the function are the removedValue (if any) and\n     *         the key passed to this function.\n     * @param  {function} failure\n     *         A function to invoke when there was an issue removing the key\n     *         from the store. The arguments of the function are the key given\n     *         to this function and an error that occurred if available.\n     */\n    remove: function(key, success, failure)\n    {\n      success( key );\n    },\n\n    /**\n     * Returns all records and their keys to the given success callback.\n     *\n     * @param  {function} success\n     *         The function to invoke with the array of records and an array\n     *         of keys.\n     * @param  {function} failure\n     *         The function to invoke with the error that occurred if available.\n     */\n    all: function(success, failure)\n    {\n      success( [], [] );\n    }\n\n  };\n\n};\n\n/**\n * Sets the store implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides store implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setStore = function(factory, overwrite)\n{\n  if ( !Rekord.storeSet || overwrite )\n  {\n    Rekord.store = factory;\n    Rekord.storeSet = true;\n  }\n};\n","\n/**\n * The factory responsible for creating a service which publishes operations\n * and receives operations that have occurred. The first argument is a reference\n * to the Database and the second argument is a function to invoke when a\n * live operation occurs. This function must return a function that can be passed\n * an operation to be delegated to other clients.\n *\n * @param  {Database} database\n *         The database this live function is for.\n * @return {function} -\n *         The function which sends operations.\n */\nRekord.live = function(database)\n{\n  return {\n\n    save: function(model, data)\n    {\n      // ignore save\n    },\n\n    remove: function(model)\n    {\n      // ignore remove\n    }\n\n  };\n};\n\n/**\n * Sets the live implementation provided the factory function. This function\n * can only be called once - all subsequent calls will be ignored unless\n * `overwrite` is given as a truthy value.\n *\n * @memberof Rekord\n * @param {Function} factory -\n *    The factory which provides live implementations.\n * @param {Boolean} [overwrite=false] -\n *    True if existing implementations are to be ignored and the given factory\n *    should be the implementation.\n */\nRekord.setLive = function(factory, overwrite)\n{\n  if ( !Rekord.liveSet || overwrite )\n  {\n    Rekord.live = factory;\n    Rekord.liveSet = true;\n  }\n};\n","\n// Initial online\nRekord.online = window.navigator.onLine !== false;\n\nRekord.forceOffline = false;\n\n// Set network status to online and notify all listeners\nRekord.setOnline = function()\n{\n  Rekord.online = true;\n  Rekord.debug( Rekord.Debugs.ONLINE );\n  Rekord.trigger( Rekord.Events.Online );\n};\n\n// Set network status to offline and notify all listeners\nRekord.setOffline = function()\n{\n  Rekord.online = false;\n  Rekord.debug( Rekord.Debugs.OFFLINE );\n  Rekord.trigger( Rekord.Events.Offline );\n};\n\n// This must be called manually - this will try to use built in support for \n// online/offline detection instead of solely using status codes of 0.\nRekord.listenToNetworkStatus = function()\n{\n  if (window.addEventListener) \n  {\n    window.addEventListener( Rekord.Events.Online, Rekord.setOnline, false );\n    window.addEventListener( Rekord.Events.Offline, Rekord.setOffline, false );\n  } \n  else \n  {\n    document.body.ononline = Rekord.setOnline;\n    document.body.onoffline = Rekord.setOffline;\n  }\n};\n\n// Check to see if the network status has changed.\nRekord.checkNetworkStatus = function()\n{\n  var online = window.navigator.onLine;\n\n  if ( Rekord.forceOffline ) \n  {\n    online = false;\n  }\n\n  if (online === true && Rekord.online === false) \n  {\n    Rekord.setOnline();\n  }\n\n  else if (online === false && Rekord.online === true) \n  {\n    Rekord.setOffline();\n  }\n};","\n// The methods necessary for a filtered collection.\nvar Filtering = {\n\n  bind: function()\n  {\n    this.onAdd      = bind( this, Filtering.handleAdd );\n    this.onAdds     = bind( this, Filtering.handleAdds );\n    this.onRemove   = bind( this, Filtering.handleRemove );\n    this.onRemoves  = bind( this, Filtering.handleRemoves );\n    this.onReset    = bind( this, Filtering.handleReset );\n    this.onUpdates  = bind( this, Filtering.handleUpdates );\n    this.onCleared  = bind( this, Filtering.handleCleared );\n  },\n\n  init: function(base, filter)\n  {\n    if ( this.base !== base )\n    {\n      if ( this.base )\n      {\n        this.disconnect();\n      }\n\n      this.base = base;\n      this.connect();\n    }\n\n    this.filter = filter;\n    this.sync();\n\n    return this;\n  },\n\n  setFilter: function(whereProperties, whereValue, whereEquals)\n  {\n    this.filter = createWhere( whereProperties, whereValue, whereEquals );\n    this.sync();\n\n    return this;\n  },\n\n  connect: function()\n  {\n    this.base.on( Collection.Events.Add, this.onAdd );\n    this.base.on( Collection.Events.Adds, this.onAdds );\n    this.base.on( Collection.Events.Remove, this.onRemove );\n    this.base.on( Collection.Events.Removes, this.onRemoves );\n    this.base.on( Collection.Events.Reset, this.onReset );\n    this.base.on( Collection.Events.Updates, this.onUpdates );\n    this.base.on( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  disconnect: function()\n  {\n    this.base.off( Collection.Events.Add, this.onAdd );\n    this.base.off( Collection.Events.Adds, this.onAdds );\n    this.base.off( Collection.Events.Remove, this.onRemove );\n    this.base.off( Collection.Events.Removes, this.onRemoves );\n    this.base.off( Collection.Events.Reset, this.onReset );\n    this.base.off( Collection.Events.Updates, this.onUpdates );\n    this.base.off( Collection.Events.Cleared, this.onClear );\n\n    return this;\n  },\n\n  sync: function()\n  {\n    var base = this.base;\n    var filter = this.filter;\n    var matches = [];\n\n    for (var i = 0; i < base.length; i++)\n    {\n      var value = base[ i ];\n\n      if ( filter( value ) )\n      {\n        matches.push( value );\n      }\n    }\n\n    return this.reset( matches );\n  },\n\n  handleAdd: function(collection, value)\n  {\n    var filter = this.filter;\n\n    if ( filter( value ) )\n    {\n      this.add( value );\n    }\n  },\n\n  handleAdds: function(collection, values)\n  {\n    var filter = this.filter;\n    var filtered = [];\n\n    for (var i = 0; i < values.length; i++)\n    {\n      var value = values[ i ];\n\n      if ( filter( value ) )\n      {\n        filtered.push( value );\n      }\n    }\n\n    this.addAll( filtered );\n  },\n\n  handleRemove: function(collection, value)\n  {\n    this.remove( value );\n  },\n\n  handleRemoves: function(collection, values)\n  {\n    this.removeAll( values );\n  },\n\n  handleReset: function(collection)\n  {\n    this.sync();\n  },\n\n  handleUpdates: function(collection, updates)\n  {\n    var filter = this.filter;\n\n    for (var i = 0; i < updates.length; i++)\n    {\n      var value = updates[ i ];\n\n      if ( filter( value ) )\n      {\n        this.add( value, true );\n      }\n      else\n      {\n        this.remove( value, true );\n      }\n    }\n\n    this.sort();\n  },\n\n  handleCleared: function(collection)\n  {\n    this.clear();\n  },\n\n  clone: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  },\n\n  cloneEmpty: function()\n  {\n    return new this.constructor( this.base, this.filter );\n  }\n\n};\n","\nvar Polymorphic =\n{\n\n  setReferences: function(database, field, options)\n  {\n    this.isRelatedFactory = this.isRelatedDiscriminatedFactory( this.isRelatedFactory );\n\n    this.loadDiscriminators(function()\n    {\n      this.onInitialized( database, field, options );\n    });\n  },\n\n  isRelatedDiscriminatedFactory: function(isRelatedFactory)\n  {\n    return function (model)\n    {\n      var isRelated = isRelatedFactory.call( this, model );\n      var discriminator = this.getDiscriminatorForModel( model );\n      var discriminatorField = this.discriminator;\n\n      return function (related)\n      {\n        if ( !isRelated( related ) )\n        {\n          return false;\n        }\n\n        return equals( discriminator, related[ discriminatorField ] );\n      };\n    };\n  },\n\n  loadDiscriminators: function(onLoad)\n  {\n    var discriminators = this.discriminators;\n    var total = sizeof( discriminators );\n    var loaded = 0;\n\n    function handleLoaded()\n    {\n      if ( ++loaded === total )\n      {\n        onLoad.apply( this );\n      }\n    }\n\n    for (var name in discriminators)\n    {\n      var discriminator = discriminators[ name ];\n\n      Rekord.get( name, this.setDiscriminated( discriminator, handleLoaded ), this );\n    }\n  },\n\n  setDiscriminated: function(discriminator, onLoad)\n  {\n    return function(rekord)\n    {\n      this.discriminators[ rekord.Database.name ] = discriminator;\n      this.discriminators[ rekord.Database.className ] = discriminator;\n      this.discriminatorToModel[ discriminator ] = rekord;\n\n      onLoad.apply( this );\n    };\n  },\n\n  createRelationCollection: function(model)\n  {\n    return DiscriminateCollection( new RelationCollection( undefined, model, this ), this.discriminator, this.discriminatorToModel );\n  },\n\n  createCollection: function()\n  {\n    return DiscriminateCollection( new ModelCollection(), this.discriminator, this.discriminatorToModel );\n  },\n\n  ready: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.ready( callback, this );\n    }\n  },\n\n  listenToModelAdded: function(callback)\n  {\n    var models = this.discriminatorToModel;\n\n    for ( var prop in models )\n    {\n      var model = models[ prop ];\n\n      model.Database.on( Database.Events.ModelAdded, callback, this );\n    }\n  },\n\n  executeQuery: function(model)\n  {\n    var queryOption = this.query;\n    var queryOptions = this.queryOptions;\n    var queryData = this.queryData;\n    var query = isString( queryOption ) ? format( queryOption, model ) : queryOption;\n    var search = model.search( query, queryOptions );\n\n    if ( isObject( queryData ) )\n    {\n      transfer( queryData, search );\n    }\n\n    DiscriminateCollection( search, this.discriminator, this.discriminatorToModel );\n\n    search.$run();\n    search.$ready( this.handleExecuteQuery( model ), this );\n\n    return search;\n  },\n\n  parseModel: function(input, remoteData)\n  {\n    if ( input instanceof Model )\n    {\n      return input;\n    }\n    else if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db )\n      {\n        return db.parseModel( input, remoteData );\n      }\n    }\n\n    return false;\n  },\n\n  clearFields: function(target, targetFields, remoteData)\n  {\n    var changes = this.clearFieldsReturnChanges( target, targetFields );\n\n    if ( target[ this.discriminator ] )\n    {\n      target[ this.discriminator ] = null;\n      changes = true;\n    }\n\n    if ( changes && !remoteData && this.auto && !target.$isNew() )\n    {\n      target.$save();\n    }\n\n    return changes;\n  },\n\n  updateFields: function(target, targetFields, source, sourceFields, remoteData)\n  {\n    var changes = this.updateFieldsReturnChanges( target, targetFields, source, sourceFields );\n\n    var targetField = this.discriminator;\n    var targetValue = target[ targetField ];\n    var sourceValue = this.getDiscriminatorForModel( source );\n\n    if ( !equals( targetValue, sourceValue ) )\n    {\n      target[ targetField ] = sourceValue;\n      changes = true;\n    }\n\n    if ( changes )\n    {\n      if ( this.auto && !target.$isNew() && !remoteData )\n      {\n        target.$save();\n      }\n\n      target.$trigger( Model.Events.KeyUpdate, [target, source, targetFields, sourceFields] );\n    }\n\n    return changes;\n  },\n\n  grabInitial: function( model, fields )\n  {\n    var discriminator = this.discriminator;\n    var discriminatorValue = model[ discriminator ];\n\n    if ( hasFields( model, fields, isValue ) && isValue( discriminatorValue ) )\n    {\n      var related = this.discriminatorToModel[ discriminatorValue ];\n\n      if ( related.Database )\n      {\n        var initial = {};\n\n        initial[ discriminator ] = discriminatorValue;\n\n        if ( isString( fields ) ) // && isString( model.Database.key )\n        {\n          initial[ related.Database.key ] = model[ fields ];\n        }\n        else // if ( isArray( fields ) && isArray( model.Database.key ) )\n        {\n          for (var i = 0; i < fields.length; i++)\n          {\n            initial[ related.Database.key[ i ] ] = model[ fields[ i ] ];\n          }\n        }\n\n        return initial;\n      }\n    }\n  },\n\n  grabModel: function(input, callback, remoteData)\n  {\n    if ( isObject( input ) )\n    {\n      var db = this.getDiscriminatorDatabase( input );\n\n      if ( db !== false )\n      {\n        db.grabModel( input, callback, this, remoteData );\n      }\n    }\n  },\n\n  grabModels: function(initial, callback, remoteData)\n  {\n    for (var i = 0; i < initial.length; i++)\n    {\n      var input = initial[ i ];\n\n      if ( input instanceof Model )\n      {\n        callback.call( this, input );\n      }\n      else if ( isObject( input ) )\n      {\n        var db = this.getDiscriminatorDatabase( input );\n\n        if ( db )\n        {\n          var key = db.buildKeyFromInput( input );\n\n          relation.pending[ key ] = true;\n\n          db.grabModel( input, callback, this, remoteData );\n        }\n      }\n    }\n  },\n\n  ownsForeignKey: function()\n  {\n    return true;\n  },\n\n  isModelArray: function(input)\n  {\n    return isArray( input );\n  },\n\n  getDiscriminator: function(model)\n  {\n    return model[ this.discriminator ];\n  },\n\n  getDiscriminatorDatabase: function(model)\n  {\n    var discriminator = this.getDiscriminator( model );\n    var model = this.discriminatorToModel[ discriminator ];\n\n    return model ? model.Database : false;\n  },\n\n  getDiscriminatorForModel: function(model)\n  {\n    return this.discriminators[ model.$db.name ];\n  }\n\n};\n","\n  /* Top-Level Function */\n  global.Rekord = Rekord;\n\n  /* Classes */\n  global.Rekord.Model = Model;\n  global.Rekord.Database = Database;\n  global.Rekord.Relation = Relation;\n  global.Rekord.Operation = Operation;\n  global.Rekord.Transaction = Transaction;\n  global.Rekord.Search = Search;\n  global.Rekord.SearchPaged = SearchPaged;\n\n  /* Collections */\n  global.Rekord.Map = Map;\n  global.Rekord.Collection = Collection;\n  global.Rekord.FilteredCollection = FilteredCollection;\n  global.Rekord.ModelCollection = ModelCollection;\n  global.Rekord.FilteredModelCollection = FilteredModelCollection;\n  global.Rekord.Page = Page;\n\n  /* Relationships */\n  global.Rekord.HasOne = HasOne;\n  global.Rekord.BelongsTo = BelongsTo;\n  global.Rekord.HasMany = HasMany;\n  global.Rekord.HasManyThrough = HasManyThrough;\n  global.Rekord.HasRemote = HasRemote;\n\n  /* Utility Functions */\n  global.Rekord.isRekord = isRekord;\n  global.Rekord.isDefined = isDefined;\n  global.Rekord.isFunction = isFunction;\n  global.Rekord.isString = isString;\n  global.Rekord.isNumber = isNumber;\n  global.Rekord.isBoolean = isBoolean;\n  global.Rekord.isDate = isDate;\n  global.Rekord.isRegExp = isRegExp;\n  global.Rekord.isArray = isArray;\n  global.Rekord.isObject = isObject;\n  global.Rekord.isValue = isValue;\n\n  global.Rekord.uuid = uuid;\n  global.Rekord.indexOf = indexOf;\n  global.Rekord.propsMatch = propsMatch;\n  global.Rekord.hasFields = hasFields;\n  global.Rekord.toArray = toArray;\n\n  global.Rekord.eventize = eventize;\n\n  global.Rekord.extend = extend;\n  global.Rekord.extendArray = extendArray;\n  global.Rekord.copyConstructor = copyConstructor;\n  global.Rekord.factory = factory;\n\n  global.Rekord.transfer = transfer;\n  global.Rekord.collapse = collapse;\n  global.Rekord.swap = swap;\n  global.Rekord.grab = grab;\n  global.Rekord.pull = pull;\n  global.Rekord.copy = copy;\n  global.Rekord.noop = noop;\n  global.Rekord.bind = bind;\n  global.Rekord.diff = diff;\n  global.Rekord.sizeof = sizeof;\n  global.Rekord.isEmpty = isEmpty;\n  global.Rekord.collect = collect;\n  global.Rekord.applyOptions = applyOptions;\n  global.Rekord.toCamelCase = toCamelCase;\n  global.Rekord.evaluate = evaluate;\n\n  global.Rekord.clean = clean;\n  global.Rekord.cleanFunctions = cleanFunctions;\n\n  global.Rekord.compare = compare;\n  global.Rekord.equals = equals;\n  global.Rekord.equalsStrict = equalsStrict;\n  global.Rekord.equalsCompare = equalsCompare;\n\n  global.Rekord.isSorted = isSorted;\n  global.Rekord.saveComparator = saveComparator;\n  global.Rekord.createComparator = createComparator;\n  global.Rekord.addComparator = addComparator;\n\n  global.Rekord.saveWhere = saveWhere;\n  global.Rekord.createWhere = createWhere;\n\n  global.Rekord.savePropertyResolver = savePropertyResolver;\n  global.Rekord.createPropertyResolver = createPropertyResolver;\n\n  global.Rekord.saveNumberResolver = saveNumberResolver;\n  global.Rekord.createNumberResolver = createNumberResolver;\n\n  global.Rekord.saveHaving = saveHaving;\n  global.Rekord.createHaving = createHaving;\n\n  global.Rekord.parse = parse;\n  global.Rekord.format = format;\n  global.Rekord.createFormatter = createFormatter;\n\n})(this);\n"],"sourceRoot":"/source/"}